{"ast":null,"code":"import _objectWithoutProperties from \"/Users/arjein/Desktop/Projects/deneme/buildspace-gif-portal/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"/Users/arjein/Desktop/Projects/deneme/buildspace-gif-portal/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/arjein/Desktop/Projects/deneme/buildspace-gif-portal/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"/Users/arjein/Desktop/Projects/deneme/buildspace-gif-portal/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/Users/arjein/Desktop/Projects/deneme/buildspace-gif-portal/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _wrapNativeSuper from \"/Users/arjein/Desktop/Projects/deneme/buildspace-gif-portal/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _regeneratorRuntime from \"/Users/arjein/Desktop/Projects/deneme/buildspace-gif-portal/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/arjein/Desktop/Projects/deneme/buildspace-gif-portal/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _inherits from \"/Users/arjein/Desktop/Projects/deneme/buildspace-gif-portal/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/arjein/Desktop/Projects/deneme/buildspace-gif-portal/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/Users/arjein/Desktop/Projects/deneme/buildspace-gif-portal/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/arjein/Desktop/Projects/deneme/buildspace-gif-portal/gif-portal-starter/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar _excluded = [\"commitment\"],\n  _excluded2 = [\"encoding\"],\n  _excluded3 = [\"commitment\"],\n  _excluded4 = [\"commitment\"];\nimport { Buffer } from 'buffer';\nimport { sha512 } from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { blob } from '@solana/buffer-layout';\nimport { toBigIntLE, toBufferLE } from 'bigint-buffer';\nimport { coerce, instance, string, tuple, literal, unknown, union, type, optional, any, number, array, nullable, create, boolean, record, assert as assert$1 } from 'superstruct';\nimport { Client } from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport { keccak_256 } from '@noble/hashes/sha3';\nimport { hmac } from '@noble/hashes/hmac';\nimport * as secp256k1 from '@noble/secp256k1';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\n\ned25519.utils.sha512Sync = function () {\n  var _ed25519$utils;\n  return sha512((_ed25519$utils = ed25519.utils).concatBytes.apply(_ed25519$utils, arguments));\n};\nvar generatePrivateKey = ed25519.utils.randomPrivateKey;\nvar generateKeypair = function generateKeypair() {\n  var privateScalar = ed25519.utils.randomPrivateKey();\n  var publicKey = getPublicKey(privateScalar);\n  var secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey: publicKey,\n    secretKey: secretKey\n  };\n};\nvar getPublicKey = ed25519.sync.getPublicKey;\nfunction _isOnCurve(publicKey) {\n  try {\n    ed25519.Point.fromHex(publicKey, true\n    /* strict */);\n\n    return true;\n  } catch (_unused) {\n    return false;\n  }\n}\nvar _sign = function sign(message, secretKey) {\n  return ed25519.sync.sign(message, secretKey.slice(0, 32));\n};\nvar verify = ed25519.sync.verify;\nvar toBuffer = function toBuffer(arr) {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\nvar Struct = /*#__PURE__*/function () {\n  function Struct(properties) {\n    _classCallCheck(this, Struct);\n    Object.assign(this, properties);\n  }\n  _createClass(Struct, [{\n    key: \"encode\",\n    value: function encode() {\n      return Buffer.from(serialize(SOLANA_SCHEMA, this));\n    }\n  }], [{\n    key: \"decode\",\n    value: function decode(data) {\n      return deserialize(SOLANA_SCHEMA, this, data);\n    }\n  }, {\n    key: \"decodeUnchecked\",\n    value: function decodeUnchecked(data) {\n      return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n    }\n  }]);\n  return Struct;\n}(); // Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nvar Enum = /*#__PURE__*/function (_Struct) {\n  _inherits(Enum, _Struct);\n  var _super = _createSuper(Enum);\n  function Enum(properties) {\n    var _this;\n    _classCallCheck(this, Enum);\n    _this = _super.call(this, properties);\n    _this.enum = '';\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(function (key) {\n      _this.enum = key;\n    });\n    return _this;\n  }\n  return _createClass(Enum);\n}(Struct);\nvar SOLANA_SCHEMA = new Map();\nvar _Symbol$toStringTag;\n/**\n * Maximum length of derived pubkey seed\n */\n\nvar MAX_SEED_LENGTH = 32;\n/**\n * Size of public key in bytes\n */\n\nvar PUBLIC_KEY_LENGTH = 32;\n/**\n * Value to be converted into public key\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n} // local counter used by PublicKey.unique()\n\nvar uniquePublicKeyCounter = 1;\n/**\n * A public key\n */\n\n_Symbol$toStringTag = Symbol.toStringTag;\nvar PublicKey = /*#__PURE__*/function (_Struct2, _Symbol$toStringTag2) {\n  _inherits(PublicKey, _Struct2);\n  var _super2 = _createSuper(PublicKey);\n  /** @internal */\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  function PublicKey(value) {\n    var _this2;\n    _classCallCheck(this, PublicKey);\n    _this2 = _super2.call(this, {});\n    _this2._bn = void 0;\n    if (isPublicKeyData(value)) {\n      _this2._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        var decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(\"Invalid public key input\");\n        }\n        _this2._bn = new BN(decoded);\n      } else {\n        _this2._bn = new BN(value);\n      }\n      if (_this2._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(\"Invalid public key input\");\n      }\n    }\n    return _this2;\n  }\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  _createClass(PublicKey, [{\n    key: \"equals\",\n    value:\n    /**\n     * Default public key value. The base58-encoded string representation is all ones (as seen below)\n     * The underlying BN number is 32 bytes that are all zeros\n     */\n\n    /**\n     * Checks if two publicKeys are equal\n     */\n    function equals(publicKey) {\n      return this._bn.eq(publicKey._bn);\n    }\n    /**\n     * Return the base-58 representation of the public key\n     */\n  }, {\n    key: \"toBase58\",\n    value: function toBase58() {\n      return bs58.encode(this.toBytes());\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toBase58();\n    }\n    /**\n     * Return the byte array representation of the public key in big endian\n     */\n  }, {\n    key: \"toBytes\",\n    value: function toBytes() {\n      var buf = this.toBuffer();\n      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n    }\n    /**\n     * Return the Buffer representation of the public key in big endian\n     */\n  }, {\n    key: \"toBuffer\",\n    value: function toBuffer() {\n      var b = this._bn.toArrayLike(Buffer);\n      if (b.length === PUBLIC_KEY_LENGTH) {\n        return b;\n      }\n      var zeroPad = Buffer.alloc(32);\n      b.copy(zeroPad, 32 - b.length);\n      return zeroPad;\n    }\n  }, {\n    key: _Symbol$toStringTag2,\n    get: function get() {\n      return \"PublicKey(\".concat(this.toString(), \")\");\n    }\n    /**\n     * Return the base-58 representation of the public key\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.toBase58();\n    }\n    /**\n     * Derive a public key from another key, a seed, and a program ID.\n     * The program ID will also serve as the owner of the public key, giving\n     * it permission to write data to the account.\n     */\n\n    /* eslint-disable require-await */\n  }], [{\n    key: \"unique\",\n    value: function unique() {\n      var key = new PublicKey(uniquePublicKeyCounter);\n      uniquePublicKeyCounter += 1;\n      return new PublicKey(key.toBuffer());\n    }\n  }, {\n    key: \"createWithSeed\",\n    value: function () {\n      var _createWithSeed = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(fromPublicKey, seed, programId) {\n        var buffer, publicKeyBytes;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n              publicKeyBytes = sha256(buffer);\n              return _context.abrupt(\"return\", new PublicKey(publicKeyBytes));\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function createWithSeed(_x, _x2, _x3) {\n        return _createWithSeed.apply(this, arguments);\n      }\n      return createWithSeed;\n    }()\n    /**\n     * Derive a program address from seeds and a program ID.\n     */\n    /* eslint-disable require-await */\n  }, {\n    key: \"createProgramAddressSync\",\n    value: function createProgramAddressSync(seeds, programId) {\n      var buffer = Buffer.alloc(0);\n      seeds.forEach(function (seed) {\n        if (seed.length > MAX_SEED_LENGTH) {\n          throw new TypeError(\"Max seed length exceeded\");\n        }\n        buffer = Buffer.concat([buffer, toBuffer(seed)]);\n      });\n      buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n      var publicKeyBytes = sha256(buffer);\n      if (_isOnCurve(publicKeyBytes)) {\n        throw new Error(\"Invalid seeds, address must fall off the curve\");\n      }\n      return new PublicKey(publicKeyBytes);\n    }\n    /**\n     * Async version of createProgramAddressSync\n     * For backwards compatibility\n     *\n     * @deprecated Use {@link createProgramAddressSync} instead\n     */\n\n    /* eslint-disable require-await */\n  }, {\n    key: \"createProgramAddress\",\n    value: function () {\n      var _createProgramAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(seeds, programId) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", this.createProgramAddressSync(seeds, programId));\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function createProgramAddress(_x4, _x5) {\n        return _createProgramAddress.apply(this, arguments);\n      }\n      return createProgramAddress;\n    }()\n    /**\n     * Find a valid program address\n     *\n     * Valid program addresses must fall off the ed25519 curve.  This function\n     * iterates a nonce until it finds one that when combined with the seeds\n     * results in a valid program address.\n     */\n  }, {\n    key: \"findProgramAddressSync\",\n    value: function findProgramAddressSync(seeds, programId) {\n      var nonce = 255;\n      var address;\n      while (nonce != 0) {\n        try {\n          var seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n          address = this.createProgramAddressSync(seedsWithNonce, programId);\n        } catch (err) {\n          if (err instanceof TypeError) {\n            throw err;\n          }\n          nonce--;\n          continue;\n        }\n        return [address, nonce];\n      }\n      throw new Error(\"Unable to find a viable program address nonce\");\n    }\n    /**\n     * Async version of findProgramAddressSync\n     * For backwards compatibility\n     *\n     * @deprecated Use {@link findProgramAddressSync} instead\n     */\n  }, {\n    key: \"findProgramAddress\",\n    value: function () {\n      var _findProgramAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(seeds, programId) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", this.findProgramAddressSync(seeds, programId));\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function findProgramAddress(_x6, _x7) {\n        return _findProgramAddress.apply(this, arguments);\n      }\n      return findProgramAddress;\n    }()\n    /**\n     * Check that a pubkey is on the ed25519 curve.\n     */\n  }, {\n    key: \"isOnCurve\",\n    value: function isOnCurve(pubkeyData) {\n      var pubkey = new PublicKey(pubkeyData);\n      return _isOnCurve(pubkey.toBytes());\n    }\n  }]);\n  return PublicKey;\n}(Struct, _Symbol$toStringTag);\nPublicKey.default = new PublicKey('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n});\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nvar Account = /*#__PURE__*/function () {\n  /** @internal */\n\n  /** @internal */\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  function Account(secretKey) {\n    _classCallCheck(this, Account);\n    this._publicKey = void 0;\n    this._secretKey = void 0;\n    if (secretKey) {\n      var secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n  /**\n   * The public key for this account\n   */\n  _createClass(Account, [{\n    key: \"publicKey\",\n    get: function get() {\n      return new PublicKey(this._publicKey);\n    }\n    /**\n     * The **unencrypted** secret key for this account. The first 32 bytes\n     * is the private scalar and the last 32 bytes is the public key.\n     * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n     */\n  }, {\n    key: \"secretKey\",\n    get: function get() {\n      return Buffer.concat([this._secretKey, this._publicKey], 64);\n    }\n  }]);\n  return Account;\n}();\nvar BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nvar PACKET_DATA_SIZE = 1280 - 40 - 8;\nvar VERSION_PREFIX_MASK = 0x7f;\nvar SIGNATURE_LENGTH_IN_BYTES = 64;\nvar TransactionExpiredBlockheightExceededError = /*#__PURE__*/function (_Error) {\n  _inherits(TransactionExpiredBlockheightExceededError, _Error);\n  var _super3 = _createSuper(TransactionExpiredBlockheightExceededError);\n  function TransactionExpiredBlockheightExceededError(signature) {\n    var _this3;\n    _classCallCheck(this, TransactionExpiredBlockheightExceededError);\n    _this3 = _super3.call(this, \"Signature \".concat(signature, \" has expired: block height exceeded.\"));\n    _this3.signature = void 0;\n    _this3.signature = signature;\n    return _this3;\n  }\n  return _createClass(TransactionExpiredBlockheightExceededError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nObject.defineProperty(TransactionExpiredBlockheightExceededError.prototype, 'name', {\n  value: 'TransactionExpiredBlockheightExceededError'\n});\nvar TransactionExpiredTimeoutError = /*#__PURE__*/function (_Error2) {\n  _inherits(TransactionExpiredTimeoutError, _Error2);\n  var _super4 = _createSuper(TransactionExpiredTimeoutError);\n  function TransactionExpiredTimeoutError(signature, timeoutSeconds) {\n    var _this4;\n    _classCallCheck(this, TransactionExpiredTimeoutError);\n    _this4 = _super4.call(this, \"Transaction was not confirmed in \".concat(timeoutSeconds.toFixed(2), \" seconds. It is \") + 'unknown if it succeeded or failed. Check signature ' + \"\".concat(signature, \" using the Solana Explorer or CLI tools.\"));\n    _this4.signature = void 0;\n    _this4.signature = signature;\n    return _this4;\n  }\n  return _createClass(TransactionExpiredTimeoutError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError'\n});\nvar TransactionExpiredNonceInvalidError = /*#__PURE__*/function (_Error3) {\n  _inherits(TransactionExpiredNonceInvalidError, _Error3);\n  var _super5 = _createSuper(TransactionExpiredNonceInvalidError);\n  function TransactionExpiredNonceInvalidError(signature) {\n    var _this5;\n    _classCallCheck(this, TransactionExpiredNonceInvalidError);\n    _this5 = _super5.call(this, \"Signature \".concat(signature, \" has expired: the nonce is no longer valid.\"));\n    _this5.signature = void 0;\n    _this5.signature = signature;\n    return _this5;\n  }\n  return _createClass(TransactionExpiredNonceInvalidError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError'\n});\nvar MessageAccountKeys = /*#__PURE__*/function () {\n  function MessageAccountKeys(staticAccountKeys, accountKeysFromLookups) {\n    _classCallCheck(this, MessageAccountKeys);\n    this.staticAccountKeys = void 0;\n    this.accountKeysFromLookups = void 0;\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n  _createClass(MessageAccountKeys, [{\n    key: \"keySegments\",\n    value: function keySegments() {\n      var keySegments = [this.staticAccountKeys];\n      if (this.accountKeysFromLookups) {\n        keySegments.push(this.accountKeysFromLookups.writable);\n        keySegments.push(this.accountKeysFromLookups.readonly);\n      }\n      return keySegments;\n    }\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      var _iterator = _createForOfIteratorHelper(this.keySegments()),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var keySegment = _step.value;\n          if (index < keySegment.length) {\n            return keySegment[index];\n          } else {\n            index -= keySegment.length;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.keySegments().flat().length;\n    }\n  }, {\n    key: \"compileInstructions\",\n    value: function compileInstructions(instructions) {\n      // Bail early if any account indexes would overflow a u8\n      var U8_MAX = 255;\n      if (this.length > U8_MAX + 1) {\n        throw new Error('Account index overflow encountered during compilation');\n      }\n      var keyIndexMap = new Map();\n      this.keySegments().flat().forEach(function (key, index) {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n      var findKeyIndex = function findKeyIndex(key) {\n        var keyIndex = keyIndexMap.get(key.toBase58());\n        if (keyIndex === undefined) throw new Error('Encountered an unknown instruction account key during compilation');\n        return keyIndex;\n      };\n      return instructions.map(function (instruction) {\n        return {\n          programIdIndex: findKeyIndex(instruction.programId),\n          accountKeyIndexes: instruction.keys.map(function (meta) {\n            return findKeyIndex(meta.pubkey);\n          }),\n          data: instruction.data\n        };\n      });\n    }\n  }]);\n  return MessageAccountKeys;\n}();\n/**\n * Layout for a public key\n */\nvar publicKey = function publicKey() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'publicKey';\n  return BufferLayout.blob(32, property);\n};\n/**\n * Layout for a signature\n */\n\nvar signature = function signature() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'signature';\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nvar rustString = function rustString() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'string';\n  var rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n  var _decode = rsl.decode.bind(rsl);\n  var _encode = rsl.encode.bind(rsl);\n  var rslShim = rsl;\n  rslShim.decode = function (b, offset) {\n    var data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n  rslShim.encode = function (str, b, offset) {\n    var data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, b, offset);\n  };\n  rslShim.alloc = function (str) {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n  return rslShim;\n};\n/**\n * Layout for an Authorized object\n */\n\nvar authorized = function authorized() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'authorized';\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n/**\n * Layout for a Lockup object\n */\n\nvar lockup = function lockup() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'lockup';\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n/**\n *  Layout for a VoteInit object\n */\n\nvar voteInit = function voteInit() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'voteInit';\n  return BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission')], property);\n};\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\n\nvar voteAuthorizeWithSeedArgs = function voteAuthorizeWithSeedArgs() {\n  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'voteAuthorizeWithSeedArgs';\n  return BufferLayout.struct([BufferLayout.u32('voteAuthorizationType'), publicKey('currentAuthorityDerivedKeyOwnerPubkey'), rustString('currentAuthorityDerivedKeySeed'), publicKey('newAuthorized')], property);\n};\nfunction getAlloc(type, fields) {\n  var getItemAlloc = function getItemAlloc(item) {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      var field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({\n        layout: item\n      }, fields[item.property]);\n    } // Couldn't determine allocated size of layout\n\n    return 0;\n  };\n  var alloc = 0;\n  type.layout.fields.forEach(function (item) {\n    alloc += getItemAlloc(item);\n  });\n  return alloc;\n}\nfunction decodeLength(bytes) {\n  var len = 0;\n  var size = 0;\n  for (;;) {\n    var elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\nfunction encodeLength(bytes, len) {\n  var rem_len = len;\n  for (;;) {\n    var elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\nvar CompiledKeys = /*#__PURE__*/function () {\n  function CompiledKeys(payer, keyMetaMap) {\n    _classCallCheck(this, CompiledKeys);\n    this.payer = void 0;\n    this.keyMetaMap = void 0;\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n  _createClass(CompiledKeys, [{\n    key: \"getMessageComponents\",\n    value: function getMessageComponents() {\n      var mapEntries = _toConsumableArray(this.keyMetaMap.entries());\n      assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n      var writableSigners = mapEntries.filter(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          meta = _ref2[1];\n        return meta.isSigner && meta.isWritable;\n      });\n      var readonlySigners = mapEntries.filter(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n          meta = _ref4[1];\n        return meta.isSigner && !meta.isWritable;\n      });\n      var writableNonSigners = mapEntries.filter(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n          meta = _ref6[1];\n        return !meta.isSigner && meta.isWritable;\n      });\n      var readonlyNonSigners = mapEntries.filter(function (_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 2),\n          meta = _ref8[1];\n        return !meta.isSigner && !meta.isWritable;\n      });\n      var header = {\n        numRequiredSignatures: writableSigners.length + readonlySigners.length,\n        numReadonlySignedAccounts: readonlySigners.length,\n        numReadonlyUnsignedAccounts: readonlyNonSigners.length\n      }; // sanity checks\n\n      {\n        assert(writableSigners.length > 0, 'Expected at least one writable signer key');\n        var _writableSigners$ = _slicedToArray(writableSigners[0], 1),\n          payerAddress = _writableSigners$[0];\n        assert(payerAddress === this.payer.toBase58(), 'Expected first writable signer key to be the fee payer');\n      }\n      var staticAccountKeys = [].concat(_toConsumableArray(writableSigners.map(function (_ref9) {\n        var _ref10 = _slicedToArray(_ref9, 1),\n          address = _ref10[0];\n        return new PublicKey(address);\n      })), _toConsumableArray(readonlySigners.map(function (_ref11) {\n        var _ref12 = _slicedToArray(_ref11, 1),\n          address = _ref12[0];\n        return new PublicKey(address);\n      })), _toConsumableArray(writableNonSigners.map(function (_ref13) {\n        var _ref14 = _slicedToArray(_ref13, 1),\n          address = _ref14[0];\n        return new PublicKey(address);\n      })), _toConsumableArray(readonlyNonSigners.map(function (_ref15) {\n        var _ref16 = _slicedToArray(_ref15, 1),\n          address = _ref16[0];\n        return new PublicKey(address);\n      })));\n      return [header, staticAccountKeys];\n    }\n  }, {\n    key: \"extractTableLookup\",\n    value: function extractTableLookup(lookupTable) {\n      var _this$drainKeysFoundI = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, function (keyMeta) {\n          return !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable;\n        }),\n        _this$drainKeysFoundI2 = _slicedToArray(_this$drainKeysFoundI, 2),\n        writableIndexes = _this$drainKeysFoundI2[0],\n        drainedWritableKeys = _this$drainKeysFoundI2[1];\n      var _this$drainKeysFoundI3 = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, function (keyMeta) {\n          return !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable;\n        }),\n        _this$drainKeysFoundI4 = _slicedToArray(_this$drainKeysFoundI3, 2),\n        readonlyIndexes = _this$drainKeysFoundI4[0],\n        drainedReadonlyKeys = _this$drainKeysFoundI4[1]; // Don't extract lookup if no keys were found\n\n      if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n        return;\n      }\n      return [{\n        accountKey: lookupTable.key,\n        writableIndexes: writableIndexes,\n        readonlyIndexes: readonlyIndexes\n      }, {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys\n      }];\n    }\n    /** @internal */\n  }, {\n    key: \"drainKeysFoundInLookupTable\",\n    value: function drainKeysFoundInLookupTable(lookupTableEntries, keyMetaFilter) {\n      var _this6 = this;\n      var lookupTableIndexes = new Array();\n      var drainedKeys = new Array();\n      var _iterator2 = _createForOfIteratorHelper(this.keyMetaMap.entries()),\n        _step2;\n      try {\n        var _loop = function _loop() {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n            address = _step2$value[0],\n            keyMeta = _step2$value[1];\n          if (keyMetaFilter(keyMeta)) {\n            var key = new PublicKey(address);\n            var lookupTableIndex = lookupTableEntries.findIndex(function (entry) {\n              return entry.equals(key);\n            });\n            if (lookupTableIndex >= 0) {\n              assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n              lookupTableIndexes.push(lookupTableIndex);\n              drainedKeys.push(key);\n              _this6.keyMetaMap.delete(address);\n            }\n          }\n        };\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return [lookupTableIndexes, drainedKeys];\n    }\n  }], [{\n    key: \"compile\",\n    value: function compile(instructions, payer) {\n      var keyMetaMap = new Map();\n      var getOrInsertDefault = function getOrInsertDefault(pubkey) {\n        var address = pubkey.toBase58();\n        var keyMeta = keyMetaMap.get(address);\n        if (keyMeta === undefined) {\n          keyMeta = {\n            isSigner: false,\n            isWritable: false,\n            isInvoked: false\n          };\n          keyMetaMap.set(address, keyMeta);\n        }\n        return keyMeta;\n      };\n      var payerKeyMeta = getOrInsertDefault(payer);\n      payerKeyMeta.isSigner = true;\n      payerKeyMeta.isWritable = true;\n      var _iterator3 = _createForOfIteratorHelper(instructions),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var ix = _step3.value;\n          getOrInsertDefault(ix.programId).isInvoked = true;\n          var _iterator4 = _createForOfIteratorHelper(ix.keys),\n            _step4;\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var accountMeta = _step4.value;\n              var keyMeta = getOrInsertDefault(accountMeta.pubkey);\n              keyMeta.isSigner || (keyMeta.isSigner = accountMeta.isSigner);\n              keyMeta.isWritable || (keyMeta.isWritable = accountMeta.isWritable);\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return new CompiledKeys(payer, keyMetaMap);\n    }\n  }]);\n  return CompiledKeys;\n}();\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\n/**\n * List of instructions to be processed atomically\n */\nvar Message = /*#__PURE__*/function () {\n  function Message(args) {\n    var _this7 = this;\n    _classCallCheck(this, Message);\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(function (account) {\n      return new PublicKey(account);\n    });\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(function (ix) {\n      return _this7.indexToProgramIds.set(ix.programIdIndex, _this7.accountKeys[ix.programIdIndex]);\n    });\n  }\n  _createClass(Message, [{\n    key: \"version\",\n    get: function get() {\n      return 'legacy';\n    }\n  }, {\n    key: \"staticAccountKeys\",\n    get: function get() {\n      return this.accountKeys;\n    }\n  }, {\n    key: \"compiledInstructions\",\n    get: function get() {\n      return this.instructions.map(function (ix) {\n        return {\n          programIdIndex: ix.programIdIndex,\n          accountKeyIndexes: ix.accounts,\n          data: bs58.decode(ix.data)\n        };\n      });\n    }\n  }, {\n    key: \"addressTableLookups\",\n    get: function get() {\n      return [];\n    }\n  }, {\n    key: \"getAccountKeys\",\n    value: function getAccountKeys() {\n      return new MessageAccountKeys(this.staticAccountKeys);\n    }\n  }, {\n    key: \"isAccountSigner\",\n    value: function isAccountSigner(index) {\n      return index < this.header.numRequiredSignatures;\n    }\n  }, {\n    key: \"isAccountWritable\",\n    value: function isAccountWritable(index) {\n      var numSignedAccounts = this.header.numRequiredSignatures;\n      if (index >= this.header.numRequiredSignatures) {\n        var unsignedAccountIndex = index - numSignedAccounts;\n        var numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n        var numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n        return unsignedAccountIndex < numWritableUnsignedAccounts;\n      } else {\n        var numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n        return index < numWritableSignedAccounts;\n      }\n    }\n  }, {\n    key: \"isProgramId\",\n    value: function isProgramId(index) {\n      return this.indexToProgramIds.has(index);\n    }\n  }, {\n    key: \"programIds\",\n    value: function programIds() {\n      return _toConsumableArray(this.indexToProgramIds.values());\n    }\n  }, {\n    key: \"nonProgramIds\",\n    value: function nonProgramIds() {\n      var _this8 = this;\n      return this.accountKeys.filter(function (_, index) {\n        return !_this8.isProgramId(index);\n      });\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var numKeys = this.accountKeys.length;\n      var keyCount = [];\n      encodeLength(keyCount, numKeys);\n      var instructions = this.instructions.map(function (instruction) {\n        var accounts = instruction.accounts,\n          programIdIndex = instruction.programIdIndex;\n        var data = Array.from(bs58.decode(instruction.data));\n        var keyIndicesCount = [];\n        encodeLength(keyIndicesCount, accounts.length);\n        var dataCount = [];\n        encodeLength(dataCount, data.length);\n        return {\n          programIdIndex: programIdIndex,\n          keyIndicesCount: Buffer.from(keyIndicesCount),\n          keyIndices: accounts,\n          dataLength: Buffer.from(dataCount),\n          data: data\n        };\n      });\n      var instructionCount = [];\n      encodeLength(instructionCount, instructions.length);\n      var instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n      Buffer.from(instructionCount).copy(instructionBuffer);\n      var instructionBufferLength = instructionCount.length;\n      instructions.forEach(function (instruction) {\n        var instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n        var length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n        instructionBufferLength += length;\n      });\n      instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n      var signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n      var transaction = {\n        numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n        numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n        numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n        keyCount: Buffer.from(keyCount),\n        keys: this.accountKeys.map(function (key) {\n          return toBuffer(key.toBytes());\n        }),\n        recentBlockhash: bs58.decode(this.recentBlockhash)\n      };\n      var signData = Buffer.alloc(2048);\n      var length = signDataLayout.encode(transaction, signData);\n      instructionBuffer.copy(signData, length);\n      return signData.slice(0, length + instructionBuffer.length);\n    }\n    /**\n     * Decode a compiled message into a Message object.\n     */\n  }], [{\n    key: \"compile\",\n    value: function compile(args) {\n      var compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n      var _compiledKeys$getMess = compiledKeys.getMessageComponents(),\n        _compiledKeys$getMess2 = _slicedToArray(_compiledKeys$getMess, 2),\n        header = _compiledKeys$getMess2[0],\n        staticAccountKeys = _compiledKeys$getMess2[1];\n      var accountKeys = new MessageAccountKeys(staticAccountKeys);\n      var instructions = accountKeys.compileInstructions(args.instructions).map(function (ix) {\n        return {\n          programIdIndex: ix.programIdIndex,\n          accounts: ix.accountKeyIndexes,\n          data: bs58.encode(ix.data)\n        };\n      });\n      return new Message({\n        header: header,\n        accountKeys: staticAccountKeys,\n        recentBlockhash: args.recentBlockhash,\n        instructions: instructions\n      });\n    }\n  }, {\n    key: \"from\",\n    value: function from(buffer) {\n      // Slice up wire data\n      var byteArray = _toConsumableArray(buffer);\n      var numRequiredSignatures = byteArray.shift();\n      if (numRequiredSignatures !== (numRequiredSignatures & VERSION_PREFIX_MASK)) {\n        throw new Error('Versioned messages must be deserialized with VersionedMessage.deserialize()');\n      }\n      var numReadonlySignedAccounts = byteArray.shift();\n      var numReadonlyUnsignedAccounts = byteArray.shift();\n      var accountCount = decodeLength(byteArray);\n      var accountKeys = [];\n      for (var i = 0; i < accountCount; i++) {\n        var account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n        byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n        accountKeys.push(new PublicKey(Buffer.from(account)));\n      }\n      var recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      var instructionCount = decodeLength(byteArray);\n      var instructions = [];\n      for (var _i = 0; _i < instructionCount; _i++) {\n        var programIdIndex = byteArray.shift();\n        var _accountCount = decodeLength(byteArray);\n        var accounts = byteArray.slice(0, _accountCount);\n        byteArray = byteArray.slice(_accountCount);\n        var dataLength = decodeLength(byteArray);\n        var dataSlice = byteArray.slice(0, dataLength);\n        var data = bs58.encode(Buffer.from(dataSlice));\n        byteArray = byteArray.slice(dataLength);\n        instructions.push({\n          programIdIndex: programIdIndex,\n          accounts: accounts,\n          data: data\n        });\n      }\n      var messageArgs = {\n        header: {\n          numRequiredSignatures: numRequiredSignatures,\n          numReadonlySignedAccounts: numReadonlySignedAccounts,\n          numReadonlyUnsignedAccounts: numReadonlyUnsignedAccounts\n        },\n        recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n        accountKeys: accountKeys,\n        instructions: instructions\n      };\n      return new Message(messageArgs);\n    }\n  }]);\n  return Message;\n}();\n/**\n * Message constructor arguments\n */\nvar MessageV0 = /*#__PURE__*/function () {\n  function MessageV0(args) {\n    _classCallCheck(this, MessageV0);\n    this.header = void 0;\n    this.staticAccountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.compiledInstructions = void 0;\n    this.addressTableLookups = void 0;\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n  _createClass(MessageV0, [{\n    key: \"version\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"numAccountKeysFromLookups\",\n    get: function get() {\n      var count = 0;\n      var _iterator5 = _createForOfIteratorHelper(this.addressTableLookups),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var lookup = _step5.value;\n          count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      return count;\n    }\n  }, {\n    key: \"getAccountKeys\",\n    value: function getAccountKeys(args) {\n      var accountKeysFromLookups;\n      if (args && 'accountKeysFromLookups' in args && args.accountKeysFromLookups) {\n        if (this.numAccountKeysFromLookups != args.accountKeysFromLookups.writable.length + args.accountKeysFromLookups.readonly.length) {\n          throw new Error('Failed to get account keys because of a mismatch in the number of account keys from lookups');\n        }\n        accountKeysFromLookups = args.accountKeysFromLookups;\n      } else if (args && 'addressLookupTableAccounts' in args && args.addressLookupTableAccounts) {\n        accountKeysFromLookups = this.resolveAddressTableLookups(args.addressLookupTableAccounts);\n      } else if (this.addressTableLookups.length > 0) {\n        throw new Error('Failed to get account keys because address table lookups were not resolved');\n      }\n      return new MessageAccountKeys(this.staticAccountKeys, accountKeysFromLookups);\n    }\n  }, {\n    key: \"isAccountSigner\",\n    value: function isAccountSigner(index) {\n      return index < this.header.numRequiredSignatures;\n    }\n  }, {\n    key: \"isAccountWritable\",\n    value: function isAccountWritable(index) {\n      var numSignedAccounts = this.header.numRequiredSignatures;\n      var numStaticAccountKeys = this.staticAccountKeys.length;\n      if (index >= numStaticAccountKeys) {\n        var lookupAccountKeysIndex = index - numStaticAccountKeys;\n        var numWritableLookupAccountKeys = this.addressTableLookups.reduce(function (count, lookup) {\n          return count + lookup.writableIndexes.length;\n        }, 0);\n        return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n      } else if (index >= this.header.numRequiredSignatures) {\n        var unsignedAccountIndex = index - numSignedAccounts;\n        var numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n        var numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n        return unsignedAccountIndex < numWritableUnsignedAccounts;\n      } else {\n        var numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n        return index < numWritableSignedAccounts;\n      }\n    }\n  }, {\n    key: \"resolveAddressTableLookups\",\n    value: function resolveAddressTableLookups(addressLookupTableAccounts) {\n      var accountKeysFromLookups = {\n        writable: [],\n        readonly: []\n      };\n      var _iterator6 = _createForOfIteratorHelper(this.addressTableLookups),\n        _step6;\n      try {\n        var _loop2 = function _loop2() {\n          var tableLookup = _step6.value;\n          var tableAccount = addressLookupTableAccounts.find(function (account) {\n            return account.key.equals(tableLookup.accountKey);\n          });\n          if (!tableAccount) {\n            throw new Error(\"Failed to find address lookup table account for table key \".concat(tableLookup.accountKey.toBase58()));\n          }\n          var _iterator7 = _createForOfIteratorHelper(tableLookup.writableIndexes),\n            _step7;\n          try {\n            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n              var index = _step7.value;\n              if (index < tableAccount.state.addresses.length) {\n                accountKeysFromLookups.writable.push(tableAccount.state.addresses[index]);\n              } else {\n                throw new Error(\"Failed to find address for index \".concat(index, \" in address lookup table \").concat(tableLookup.accountKey.toBase58()));\n              }\n            }\n          } catch (err) {\n            _iterator7.e(err);\n          } finally {\n            _iterator7.f();\n          }\n          var _iterator8 = _createForOfIteratorHelper(tableLookup.readonlyIndexes),\n            _step8;\n          try {\n            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n              var _index = _step8.value;\n              if (_index < tableAccount.state.addresses.length) {\n                accountKeysFromLookups.readonly.push(tableAccount.state.addresses[_index]);\n              } else {\n                throw new Error(\"Failed to find address for index \".concat(_index, \" in address lookup table \").concat(tableLookup.accountKey.toBase58()));\n              }\n            }\n          } catch (err) {\n            _iterator8.e(err);\n          } finally {\n            _iterator8.f();\n          }\n        };\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          _loop2();\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n      return accountKeysFromLookups;\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var encodedStaticAccountKeysLength = Array();\n      encodeLength(encodedStaticAccountKeysLength, this.staticAccountKeys.length);\n      var serializedInstructions = this.serializeInstructions();\n      var encodedInstructionsLength = Array();\n      encodeLength(encodedInstructionsLength, this.compiledInstructions.length);\n      var serializedAddressTableLookups = this.serializeAddressTableLookups();\n      var encodedAddressTableLookupsLength = Array();\n      encodeLength(encodedAddressTableLookupsLength, this.addressTableLookups.length);\n      var messageLayout = BufferLayout.struct([BufferLayout.u8('prefix'), BufferLayout.struct([BufferLayout.u8('numRequiredSignatures'), BufferLayout.u8('numReadonlySignedAccounts'), BufferLayout.u8('numReadonlyUnsignedAccounts')], 'header'), BufferLayout.blob(encodedStaticAccountKeysLength.length, 'staticAccountKeysLength'), BufferLayout.seq(publicKey(), this.staticAccountKeys.length, 'staticAccountKeys'), publicKey('recentBlockhash'), BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'), BufferLayout.blob(serializedInstructions.length, 'serializedInstructions'), BufferLayout.blob(encodedAddressTableLookupsLength.length, 'addressTableLookupsLength'), BufferLayout.blob(serializedAddressTableLookups.length, 'serializedAddressTableLookups')]);\n      var serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n      var MESSAGE_VERSION_0_PREFIX = 1 << 7;\n      var serializedMessageLength = messageLayout.encode({\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(function (key) {\n          return key.toBytes();\n        }),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions: serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(encodedAddressTableLookupsLength),\n        serializedAddressTableLookups: serializedAddressTableLookups\n      }, serializedMessage);\n      return serializedMessage.slice(0, serializedMessageLength);\n    }\n  }, {\n    key: \"serializeInstructions\",\n    value: function serializeInstructions() {\n      var serializedLength = 0;\n      var serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n      var _iterator9 = _createForOfIteratorHelper(this.compiledInstructions),\n        _step9;\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var instruction = _step9.value;\n          var encodedAccountKeyIndexesLength = Array();\n          encodeLength(encodedAccountKeyIndexesLength, instruction.accountKeyIndexes.length);\n          var encodedDataLength = Array();\n          encodeLength(encodedDataLength, instruction.data.length);\n          var instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(encodedAccountKeyIndexesLength.length, 'encodedAccountKeyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), instruction.accountKeyIndexes.length, 'accountKeyIndexes'), BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'), BufferLayout.blob(instruction.data.length, 'data')]);\n          serializedLength += instructionLayout.encode({\n            programIdIndex: instruction.programIdIndex,\n            encodedAccountKeyIndexesLength: new Uint8Array(encodedAccountKeyIndexesLength),\n            accountKeyIndexes: instruction.accountKeyIndexes,\n            encodedDataLength: new Uint8Array(encodedDataLength),\n            data: instruction.data\n          }, serializedInstructions, serializedLength);\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n      return serializedInstructions.slice(0, serializedLength);\n    }\n  }, {\n    key: \"serializeAddressTableLookups\",\n    value: function serializeAddressTableLookups() {\n      var serializedLength = 0;\n      var serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n      var _iterator10 = _createForOfIteratorHelper(this.addressTableLookups),\n        _step10;\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var lookup = _step10.value;\n          var encodedWritableIndexesLength = Array();\n          encodeLength(encodedWritableIndexesLength, lookup.writableIndexes.length);\n          var encodedReadonlyIndexesLength = Array();\n          encodeLength(encodedReadonlyIndexesLength, lookup.readonlyIndexes.length);\n          var addressTableLookupLayout = BufferLayout.struct([publicKey('accountKey'), BufferLayout.blob(encodedWritableIndexesLength.length, 'encodedWritableIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.writableIndexes.length, 'writableIndexes'), BufferLayout.blob(encodedReadonlyIndexesLength.length, 'encodedReadonlyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.readonlyIndexes.length, 'readonlyIndexes')]);\n          serializedLength += addressTableLookupLayout.encode({\n            accountKey: lookup.accountKey.toBytes(),\n            encodedWritableIndexesLength: new Uint8Array(encodedWritableIndexesLength),\n            writableIndexes: lookup.writableIndexes,\n            encodedReadonlyIndexesLength: new Uint8Array(encodedReadonlyIndexesLength),\n            readonlyIndexes: lookup.readonlyIndexes\n          }, serializedAddressTableLookups, serializedLength);\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n      return serializedAddressTableLookups.slice(0, serializedLength);\n    }\n  }], [{\n    key: \"compile\",\n    value: function compile(args) {\n      var compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n      var addressTableLookups = new Array();\n      var accountKeysFromLookups = {\n        writable: new Array(),\n        readonly: new Array()\n      };\n      var lookupTableAccounts = args.addressLookupTableAccounts || [];\n      var _iterator11 = _createForOfIteratorHelper(lookupTableAccounts),\n        _step11;\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var lookupTable = _step11.value;\n          var extractResult = compiledKeys.extractTableLookup(lookupTable);\n          if (extractResult !== undefined) {\n            var _accountKeysFromLooku, _accountKeysFromLooku2;\n            var _extractResult = _slicedToArray(extractResult, 2),\n              addressTableLookup = _extractResult[0],\n              _extractResult$ = _extractResult[1],\n              writable = _extractResult$.writable,\n              readonly = _extractResult$.readonly;\n            addressTableLookups.push(addressTableLookup);\n            (_accountKeysFromLooku = accountKeysFromLookups.writable).push.apply(_accountKeysFromLooku, _toConsumableArray(writable));\n            (_accountKeysFromLooku2 = accountKeysFromLookups.readonly).push.apply(_accountKeysFromLooku2, _toConsumableArray(readonly));\n          }\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n      var _compiledKeys$getMess3 = compiledKeys.getMessageComponents(),\n        _compiledKeys$getMess4 = _slicedToArray(_compiledKeys$getMess3, 2),\n        header = _compiledKeys$getMess4[0],\n        staticAccountKeys = _compiledKeys$getMess4[1];\n      var accountKeys = new MessageAccountKeys(staticAccountKeys, accountKeysFromLookups);\n      var compiledInstructions = accountKeys.compileInstructions(args.instructions);\n      return new MessageV0({\n        header: header,\n        staticAccountKeys: staticAccountKeys,\n        recentBlockhash: args.recentBlockhash,\n        compiledInstructions: compiledInstructions,\n        addressTableLookups: addressTableLookups\n      });\n    }\n  }, {\n    key: \"deserialize\",\n    value: function deserialize(serializedMessage) {\n      var byteArray = _toConsumableArray(serializedMessage);\n      var prefix = byteArray.shift();\n      var maskedPrefix = prefix & VERSION_PREFIX_MASK;\n      assert(prefix !== maskedPrefix, \"Expected versioned message but received legacy message\");\n      var version = maskedPrefix;\n      assert(version === 0, \"Expected versioned message with version 0 but found version \".concat(version));\n      var header = {\n        numRequiredSignatures: byteArray.shift(),\n        numReadonlySignedAccounts: byteArray.shift(),\n        numReadonlyUnsignedAccounts: byteArray.shift()\n      };\n      var staticAccountKeys = [];\n      var staticAccountKeysLength = decodeLength(byteArray);\n      for (var i = 0; i < staticAccountKeysLength; i++) {\n        staticAccountKeys.push(new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)));\n      }\n      var recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      var instructionCount = decodeLength(byteArray);\n      var compiledInstructions = [];\n      for (var _i2 = 0; _i2 < instructionCount; _i2++) {\n        var programIdIndex = byteArray.shift();\n        var accountKeyIndexesLength = decodeLength(byteArray);\n        var accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n        var dataLength = decodeLength(byteArray);\n        var data = new Uint8Array(byteArray.splice(0, dataLength));\n        compiledInstructions.push({\n          programIdIndex: programIdIndex,\n          accountKeyIndexes: accountKeyIndexes,\n          data: data\n        });\n      }\n      var addressTableLookupsCount = decodeLength(byteArray);\n      var addressTableLookups = [];\n      for (var _i3 = 0; _i3 < addressTableLookupsCount; _i3++) {\n        var accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n        var writableIndexesLength = decodeLength(byteArray);\n        var writableIndexes = byteArray.splice(0, writableIndexesLength);\n        var readonlyIndexesLength = decodeLength(byteArray);\n        var readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n        addressTableLookups.push({\n          accountKey: accountKey,\n          writableIndexes: writableIndexes,\n          readonlyIndexes: readonlyIndexes\n        });\n      }\n      return new MessageV0({\n        header: header,\n        staticAccountKeys: staticAccountKeys,\n        recentBlockhash: recentBlockhash,\n        compiledInstructions: compiledInstructions,\n        addressTableLookups: addressTableLookups\n      });\n    }\n  }]);\n  return MessageV0;\n}(); // eslint-disable-next-line no-redeclare\nvar VersionedMessage = {\n  deserializeMessageVersion: function deserializeMessageVersion(serializedMessage) {\n    var prefix = serializedMessage[0];\n    var maskedPrefix = prefix & VERSION_PREFIX_MASK; // if the highest bit of the prefix is not set, the message is not versioned\n\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    } // the lower 7 bits of the prefix indicate the message version\n\n    return maskedPrefix;\n  },\n  deserialize: function deserialize(serializedMessage) {\n    var version = VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\"Transaction message version \".concat(version, \" deserialization is not supported\"));\n    }\n  }\n};\n\n/**\n * Transaction signature as base-58 encoded string\n */\n\nvar TransactionStatus;\n/**\n * Default (empty) signature\n */\n\n(function (TransactionStatus) {\n  TransactionStatus[TransactionStatus[\"BLOCKHEIGHT_EXCEEDED\"] = 0] = \"BLOCKHEIGHT_EXCEEDED\";\n  TransactionStatus[TransactionStatus[\"PROCESSED\"] = 1] = \"PROCESSED\";\n  TransactionStatus[TransactionStatus[\"TIMED_OUT\"] = 2] = \"TIMED_OUT\";\n  TransactionStatus[TransactionStatus[\"NONCE_INVALID\"] = 3] = \"NONCE_INVALID\";\n})(TransactionStatus || (TransactionStatus = {}));\nvar DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * Transaction Instruction class\n */\nvar TransactionInstruction = /*#__PURE__*/function () {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n\n  /**\n   * Program Id to execute\n   */\n\n  /**\n   * Program input\n   */\n  function TransactionInstruction(opts) {\n    _classCallCheck(this, TransactionInstruction);\n    this.keys = void 0;\n    this.programId = void 0;\n    this.data = Buffer.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n  /**\n   * @internal\n   */\n  _createClass(TransactionInstruction, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        keys: this.keys.map(function (_ref17) {\n          var pubkey = _ref17.pubkey,\n            isSigner = _ref17.isSigner,\n            isWritable = _ref17.isWritable;\n          return {\n            pubkey: pubkey.toJSON(),\n            isSigner: isSigner,\n            isWritable: isWritable\n          };\n        }),\n        programId: this.programId.toJSON(),\n        data: _toConsumableArray(this.data)\n      };\n    }\n  }]);\n  return TransactionInstruction;\n}();\n/**\n * Pair of signature and corresponding public key\n */\n/**\n * Transaction class\n */\nvar Transaction = /*#__PURE__*/function () {\n  /**\n   * The transaction fee payer\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n  function Transaction(opts) {\n    _classCallCheck(this, Transaction);\n    this.signatures = [];\n    this.feePayer = void 0;\n    this.instructions = [];\n    this.recentBlockhash = void 0;\n    this.lastValidBlockHeight = void 0;\n    this.nonceInfo = void 0;\n    this.minNonceContextSlot = void 0;\n    this._message = void 0;\n    this._json = void 0;\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      var minContextSlot = opts.minContextSlot,\n        nonceInfo = opts.nonceInfo;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      var blockhash = opts.blockhash,\n        lastValidBlockHeight = opts.lastValidBlockHeight;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      var recentBlockhash = opts.recentBlockhash,\n        _nonceInfo = opts.nonceInfo;\n      if (_nonceInfo) {\n        this.nonceInfo = _nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n  /**\n   * @internal\n   */\n  _createClass(Transaction, [{\n    key: \"signature\",\n    get:\n    /**\n     * Signatures for the transaction.  Typically created by invoking the\n     * `sign()` method\n     */\n\n    /**\n     * The first (payer) Transaction signature\n     */\n    function get() {\n      if (this.signatures.length > 0) {\n        return this.signatures[0].signature;\n      }\n      return null;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        recentBlockhash: this.recentBlockhash || null,\n        feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n        nonceInfo: this.nonceInfo ? {\n          nonce: this.nonceInfo.nonce,\n          nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()\n        } : null,\n        instructions: this.instructions.map(function (instruction) {\n          return instruction.toJSON();\n        }),\n        signers: this.signatures.map(function (_ref18) {\n          var publicKey = _ref18.publicKey;\n          return publicKey.toJSON();\n        })\n      };\n    }\n    /**\n     * Add one or more instructions to this Transaction\n     */\n  }, {\n    key: \"add\",\n    value: function add() {\n      var _this9 = this;\n      for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n        items[_key] = arguments[_key];\n      }\n      if (items.length === 0) {\n        throw new Error('No instructions');\n      }\n      items.forEach(function (item) {\n        if ('instructions' in item) {\n          _this9.instructions = _this9.instructions.concat(item.instructions);\n        } else if ('data' in item && 'programId' in item && 'keys' in item) {\n          _this9.instructions.push(item);\n        } else {\n          _this9.instructions.push(new TransactionInstruction(item));\n        }\n      });\n      return this;\n    }\n    /**\n     * Compile transaction data\n     */\n  }, {\n    key: \"compileMessage\",\n    value: function compileMessage() {\n      if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json)) {\n        return this._message;\n      }\n      var recentBlockhash;\n      var instructions;\n      if (this.nonceInfo) {\n        recentBlockhash = this.nonceInfo.nonce;\n        if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n          instructions = [this.nonceInfo.nonceInstruction].concat(_toConsumableArray(this.instructions));\n        } else {\n          instructions = this.instructions;\n        }\n      } else {\n        recentBlockhash = this.recentBlockhash;\n        instructions = this.instructions;\n      }\n      if (!recentBlockhash) {\n        throw new Error('Transaction recentBlockhash required');\n      }\n      if (instructions.length < 1) {\n        console.warn('No instructions provided');\n      }\n      var feePayer;\n      if (this.feePayer) {\n        feePayer = this.feePayer;\n      } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n        // Use implicit fee payer\n        feePayer = this.signatures[0].publicKey;\n      } else {\n        throw new Error('Transaction fee payer required');\n      }\n      for (var i = 0; i < instructions.length; i++) {\n        if (instructions[i].programId === undefined) {\n          throw new Error(\"Transaction instruction index \".concat(i, \" has undefined program id\"));\n        }\n      }\n      var programIds = [];\n      var accountMetas = [];\n      instructions.forEach(function (instruction) {\n        instruction.keys.forEach(function (accountMeta) {\n          accountMetas.push(_objectSpread({}, accountMeta));\n        });\n        var programId = instruction.programId.toString();\n        if (!programIds.includes(programId)) {\n          programIds.push(programId);\n        }\n      }); // Append programID account metas\n\n      programIds.forEach(function (programId) {\n        accountMetas.push({\n          pubkey: new PublicKey(programId),\n          isSigner: false,\n          isWritable: false\n        });\n      }); // Cull duplicate account metas\n\n      var uniqueMetas = [];\n      accountMetas.forEach(function (accountMeta) {\n        var pubkeyString = accountMeta.pubkey.toString();\n        var uniqueIndex = uniqueMetas.findIndex(function (x) {\n          return x.pubkey.toString() === pubkeyString;\n        });\n        if (uniqueIndex > -1) {\n          uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n          uniqueMetas[uniqueIndex].isSigner = uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n        } else {\n          uniqueMetas.push(accountMeta);\n        }\n      }); // Sort. Prioritizing first by signer, then by writable\n\n      uniqueMetas.sort(function (x, y) {\n        if (x.isSigner !== y.isSigner) {\n          // Signers always come before non-signers\n          return x.isSigner ? -1 : 1;\n        }\n        if (x.isWritable !== y.isWritable) {\n          // Writable accounts always come before read-only accounts\n          return x.isWritable ? -1 : 1;\n        } // Otherwise, sort by pubkey, stringwise.\n\n        return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n      }); // Move fee payer to the front\n\n      var feePayerIndex = uniqueMetas.findIndex(function (x) {\n        return x.pubkey.equals(feePayer);\n      });\n      if (feePayerIndex > -1) {\n        var _uniqueMetas$splice = uniqueMetas.splice(feePayerIndex, 1),\n          _uniqueMetas$splice2 = _slicedToArray(_uniqueMetas$splice, 1),\n          payerMeta = _uniqueMetas$splice2[0];\n        payerMeta.isSigner = true;\n        payerMeta.isWritable = true;\n        uniqueMetas.unshift(payerMeta);\n      } else {\n        uniqueMetas.unshift({\n          pubkey: feePayer,\n          isSigner: true,\n          isWritable: true\n        });\n      } // Disallow unknown signers\n      var _iterator12 = _createForOfIteratorHelper(this.signatures),\n        _step12;\n      try {\n        var _loop3 = function _loop3() {\n          var signature = _step12.value;\n          var uniqueIndex = uniqueMetas.findIndex(function (x) {\n            return x.pubkey.equals(signature.publicKey);\n          });\n          if (uniqueIndex > -1) {\n            if (!uniqueMetas[uniqueIndex].isSigner) {\n              uniqueMetas[uniqueIndex].isSigner = true;\n              console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n            }\n          } else {\n            throw new Error(\"unknown signer: \".concat(signature.publicKey.toString()));\n          }\n        };\n        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n          _loop3();\n        }\n      } catch (err) {\n        _iterator12.e(err);\n      } finally {\n        _iterator12.f();\n      }\n      var numRequiredSignatures = 0;\n      var numReadonlySignedAccounts = 0;\n      var numReadonlyUnsignedAccounts = 0; // Split out signing from non-signing keys and count header values\n\n      var signedKeys = [];\n      var unsignedKeys = [];\n      uniqueMetas.forEach(function (_ref19) {\n        var pubkey = _ref19.pubkey,\n          isSigner = _ref19.isSigner,\n          isWritable = _ref19.isWritable;\n        if (isSigner) {\n          signedKeys.push(pubkey.toString());\n          numRequiredSignatures += 1;\n          if (!isWritable) {\n            numReadonlySignedAccounts += 1;\n          }\n        } else {\n          unsignedKeys.push(pubkey.toString());\n          if (!isWritable) {\n            numReadonlyUnsignedAccounts += 1;\n          }\n        }\n      });\n      var accountKeys = signedKeys.concat(unsignedKeys);\n      var compiledInstructions = instructions.map(function (instruction) {\n        var data = instruction.data,\n          programId = instruction.programId;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(function (meta) {\n            return accountKeys.indexOf(meta.pubkey.toString());\n          }),\n          data: bs58.encode(data)\n        };\n      });\n      compiledInstructions.forEach(function (instruction) {\n        assert(instruction.programIdIndex >= 0);\n        instruction.accounts.forEach(function (keyIndex) {\n          return assert(keyIndex >= 0);\n        });\n      });\n      return new Message({\n        header: {\n          numRequiredSignatures: numRequiredSignatures,\n          numReadonlySignedAccounts: numReadonlySignedAccounts,\n          numReadonlyUnsignedAccounts: numReadonlyUnsignedAccounts\n        },\n        accountKeys: accountKeys,\n        recentBlockhash: recentBlockhash,\n        instructions: compiledInstructions\n      });\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_compile\",\n    value: function _compile() {\n      var message = this.compileMessage();\n      var signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n      if (this.signatures.length === signedKeys.length) {\n        var valid = this.signatures.every(function (pair, index) {\n          return signedKeys[index].equals(pair.publicKey);\n        });\n        if (valid) return message;\n      }\n      this.signatures = signedKeys.map(function (publicKey) {\n        return {\n          signature: null,\n          publicKey: publicKey\n        };\n      });\n      return message;\n    }\n    /**\n     * Get a buffer of the Transaction data that need to be covered by signatures\n     */\n  }, {\n    key: \"serializeMessage\",\n    value: function serializeMessage() {\n      return this._compile().serialize();\n    }\n    /**\n     * Get the estimated fee associated with a transaction\n     */\n  }, {\n    key: \"getEstimatedFee\",\n    value: function () {\n      var _getEstimatedFee = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(connection) {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return connection.getFeeForMessage(this.compileMessage());\n            case 2:\n              return _context4.abrupt(\"return\", _context4.sent.value);\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function getEstimatedFee(_x8) {\n        return _getEstimatedFee.apply(this, arguments);\n      }\n      return getEstimatedFee;\n    }()\n    /**\n     * Specify the public keys which will be used to sign the Transaction.\n     * The first signer will be used as the transaction fee payer account.\n     *\n     * Signatures can be added with either `partialSign` or `addSignature`\n     *\n     * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n     * specified and it can be set in the Transaction constructor or with the\n     * `feePayer` property.\n     */\n  }, {\n    key: \"setSigners\",\n    value: function setSigners() {\n      for (var _len2 = arguments.length, signers = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        signers[_key2] = arguments[_key2];\n      }\n      if (signers.length === 0) {\n        throw new Error('No signers');\n      }\n      var seen = new Set();\n      this.signatures = signers.filter(function (publicKey) {\n        var key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      }).map(function (publicKey) {\n        return {\n          signature: null,\n          publicKey: publicKey\n        };\n      });\n    }\n    /**\n     * Sign the Transaction with the specified signers. Multiple signatures may\n     * be applied to a Transaction. The first signature is considered \"primary\"\n     * and is used identify and confirm transactions.\n     *\n     * If the Transaction `feePayer` is not set, the first signer will be used\n     * as the transaction fee payer account.\n     *\n     * Transaction fields should not be modified after the first call to `sign`,\n     * as doing so may invalidate the signature and cause the Transaction to be\n     * rejected.\n     *\n     * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n     */\n  }, {\n    key: \"sign\",\n    value: function sign() {\n      for (var _len3 = arguments.length, signers = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        signers[_key3] = arguments[_key3];\n      }\n      if (signers.length === 0) {\n        throw new Error('No signers');\n      } // Dedupe signers\n\n      var seen = new Set();\n      var uniqueSigners = [];\n      for (var _i4 = 0, _signers = signers; _i4 < _signers.length; _i4++) {\n        var signer = _signers[_i4];\n        var key = signer.publicKey.toString();\n        if (seen.has(key)) {\n          continue;\n        } else {\n          seen.add(key);\n          uniqueSigners.push(signer);\n        }\n      }\n      this.signatures = uniqueSigners.map(function (signer) {\n        return {\n          signature: null,\n          publicKey: signer.publicKey\n        };\n      });\n      var message = this._compile();\n      this._partialSign.apply(this, [message].concat(uniqueSigners));\n    }\n    /**\n     * Partially sign a transaction with the specified accounts. All accounts must\n     * correspond to either the fee payer or a signer account in the transaction\n     * instructions.\n     *\n     * All the caveats from the `sign` method apply to `partialSign`\n     */\n  }, {\n    key: \"partialSign\",\n    value: function partialSign() {\n      for (var _len4 = arguments.length, signers = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        signers[_key4] = arguments[_key4];\n      }\n      if (signers.length === 0) {\n        throw new Error('No signers');\n      } // Dedupe signers\n\n      var seen = new Set();\n      var uniqueSigners = [];\n      for (var _i5 = 0, _signers2 = signers; _i5 < _signers2.length; _i5++) {\n        var signer = _signers2[_i5];\n        var key = signer.publicKey.toString();\n        if (seen.has(key)) {\n          continue;\n        } else {\n          seen.add(key);\n          uniqueSigners.push(signer);\n        }\n      }\n      var message = this._compile();\n      this._partialSign.apply(this, [message].concat(uniqueSigners));\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_partialSign\",\n    value: function _partialSign(message) {\n      var _this10 = this;\n      var signData = message.serialize();\n      for (var _len5 = arguments.length, signers = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n        signers[_key5 - 1] = arguments[_key5];\n      }\n      signers.forEach(function (signer) {\n        var signature = _sign(signData, signer.secretKey);\n        _this10._addSignature(signer.publicKey, toBuffer(signature));\n      });\n    }\n    /**\n     * Add an externally created signature to a transaction. The public key\n     * must correspond to either the fee payer or a signer account in the transaction\n     * instructions.\n     */\n  }, {\n    key: \"addSignature\",\n    value: function addSignature(pubkey, signature) {\n      this._compile(); // Ensure signatures array is populated\n\n      this._addSignature(pubkey, signature);\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_addSignature\",\n    value: function _addSignature(pubkey, signature) {\n      assert(signature.length === 64);\n      var index = this.signatures.findIndex(function (sigpair) {\n        return pubkey.equals(sigpair.publicKey);\n      });\n      if (index < 0) {\n        throw new Error(\"unknown signer: \".concat(pubkey.toString()));\n      }\n      this.signatures[index].signature = Buffer.from(signature);\n    }\n    /**\n     * Verify signatures of a Transaction\n     * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n     * If no boolean is provided, we expect a fully signed Transaction by default.\n     */\n  }, {\n    key: \"verifySignatures\",\n    value: function verifySignatures(requireAllSignatures) {\n      return this._verifySignatures(this.serializeMessage(), requireAllSignatures === undefined ? true : requireAllSignatures);\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_verifySignatures\",\n    value: function _verifySignatures(signData, requireAllSignatures) {\n      var _iterator13 = _createForOfIteratorHelper(this.signatures),\n        _step13;\n      try {\n        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n          var _step13$value = _step13.value,\n            _signature = _step13$value.signature,\n            _publicKey = _step13$value.publicKey;\n          if (_signature === null) {\n            if (requireAllSignatures) {\n              return false;\n            }\n          } else {\n            if (!verify(_signature, signData, _publicKey.toBytes())) {\n              return false;\n            }\n          }\n        }\n      } catch (err) {\n        _iterator13.e(err);\n      } finally {\n        _iterator13.f();\n      }\n      return true;\n    }\n    /**\n     * Serialize the Transaction in the wire format.\n     */\n  }, {\n    key: \"serialize\",\n    value: function serialize(config) {\n      var _Object$assign = Object.assign({\n          requireAllSignatures: true,\n          verifySignatures: true\n        }, config),\n        requireAllSignatures = _Object$assign.requireAllSignatures,\n        verifySignatures = _Object$assign.verifySignatures;\n      var signData = this.serializeMessage();\n      if (verifySignatures && !this._verifySignatures(signData, requireAllSignatures)) {\n        throw new Error('Signature verification failed');\n      }\n      return this._serialize(signData);\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_serialize\",\n    value: function _serialize(signData) {\n      var signatures = this.signatures;\n      var signatureCount = [];\n      encodeLength(signatureCount, signatures.length);\n      var transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n      var wireTransaction = Buffer.alloc(transactionLength);\n      assert(signatures.length < 256);\n      Buffer.from(signatureCount).copy(wireTransaction, 0);\n      signatures.forEach(function (_ref20, index) {\n        var signature = _ref20.signature;\n        if (signature !== null) {\n          assert(signature.length === 64, \"signature has invalid length\");\n          Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n        }\n      });\n      signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n      assert(wireTransaction.length <= PACKET_DATA_SIZE, \"Transaction too large: \".concat(wireTransaction.length, \" > \").concat(PACKET_DATA_SIZE));\n      return wireTransaction;\n    }\n    /**\n     * Deprecated method\n     * @internal\n     */\n  }, {\n    key: \"keys\",\n    get: function get() {\n      assert(this.instructions.length === 1);\n      return this.instructions[0].keys.map(function (keyObj) {\n        return keyObj.pubkey;\n      });\n    }\n    /**\n     * Deprecated method\n     * @internal\n     */\n  }, {\n    key: \"programId\",\n    get: function get() {\n      assert(this.instructions.length === 1);\n      return this.instructions[0].programId;\n    }\n    /**\n     * Deprecated method\n     * @internal\n     */\n  }, {\n    key: \"data\",\n    get: function get() {\n      assert(this.instructions.length === 1);\n      return this.instructions[0].data;\n    }\n    /**\n     * Parse a wire transaction into a Transaction object.\n     */\n  }], [{\n    key: \"from\",\n    value: function from(buffer) {\n      // Slice up wire data\n      var byteArray = _toConsumableArray(buffer);\n      var signatureCount = decodeLength(byteArray);\n      var signatures = [];\n      for (var i = 0; i < signatureCount; i++) {\n        var _signature2 = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n        byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n        signatures.push(bs58.encode(Buffer.from(_signature2)));\n      }\n      return Transaction.populate(Message.from(byteArray), signatures);\n    }\n    /**\n     * Populate Transaction object from message and signatures\n     */\n  }, {\n    key: \"populate\",\n    value: function populate(message) {\n      var signatures = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var transaction = new Transaction();\n      transaction.recentBlockhash = message.recentBlockhash;\n      if (message.header.numRequiredSignatures > 0) {\n        transaction.feePayer = message.accountKeys[0];\n      }\n      signatures.forEach(function (signature, index) {\n        var sigPubkeyPair = {\n          signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n          publicKey: message.accountKeys[index]\n        };\n        transaction.signatures.push(sigPubkeyPair);\n      });\n      message.instructions.forEach(function (instruction) {\n        var keys = instruction.accounts.map(function (account) {\n          var pubkey = message.accountKeys[account];\n          return {\n            pubkey: pubkey,\n            isSigner: transaction.signatures.some(function (keyObj) {\n              return keyObj.publicKey.toString() === pubkey.toString();\n            }) || message.isAccountSigner(account),\n            isWritable: message.isAccountWritable(account)\n          };\n        });\n        transaction.instructions.push(new TransactionInstruction({\n          keys: keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data)\n        }));\n      });\n      transaction._message = message;\n      transaction._json = transaction.toJSON();\n      return transaction;\n    }\n  }]);\n  return Transaction;\n}();\nvar TransactionMessage = /*#__PURE__*/function () {\n  function TransactionMessage(args) {\n    _classCallCheck(this, TransactionMessage);\n    this.payerKey = void 0;\n    this.instructions = void 0;\n    this.recentBlockhash = void 0;\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n  _createClass(TransactionMessage, [{\n    key: \"compileToLegacyMessage\",\n    value: function compileToLegacyMessage() {\n      return Message.compile({\n        payerKey: this.payerKey,\n        recentBlockhash: this.recentBlockhash,\n        instructions: this.instructions\n      });\n    }\n  }, {\n    key: \"compileToV0Message\",\n    value: function compileToV0Message(addressLookupTableAccounts) {\n      return MessageV0.compile({\n        payerKey: this.payerKey,\n        recentBlockhash: this.recentBlockhash,\n        instructions: this.instructions,\n        addressLookupTableAccounts: addressLookupTableAccounts\n      });\n    }\n  }], [{\n    key: \"decompile\",\n    value: function decompile(message, args) {\n      var header = message.header,\n        compiledInstructions = message.compiledInstructions,\n        recentBlockhash = message.recentBlockhash;\n      var numRequiredSignatures = header.numRequiredSignatures,\n        numReadonlySignedAccounts = header.numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts = header.numReadonlyUnsignedAccounts;\n      var numWritableSignedAccounts = numRequiredSignatures - numReadonlySignedAccounts;\n      assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n      var numWritableUnsignedAccounts = message.staticAccountKeys.length - numRequiredSignatures - numReadonlyUnsignedAccounts;\n      assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n      var accountKeys = message.getAccountKeys(args);\n      var payerKey = accountKeys.get(0);\n      if (payerKey === undefined) {\n        throw new Error('Failed to decompile message because no account keys were found');\n      }\n      var instructions = [];\n      var _iterator14 = _createForOfIteratorHelper(compiledInstructions),\n        _step14;\n      try {\n        for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n          var compiledIx = _step14.value;\n          var keys = [];\n          var _iterator15 = _createForOfIteratorHelper(compiledIx.accountKeyIndexes),\n            _step15;\n          try {\n            for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n              var keyIndex = _step15.value;\n              var pubkey = accountKeys.get(keyIndex);\n              if (pubkey === undefined) {\n                throw new Error(\"Failed to find key for account key index \".concat(keyIndex));\n              }\n              var isSigner = keyIndex < numRequiredSignatures;\n              var isWritable = void 0;\n              if (isSigner) {\n                isWritable = keyIndex < numWritableSignedAccounts;\n              } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n                isWritable = keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n              } else {\n                isWritable = keyIndex - accountKeys.staticAccountKeys.length <\n                // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n                accountKeys.accountKeysFromLookups.writable.length;\n              }\n              keys.push({\n                pubkey: pubkey,\n                isSigner: keyIndex < header.numRequiredSignatures,\n                isWritable: isWritable\n              });\n            }\n          } catch (err) {\n            _iterator15.e(err);\n          } finally {\n            _iterator15.f();\n          }\n          var programId = accountKeys.get(compiledIx.programIdIndex);\n          if (programId === undefined) {\n            throw new Error(\"Failed to find program id for program id index \".concat(compiledIx.programIdIndex));\n          }\n          instructions.push(new TransactionInstruction({\n            programId: programId,\n            data: toBuffer(compiledIx.data),\n            keys: keys\n          }));\n        }\n      } catch (err) {\n        _iterator14.e(err);\n      } finally {\n        _iterator14.f();\n      }\n      return new TransactionMessage({\n        payerKey: payerKey,\n        instructions: instructions,\n        recentBlockhash: recentBlockhash\n      });\n    }\n  }]);\n  return TransactionMessage;\n}();\n/**\n * Versioned transaction class\n */\nvar VersionedTransaction = /*#__PURE__*/function () {\n  function VersionedTransaction(message, signatures) {\n    _classCallCheck(this, VersionedTransaction);\n    this.signatures = void 0;\n    this.message = void 0;\n    if (signatures !== undefined) {\n      assert(signatures.length === message.header.numRequiredSignatures, 'Expected signatures length to be equal to the number of required signatures');\n      this.signatures = signatures;\n    } else {\n      var defaultSignatures = [];\n      for (var i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n  _createClass(VersionedTransaction, [{\n    key: \"version\",\n    get: function get() {\n      return this.message.version;\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var serializedMessage = this.message.serialize();\n      var encodedSignaturesLength = Array();\n      encodeLength(encodedSignaturesLength, this.signatures.length);\n      var transactionLayout = BufferLayout.struct([BufferLayout.blob(encodedSignaturesLength.length, 'encodedSignaturesLength'), BufferLayout.seq(signature(), this.signatures.length, 'signatures'), BufferLayout.blob(serializedMessage.length, 'serializedMessage')]);\n      var serializedTransaction = new Uint8Array(2048);\n      var serializedTransactionLength = transactionLayout.encode({\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage: serializedMessage\n      }, serializedTransaction);\n      return serializedTransaction.slice(0, serializedTransactionLength);\n    }\n  }, {\n    key: \"sign\",\n    value: function sign(signers) {\n      var _this11 = this;\n      var messageData = this.message.serialize();\n      var signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n      var _iterator16 = _createForOfIteratorHelper(signers),\n        _step16;\n      try {\n        var _loop4 = function _loop4() {\n          var signer = _step16.value;\n          var signerIndex = signerPubkeys.findIndex(function (pubkey) {\n            return pubkey.equals(signer.publicKey);\n          });\n          assert(signerIndex >= 0, \"Cannot sign with non signer key \".concat(signer.publicKey.toBase58()));\n          _this11.signatures[signerIndex] = _sign(messageData, signer.secretKey);\n        };\n        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n          _loop4();\n        }\n      } catch (err) {\n        _iterator16.e(err);\n      } finally {\n        _iterator16.f();\n      }\n    }\n  }, {\n    key: \"addSignature\",\n    value: function addSignature(publicKey, signature) {\n      assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n      var signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n      var signerIndex = signerPubkeys.findIndex(function (pubkey) {\n        return pubkey.equals(publicKey);\n      });\n      assert(signerIndex >= 0, \"Can not add signature; `\".concat(publicKey.toBase58(), \"` is not required to sign this transaction\"));\n      this.signatures[signerIndex] = signature;\n    }\n  }], [{\n    key: \"deserialize\",\n    value: function deserialize(serializedTransaction) {\n      var byteArray = _toConsumableArray(serializedTransaction);\n      var signatures = [];\n      var signaturesLength = decodeLength(byteArray);\n      for (var i = 0; i < signaturesLength; i++) {\n        signatures.push(new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)));\n      }\n      var message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n      return new VersionedTransaction(message, signatures);\n    }\n  }]);\n  return VersionedTransaction;\n}();\nvar SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nvar SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nvar SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nvar SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nvar SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nvar SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nvar SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nvar SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nvar SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nfunction sendAndConfirmTransaction(_x9, _x10, _x11, _x12) {\n  return _sendAndConfirmTransaction.apply(this, arguments);\n} // zzz\nfunction _sendAndConfirmTransaction() {\n  _sendAndConfirmTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee105(connection, transaction, signers, options) {\n    var sendOptions, signature, status, nonceInstruction, nonceAccountPubkey;\n    return _regeneratorRuntime().wrap(function _callee105$(_context105) {\n      while (1) switch (_context105.prev = _context105.next) {\n        case 0:\n          sendOptions = options && {\n            skipPreflight: options.skipPreflight,\n            preflightCommitment: options.preflightCommitment || options.commitment,\n            maxRetries: options.maxRetries,\n            minContextSlot: options.minContextSlot\n          };\n          _context105.next = 3;\n          return connection.sendTransaction(transaction, signers, sendOptions);\n        case 3:\n          signature = _context105.sent;\n          if (!(transaction.recentBlockhash != null && transaction.lastValidBlockHeight != null)) {\n            _context105.next = 10;\n            break;\n          }\n          _context105.next = 7;\n          return connection.confirmTransaction({\n            abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal,\n            signature: signature,\n            blockhash: transaction.recentBlockhash,\n            lastValidBlockHeight: transaction.lastValidBlockHeight\n          }, options && options.commitment);\n        case 7:\n          status = _context105.sent.value;\n          _context105.next = 22;\n          break;\n        case 10:\n          if (!(transaction.minNonceContextSlot != null && transaction.nonceInfo != null)) {\n            _context105.next = 18;\n            break;\n          }\n          nonceInstruction = transaction.nonceInfo.nonceInstruction;\n          nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n          _context105.next = 15;\n          return connection.confirmTransaction({\n            abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal,\n            minContextSlot: transaction.minNonceContextSlot,\n            nonceAccountPubkey: nonceAccountPubkey,\n            nonceValue: transaction.nonceInfo.nonce,\n            signature: signature\n          }, options && options.commitment);\n        case 15:\n          status = _context105.sent.value;\n          _context105.next = 22;\n          break;\n        case 18:\n          if ((options === null || options === void 0 ? void 0 : options.abortSignal) != null) {\n            console.warn('sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' + 'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' + 'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.');\n          }\n          _context105.next = 21;\n          return connection.confirmTransaction(signature, options && options.commitment);\n        case 21:\n          status = _context105.sent.value;\n        case 22:\n          if (!status.err) {\n            _context105.next = 24;\n            break;\n          }\n          throw new Error(\"Transaction \".concat(signature, \" failed (\").concat(JSON.stringify(status), \")\"));\n        case 24:\n          return _context105.abrupt(\"return\", signature);\n        case 25:\n        case \"end\":\n          return _context105.stop();\n      }\n    }, _callee105);\n  }));\n  return _sendAndConfirmTransaction.apply(this, arguments);\n}\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n}\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nfunction encodeData(type, fields) {\n  var allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  var data = Buffer.alloc(allocLength);\n  var layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\n\nfunction decodeData$1(type, buffer) {\n  var data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (data.instruction !== type.index) {\n    throw new Error(\"invalid instruction; instruction index mismatch \".concat(data.instruction, \" != \").concat(type.index));\n  }\n  return data;\n}\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\n\nvar FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\n\nvar NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nvar NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\n\n/**\n * NonceAccount class\n */\nvar NonceAccount = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function NonceAccount(args) {\n    _classCallCheck(this, NonceAccount);\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  _createClass(NonceAccount, null, [{\n    key: \"fromAccountData\",\n    value: function fromAccountData(buffer) {\n      var nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n      return new NonceAccount({\n        authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n        nonce: new PublicKey(nonceAccount.nonce).toString(),\n        feeCalculator: nonceAccount.feeCalculator\n      });\n    }\n  }]);\n  return NonceAccount;\n}();\nvar encodeDecode = function encodeDecode(layout) {\n  var decode = layout.decode.bind(layout);\n  var encode = layout.encode.bind(layout);\n  return {\n    decode: decode,\n    encode: encode\n  };\n};\nvar bigInt = function bigInt(length) {\n  return function (property) {\n    var layout = blob(length, property);\n    var _encodeDecode = encodeDecode(layout),\n      encode = _encodeDecode.encode,\n      decode = _encodeDecode.decode;\n    var bigIntLayout = layout;\n    bigIntLayout.decode = function (buffer, offset) {\n      var src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n    bigIntLayout.encode = function (bigInt, buffer, offset) {\n      var src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n    return bigIntLayout;\n  };\n};\nvar u64 = bigInt(8);\n\n/**\n * Create account system transaction params\n */\n\n/**\n * System Instruction class\n */\nvar SystemInstruction = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function SystemInstruction() {\n    _classCallCheck(this, SystemInstruction);\n  }\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  _createClass(SystemInstruction, null, [{\n    key: \"decodeInstructionType\",\n    value: function decodeInstructionType(instruction) {\n      this.checkProgramId(instruction.programId);\n      var instructionTypeLayout = BufferLayout.u32('instruction');\n      var typeIndex = instructionTypeLayout.decode(instruction.data);\n      var type;\n      for (var _i6 = 0, _Object$entries = Object.entries(SYSTEM_INSTRUCTION_LAYOUTS); _i6 < _Object$entries.length; _i6++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i6], 2),\n          ixType = _Object$entries$_i[0],\n          layout = _Object$entries$_i[1];\n        if (layout.index == typeIndex) {\n          type = ixType;\n          break;\n        }\n      }\n      if (!type) {\n        throw new Error('Instruction type incorrect; not a SystemInstruction');\n      }\n      return type;\n    }\n    /**\n     * Decode a create account system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeCreateAccount\",\n    value: function decodeCreateAccount(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n      var _decodeData$ = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data),\n        lamports = _decodeData$.lamports,\n        space = _decodeData$.space,\n        programId = _decodeData$.programId;\n      return {\n        fromPubkey: instruction.keys[0].pubkey,\n        newAccountPubkey: instruction.keys[1].pubkey,\n        lamports: lamports,\n        space: space,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode a transfer system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeTransfer\",\n    value: function decodeTransfer(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n      var _decodeData$2 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data),\n        lamports = _decodeData$2.lamports;\n      return {\n        fromPubkey: instruction.keys[0].pubkey,\n        toPubkey: instruction.keys[1].pubkey,\n        lamports: lamports\n      };\n    }\n    /**\n     * Decode a transfer with seed system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeTransferWithSeed\",\n    value: function decodeTransferWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      var _decodeData$3 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data),\n        lamports = _decodeData$3.lamports,\n        seed = _decodeData$3.seed,\n        programId = _decodeData$3.programId;\n      return {\n        fromPubkey: instruction.keys[0].pubkey,\n        basePubkey: instruction.keys[1].pubkey,\n        toPubkey: instruction.keys[2].pubkey,\n        lamports: lamports,\n        seed: seed,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode an allocate system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeAllocate\",\n    value: function decodeAllocate(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 1);\n      var _decodeData$4 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data),\n        space = _decodeData$4.space;\n      return {\n        accountPubkey: instruction.keys[0].pubkey,\n        space: space\n      };\n    }\n    /**\n     * Decode an allocate with seed system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeAllocateWithSeed\",\n    value: function decodeAllocateWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 1);\n      var _decodeData$5 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data),\n        base = _decodeData$5.base,\n        seed = _decodeData$5.seed,\n        space = _decodeData$5.space,\n        programId = _decodeData$5.programId;\n      return {\n        accountPubkey: instruction.keys[0].pubkey,\n        basePubkey: new PublicKey(base),\n        seed: seed,\n        space: space,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode an assign system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeAssign\",\n    value: function decodeAssign(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 1);\n      var _decodeData$6 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data),\n        programId = _decodeData$6.programId;\n      return {\n        accountPubkey: instruction.keys[0].pubkey,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode an assign with seed system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeAssignWithSeed\",\n    value: function decodeAssignWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 1);\n      var _decodeData$7 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data),\n        base = _decodeData$7.base,\n        seed = _decodeData$7.seed,\n        programId = _decodeData$7.programId;\n      return {\n        accountPubkey: instruction.keys[0].pubkey,\n        basePubkey: new PublicKey(base),\n        seed: seed,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode a create account with seed system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeCreateWithSeed\",\n    value: function decodeCreateWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n      var _decodeData$8 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data),\n        base = _decodeData$8.base,\n        seed = _decodeData$8.seed,\n        lamports = _decodeData$8.lamports,\n        space = _decodeData$8.space,\n        programId = _decodeData$8.programId;\n      return {\n        fromPubkey: instruction.keys[0].pubkey,\n        newAccountPubkey: instruction.keys[1].pubkey,\n        basePubkey: new PublicKey(base),\n        seed: seed,\n        lamports: lamports,\n        space: space,\n        programId: new PublicKey(programId)\n      };\n    }\n    /**\n     * Decode a nonce initialize system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeNonceInitialize\",\n    value: function decodeNonceInitialize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      var _decodeData$9 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data),\n        authorized = _decodeData$9.authorized;\n      return {\n        noncePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: new PublicKey(authorized)\n      };\n    }\n    /**\n     * Decode a nonce advance system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeNonceAdvance\",\n    value: function decodeNonceAdvance(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n      return {\n        noncePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey\n      };\n    }\n    /**\n     * Decode a nonce withdraw system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeNonceWithdraw\",\n    value: function decodeNonceWithdraw(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 5);\n      var _decodeData$10 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data),\n        lamports = _decodeData$10.lamports;\n      return {\n        noncePubkey: instruction.keys[0].pubkey,\n        toPubkey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[4].pubkey,\n        lamports: lamports\n      };\n    }\n    /**\n     * Decode a nonce authorize system instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeNonceAuthorize\",\n    value: function decodeNonceAuthorize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n      var _decodeData$11 = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data),\n        authorized = _decodeData$11.authorized;\n      return {\n        noncePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[1].pubkey,\n        newAuthorizedPubkey: new PublicKey(authorized)\n      };\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"checkProgramId\",\n    value: function checkProgramId(programId) {\n      if (!programId.equals(SystemProgram.programId)) {\n        throw new Error('invalid instruction; programId is not SystemProgram');\n      }\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"checkKeyLength\",\n    value: function checkKeyLength(keys, expectedLength) {\n      if (keys.length < expectedLength) {\n        throw new Error(\"invalid instruction; found \".concat(keys.length, \" keys, expected at least \").concat(expectedLength));\n      }\n    }\n  }]);\n  return SystemInstruction;\n}();\n/**\n * An enumeration of valid SystemInstructionType's\n */\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nvar SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports'), rustString('seed'), publicKey('programId')])\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\n/**\n * Factory class for transactions to interact with the System program\n */\nvar SystemProgram = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function SystemProgram() {\n    _classCallCheck(this, SystemProgram);\n  }\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  _createClass(SystemProgram, null, [{\n    key: \"createAccount\",\n    value: function createAccount(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n      var data = encodeData(type, {\n        lamports: params.lamports,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      return new TransactionInstruction({\n        keys: [{\n          pubkey: params.fromPubkey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: params.newAccountPubkey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction instruction that transfers lamports from one account to another\n     */\n  }, {\n    key: \"transfer\",\n    value: function transfer(params) {\n      var data;\n      var keys;\n      if ('basePubkey' in params) {\n        var _type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n        data = encodeData(_type, {\n          lamports: BigInt(params.lamports),\n          seed: params.seed,\n          programId: toBuffer(params.programId.toBuffer())\n        });\n        keys = [{\n          pubkey: params.fromPubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.basePubkey,\n          isSigner: true,\n          isWritable: false\n        }, {\n          pubkey: params.toPubkey,\n          isSigner: false,\n          isWritable: true\n        }];\n      } else {\n        var _type2 = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n        data = encodeData(_type2, {\n          lamports: BigInt(params.lamports)\n        });\n        keys = [{\n          pubkey: params.fromPubkey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: params.toPubkey,\n          isSigner: false,\n          isWritable: true\n        }];\n      }\n      return new TransactionInstruction({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction instruction that assigns an account to a program\n     */\n  }, {\n    key: \"assign\",\n    value: function assign(params) {\n      var data;\n      var keys;\n      if ('basePubkey' in params) {\n        var _type3 = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n        data = encodeData(_type3, {\n          base: toBuffer(params.basePubkey.toBuffer()),\n          seed: params.seed,\n          programId: toBuffer(params.programId.toBuffer())\n        });\n        keys = [{\n          pubkey: params.accountPubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.basePubkey,\n          isSigner: true,\n          isWritable: false\n        }];\n      } else {\n        var _type4 = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n        data = encodeData(_type4, {\n          programId: toBuffer(params.programId.toBuffer())\n        });\n        keys = [{\n          pubkey: params.accountPubkey,\n          isSigner: true,\n          isWritable: true\n        }];\n      }\n      return new TransactionInstruction({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction instruction that creates a new account at\n     *   an address generated with `from`, a seed, and programId\n     */\n  }, {\n    key: \"createAccountWithSeed\",\n    value: function createAccountWithSeed(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n      var data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        lamports: params.lamports,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      var keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n      if (params.basePubkey != params.fromPubkey) {\n        keys.push({\n          pubkey: params.basePubkey,\n          isSigner: true,\n          isWritable: false\n        });\n      }\n      return new TransactionInstruction({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction that creates a new Nonce account\n     */\n  }, {\n    key: \"createNonceAccount\",\n    value: function createNonceAccount(params) {\n      var transaction = new Transaction();\n      if ('basePubkey' in params && 'seed' in params) {\n        transaction.add(SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId\n        }));\n      } else {\n        transaction.add(SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId\n        }));\n      }\n      var initParams = {\n        noncePubkey: params.noncePubkey,\n        authorizedPubkey: params.authorizedPubkey\n      };\n      transaction.add(this.nonceInitialize(initParams));\n      return transaction;\n    }\n    /**\n     * Generate an instruction to initialize a Nonce account\n     */\n  }, {\n    key: \"nonceInitialize\",\n    value: function nonceInitialize(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n      var data = encodeData(type, {\n        authorized: toBuffer(params.authorizedPubkey.toBuffer())\n      });\n      var instructionData = {\n        keys: [{\n          pubkey: params.noncePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      };\n      return new TransactionInstruction(instructionData);\n    }\n    /**\n     * Generate an instruction to advance the nonce in a Nonce account\n     */\n  }, {\n    key: \"nonceAdvance\",\n    value: function nonceAdvance(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n      var data = encodeData(type);\n      var instructionData = {\n        keys: [{\n          pubkey: params.noncePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: params.authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      };\n      return new TransactionInstruction(instructionData);\n    }\n    /**\n     * Generate a transaction instruction that withdraws lamports from a Nonce account\n     */\n  }, {\n    key: \"nonceWithdraw\",\n    value: function nonceWithdraw(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n      var data = encodeData(type, {\n        lamports: params.lamports\n      });\n      return new TransactionInstruction({\n        keys: [{\n          pubkey: params.noncePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.toPubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: params.authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction instruction that authorizes a new PublicKey as the authority\n     * on a Nonce account.\n     */\n  }, {\n    key: \"nonceAuthorize\",\n    value: function nonceAuthorize(params) {\n      var type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n      var data = encodeData(type, {\n        authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n      });\n      return new TransactionInstruction({\n        keys: [{\n          pubkey: params.noncePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction instruction that allocates space in an account without funding\n     */\n  }, {\n    key: \"allocate\",\n    value: function allocate(params) {\n      var data;\n      var keys;\n      if ('basePubkey' in params) {\n        var _type5 = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n        data = encodeData(_type5, {\n          base: toBuffer(params.basePubkey.toBuffer()),\n          seed: params.seed,\n          space: params.space,\n          programId: toBuffer(params.programId.toBuffer())\n        });\n        keys = [{\n          pubkey: params.accountPubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: params.basePubkey,\n          isSigner: true,\n          isWritable: false\n        }];\n      } else {\n        var _type6 = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n        data = encodeData(_type6, {\n          space: params.space\n        });\n        keys = [{\n          pubkey: params.accountPubkey,\n          isSigner: true,\n          isWritable: true\n        }];\n      }\n      return new TransactionInstruction({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n  }]);\n  return SystemProgram;\n}();\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111');\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nvar CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n/**\n * Program loader interface\n */\nvar Loader = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function Loader() {\n    _classCallCheck(this, Loader);\n  }\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  _createClass(Loader, null, [{\n    key: \"getMinNumSignatures\",\n    value: function getMinNumSignatures(dataLength) {\n      return 2 * (\n      // Every transaction requires two signatures (payer + program)\n      Math.ceil(dataLength / Loader.chunkSize) + 1 +\n      // Add one for Create transaction\n      1) // Add one for Finalize transaction\n      ;\n    }\n    /**\n     * Loads a generic program\n     *\n     * @param connection The connection to use\n     * @param payer System account that pays to load the program\n     * @param program Account to load the program into\n     * @param programId Public key that identifies the loader\n     * @param data Program octets\n     * @return true if program was loaded successfully, false if program was already loaded\n     */\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(connection, payer, program, programId, data) {\n        var balanceNeeded, programInfo, transaction, dataLayout, chunkSize, offset, array, transactions, bytes, _data, _transaction, REQUESTS_PER_SECOND, _dataLayout, _data2, _transaction2;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return connection.getMinimumBalanceForRentExemption(data.length);\n            case 2:\n              balanceNeeded = _context5.sent;\n              _context5.next = 5;\n              return connection.getAccountInfo(program.publicKey, 'confirmed');\n            case 5:\n              programInfo = _context5.sent;\n              transaction = null;\n              if (!(programInfo !== null)) {\n                _context5.next = 16;\n                break;\n              }\n              if (!programInfo.executable) {\n                _context5.next = 11;\n                break;\n              }\n              console.error('Program load failed, account is already executable');\n              return _context5.abrupt(\"return\", false);\n            case 11:\n              if (programInfo.data.length !== data.length) {\n                transaction = transaction || new Transaction();\n                transaction.add(SystemProgram.allocate({\n                  accountPubkey: program.publicKey,\n                  space: data.length\n                }));\n              }\n              if (!programInfo.owner.equals(programId)) {\n                transaction = transaction || new Transaction();\n                transaction.add(SystemProgram.assign({\n                  accountPubkey: program.publicKey,\n                  programId: programId\n                }));\n              }\n              if (programInfo.lamports < balanceNeeded) {\n                transaction = transaction || new Transaction();\n                transaction.add(SystemProgram.transfer({\n                  fromPubkey: payer.publicKey,\n                  toPubkey: program.publicKey,\n                  lamports: balanceNeeded - programInfo.lamports\n                }));\n              }\n              _context5.next = 17;\n              break;\n            case 16:\n              transaction = new Transaction().add(SystemProgram.createAccount({\n                fromPubkey: payer.publicKey,\n                newAccountPubkey: program.publicKey,\n                lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n                space: data.length,\n                programId: programId\n              }));\n            case 17:\n              if (!(transaction !== null)) {\n                _context5.next = 20;\n                break;\n              }\n              _context5.next = 20;\n              return sendAndConfirmTransaction(connection, transaction, [payer, program], {\n                commitment: 'confirmed'\n              });\n            case 20:\n              dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n              chunkSize = Loader.chunkSize;\n              offset = 0;\n              array = data;\n              transactions = [];\n            case 25:\n              if (!(array.length > 0)) {\n                _context5.next = 39;\n                break;\n              }\n              bytes = array.slice(0, chunkSize);\n              _data = Buffer.alloc(chunkSize + 16);\n              dataLayout.encode({\n                instruction: 0,\n                // Load instruction\n                offset: offset,\n                bytes: bytes,\n                bytesLength: 0,\n                bytesLengthPadding: 0\n              }, _data);\n              _transaction = new Transaction().add({\n                keys: [{\n                  pubkey: program.publicKey,\n                  isSigner: true,\n                  isWritable: true\n                }],\n                programId: programId,\n                data: _data\n              });\n              transactions.push(sendAndConfirmTransaction(connection, _transaction, [payer, program], {\n                commitment: 'confirmed'\n              })); // Delay between sends in an attempt to reduce rate limit errors\n              if (!connection._rpcEndpoint.includes('solana.com')) {\n                _context5.next = 35;\n                break;\n              }\n              REQUESTS_PER_SECOND = 4;\n              _context5.next = 35;\n              return sleep(1000 / REQUESTS_PER_SECOND);\n            case 35:\n              offset += chunkSize;\n              array = array.slice(chunkSize);\n              _context5.next = 25;\n              break;\n            case 39:\n              _context5.next = 41;\n              return Promise.all(transactions);\n            case 41:\n              _dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n              _data2 = Buffer.alloc(_dataLayout.span);\n              _dataLayout.encode({\n                instruction: 1 // Finalize instruction\n              }, _data2);\n              _transaction2 = new Transaction().add({\n                keys: [{\n                  pubkey: program.publicKey,\n                  isSigner: true,\n                  isWritable: true\n                }, {\n                  pubkey: SYSVAR_RENT_PUBKEY,\n                  isSigner: false,\n                  isWritable: false\n                }],\n                programId: programId,\n                data: _data2\n              });\n              _context5.next = 47;\n              return sendAndConfirmTransaction(connection, _transaction2, [payer, program], {\n                commitment: 'confirmed'\n              });\n            case 47:\n              return _context5.abrupt(\"return\", true);\n            case 48:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5);\n      }));\n      function load(_x13, _x14, _x15, _x16, _x17) {\n        return _load.apply(this, arguments);\n      }\n      return load;\n    }()\n  }]);\n  return Loader;\n}();\nLoader.chunkSize = CHUNK_SIZE;\nvar BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n/**\n * Factory class for transactions to interact with a program loader\n */\nvar BpfLoader = /*#__PURE__*/function () {\n  function BpfLoader() {\n    _classCallCheck(this, BpfLoader);\n  }\n  _createClass(BpfLoader, null, [{\n    key: \"getMinNumSignatures\",\n    value:\n    /**\n     * Minimum number of signatures required to load a program not including\n     * retries\n     *\n     * Can be used to calculate transaction fees\n     */\n    function getMinNumSignatures(dataLength) {\n      return Loader.getMinNumSignatures(dataLength);\n    }\n    /**\n     * Load a SBF program\n     *\n     * @param connection The connection to use\n     * @param payer Account that will pay program loading fees\n     * @param program Account to load the program into\n     * @param elf The entire ELF containing the SBF program\n     * @param loaderProgramId The program id of the BPF loader to use\n     * @return true if program was loaded successfully, false if program was already loaded\n     */\n  }, {\n    key: \"load\",\n    value: function load(connection, payer, program, elf, loaderProgramId) {\n      return Loader.load(connection, payer, program, loaderProgramId, elf);\n    }\n  }]);\n  return BpfLoader;\n}();\nvar objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var name in obj) {\n    keys.push(name);\n  }\n  return keys;\n};\nfunction stringify(val, isArrayProp) {\n  var i, max, str, keys, key, propVal, toStr;\n  if (val === true) {\n    return \"true\";\n  }\n  if (val === false) {\n    return \"false\";\n  }\n  switch (typeof val) {\n    case \"object\":\n      if (val === null) {\n        return null;\n      } else if (val.toJSON && typeof val.toJSON === \"function\") {\n        return stringify(val.toJSON(), isArrayProp);\n      } else {\n        toStr = objToString.call(val);\n        if (toStr === \"[object Array]\") {\n          str = '[';\n          max = val.length - 1;\n          for (i = 0; i < max; i++) {\n            str += stringify(val[i], true) + ',';\n          }\n          if (max > -1) {\n            str += stringify(val[i], true);\n          }\n          return str + ']';\n        } else if (toStr === \"[object Object]\") {\n          // only object is left\n          keys = objKeys(val).sort();\n          max = keys.length;\n          str = \"\";\n          i = 0;\n          while (i < max) {\n            key = keys[i];\n            propVal = stringify(val[key], false);\n            if (propVal !== undefined) {\n              if (str) {\n                str += ',';\n              }\n              str += JSON.stringify(key) + ':' + propVal;\n            }\n            i++;\n          }\n          return '{' + str + '}';\n        } else {\n          return JSON.stringify(val);\n        }\n      }\n    case \"function\":\n    case \"undefined\":\n      return isArrayProp ? null : undefined;\n    case \"string\":\n      return JSON.stringify(val);\n    default:\n      return isFinite(val) ? val : null;\n  }\n}\nvar fastStableStringify = function fastStableStringify(val) {\n  var returnVal = stringify(val, false);\n  if (returnVal !== undefined) {\n    return '' + returnVal;\n  }\n};\nvar fastStableStringify$1 = fastStableStringify;\nvar MINIMUM_SLOT_PER_EPOCH = 32; // Returns the number of trailing zeros in the binary representation of self.\n\nfunction trailingZeros(n) {\n  var trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n} // Returns the smallest power of two greater than or equal to n\n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nvar EpochSchedule = /*#__PURE__*/function () {\n  /** The maximum number of slots in each epoch */\n\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n\n  /** Indicates whether epochs start short and grow */\n\n  /** The first epoch with `slotsPerEpoch` slots */\n\n  /** The first slot of `firstNormalEpoch` */\n  function EpochSchedule(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    _classCallCheck(this, EpochSchedule);\n    this.slotsPerEpoch = void 0;\n    this.leaderScheduleSlotOffset = void 0;\n    this.warmup = void 0;\n    this.firstNormalEpoch = void 0;\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n  _createClass(EpochSchedule, [{\n    key: \"getEpoch\",\n    value: function getEpoch(slot) {\n      return this.getEpochAndSlotIndex(slot)[0];\n    }\n  }, {\n    key: \"getEpochAndSlotIndex\",\n    value: function getEpochAndSlotIndex(slot) {\n      if (slot < this.firstNormalSlot) {\n        var epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n        var epochLen = this.getSlotsInEpoch(epoch);\n        var slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n        return [epoch, slotIndex];\n      } else {\n        var normalSlotIndex = slot - this.firstNormalSlot;\n        var normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n        var _epoch = this.firstNormalEpoch + normalEpochIndex;\n        var _slotIndex = normalSlotIndex % this.slotsPerEpoch;\n        return [_epoch, _slotIndex];\n      }\n    }\n  }, {\n    key: \"getFirstSlotInEpoch\",\n    value: function getFirstSlotInEpoch(epoch) {\n      if (epoch <= this.firstNormalEpoch) {\n        return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n      } else {\n        return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n      }\n    }\n  }, {\n    key: \"getLastSlotInEpoch\",\n    value: function getLastSlotInEpoch(epoch) {\n      return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n    }\n  }, {\n    key: \"getSlotsInEpoch\",\n    value: function getSlotsInEpoch(epoch) {\n      if (epoch < this.firstNormalEpoch) {\n        return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n      } else {\n        return this.slotsPerEpoch;\n      }\n    }\n  }]);\n  return EpochSchedule;\n}();\nvar SendTransactionError = /*#__PURE__*/function (_Error4) {\n  _inherits(SendTransactionError, _Error4);\n  var _super6 = _createSuper(SendTransactionError);\n  function SendTransactionError(message, logs) {\n    var _this12;\n    _classCallCheck(this, SendTransactionError);\n    _this12 = _super6.call(this, message);\n    _this12.logs = void 0;\n    _this12.logs = logs;\n    return _this12;\n  }\n  return _createClass(SendTransactionError);\n}( /*#__PURE__*/_wrapNativeSuper(Error)); // Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nvar SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016\n};\nvar SolanaJSONRPCError = /*#__PURE__*/function (_Error5) {\n  _inherits(SolanaJSONRPCError, _Error5);\n  var _super7 = _createSuper(SolanaJSONRPCError);\n  function SolanaJSONRPCError(_ref21, customMessage) {\n    var _this13;\n    var code = _ref21.code,\n      message = _ref21.message,\n      data = _ref21.data;\n    _classCallCheck(this, SolanaJSONRPCError);\n    _this13 = _super7.call(this, customMessage != null ? \"\".concat(customMessage, \": \").concat(message) : message);\n    _this13.code = void 0;\n    _this13.data = void 0;\n    _this13.code = code;\n    _this13.data = data;\n    _this13.name = 'SolanaJSONRPCError';\n    return _this13;\n  }\n  return _createClass(SolanaJSONRPCError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar fetchImpl = globalThis.fetch;\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nvar NUM_TICKS_PER_SECOND = 160;\n/**\n * @internal\n */\n\nvar DEFAULT_TICKS_PER_SLOT = 64;\n/**\n * @internal\n */\n\nvar NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n/**\n * @internal\n */\n\nvar MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n\n/**\n * @internal\n */\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nfunction decodeData(type, data) {\n  var decoded;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\"invalid account data; account type mismatch \".concat(decoded.typeIndex, \" != \").concat(type.index));\n  }\n  return decoded;\n}\n\n/// The serialized size of lookup table metadata\nvar LOOKUP_TABLE_META_SIZE = 56;\nvar AddressLookupTableAccount = /*#__PURE__*/function () {\n  function AddressLookupTableAccount(args) {\n    _classCallCheck(this, AddressLookupTableAccount);\n    this.key = void 0;\n    this.state = void 0;\n    this.key = args.key;\n    this.state = args.state;\n  }\n  _createClass(AddressLookupTableAccount, [{\n    key: \"isActive\",\n    value: function isActive() {\n      var U64_MAX = BigInt('0xffffffffffffffff');\n      return this.state.deactivationSlot === U64_MAX;\n    }\n  }], [{\n    key: \"deserialize\",\n    value: function deserialize(accountData) {\n      var meta = decodeData(LookupTableMetaLayout, accountData);\n      var serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n      assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n      assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n      var numSerializedAddresses = serializedAddressesLen / 32;\n      var _BufferLayout$struct$ = BufferLayout.struct([BufferLayout.seq(publicKey(), numSerializedAddresses, 'addresses')]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE)),\n        addresses = _BufferLayout$struct$.addresses;\n      return {\n        deactivationSlot: meta.deactivationSlot,\n        lastExtendedSlot: meta.lastExtendedSlot,\n        lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n        authority: meta.authority.length !== 0 ? new PublicKey(meta.authority[0]) : undefined,\n        addresses: addresses.map(function (address) {\n          return new PublicKey(address);\n        })\n      };\n    }\n  }]);\n  return AddressLookupTableAccount;\n}();\nvar LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct([BufferLayout.u32('typeIndex'), u64('deactivationSlot'), BufferLayout.nu64('lastExtendedSlot'), BufferLayout.u8('lastExtendedStartIndex'), BufferLayout.u8(),\n  // option\n  BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u8(), -1), 'authority')])\n};\nvar URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\nfunction makeWebsocketUrl(endpoint) {\n  var matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(\"Failed to validate endpoint URL `\".concat(endpoint, \"`\"));\n  }\n  var _matches = _slicedToArray(matches, 4),\n    _ = _matches[0],\n    // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish = _matches[1],\n    portWithColon = _matches[2],\n    rest = _matches[3];\n  var protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  var startPort = portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  var websocketPort =\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  startPort == null ? '' : \":\".concat(startPort + 1);\n  return \"\".concat(protocol, \"//\").concat(hostish).concat(websocketPort).concat(rest);\n}\nvar _process$env$npm_pack;\nvar PublicKeyFromString = coerce(instance(PublicKey), string(), function (value) {\n  return new PublicKey(value);\n});\nvar RawAccountDataResult = tuple([string(), literal('base64')]);\nvar BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, function (value) {\n  return Buffer.from(value[0], 'base64');\n});\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\n\nvar BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n/** @internal */\n\nfunction extractCommitmentFromConfig(commitmentOrConfig) {\n  var commitment;\n  var config;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    var specifiedCommitment = commitmentOrConfig.commitment,\n      specifiedConfig = _objectWithoutProperties(commitmentOrConfig, _excluded);\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {\n    commitment: commitment,\n    config: config\n  };\n}\n/**\n * @internal\n */\n\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result: result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\nvar UnknownRpcResult = createRpcResult(unknown());\n/**\n * @internal\n */\n\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, function (value) {\n    if ('error' in value) {\n      return value;\n    } else {\n      return _objectSpread(_objectSpread({}, value), {}, {\n        result: create(value.result, schema)\n      });\n    }\n  });\n}\n/**\n * @internal\n */\n\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value: value\n  }));\n}\n/**\n * @internal\n */\n\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value: value\n  });\n}\n/**\n * @internal\n */\n\nfunction versionedMessageFromResponse(version, response) {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(function (accountKey) {\n        return new PublicKey(accountKey);\n      }),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(function (ix) {\n        return {\n          programIdIndex: ix.programIdIndex,\n          accountKeyIndexes: ix.accounts,\n          data: bs58.decode(ix.data)\n        };\n      }),\n      addressTableLookups: response.addressTableLookups\n    });\n  } else {\n    return new Message(response);\n  }\n}\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\nvar GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nvar GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number(),\n  commission: optional(nullable(number()))\n}))));\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nvar GetInflationRateResult = type({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number()\n});\n/**\n * Information about the current epoch\n */\n\nvar GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nvar GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nvar GetLeaderScheduleResult = record(string(), array(number()));\n/**\n * Transaction error or null\n */\n\nvar TransactionErrorResult = nullable(union([type({}), string()]));\n/**\n * Signature status for a transaction\n */\n\nvar SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n/**\n * Transaction signature received notification\n */\n\nvar SignatureReceivedResult = literal('receivedSignature');\n/**\n * Version info for a node\n */\n\nvar VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nvar SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string())),\n  accounts: optional(nullable(array(nullable(type({\n    executable: boolean(),\n    owner: string(),\n    lamports: number(),\n    data: array(string()),\n    rentEpoch: optional(number())\n  }))))),\n  unitsConsumed: optional(number()),\n  returnData: optional(nullable(type({\n    programId: string(),\n    data: tuple([string(), literal('base64')])\n  })))\n}));\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nvar BlockProductionResponseStruct = jsonRpcResultAndContext(type({\n  byIdentity: record(string(), array(number())),\n  range: type({\n    firstSlot: number(),\n    lastSlot: number()\n  })\n}));\n/**\n * A performance sample\n */\n\nfunction createRpcClient(url, httpHeaders, customFetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent) {\n  var fetch = customFetch ? customFetch : fetchImpl;\n  var agent;\n  {\n    if (httpAgent != null) {\n      console.warn('You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' + 'It has been ignored; `httpAgent` is only used in Node environments.');\n    }\n  }\n  var fetchWithMiddleware;\n  if (fetchMiddleware) {\n    fetchWithMiddleware = /*#__PURE__*/function () {\n      var _ref22 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(info, init) {\n        var modifiedFetchArgs;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return new Promise(function (resolve, reject) {\n                try {\n                  fetchMiddleware(info, init, function (modifiedInfo, modifiedInit) {\n                    return resolve([modifiedInfo, modifiedInit]);\n                  });\n                } catch (error) {\n                  reject(error);\n                }\n              });\n            case 2:\n              modifiedFetchArgs = _context6.sent;\n              _context6.next = 5;\n              return fetch.apply(void 0, _toConsumableArray(modifiedFetchArgs));\n            case 5:\n              return _context6.abrupt(\"return\", _context6.sent);\n            case 6:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6);\n      }));\n      return function fetchWithMiddleware(_x18, _x19) {\n        return _ref22.apply(this, arguments);\n      };\n    }();\n  }\n  var clientBrowser = new RpcClient( /*#__PURE__*/function () {\n    var _ref23 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(request, callback) {\n      var options, too_many_requests_retries, res, waitTime, text;\n      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) switch (_context7.prev = _context7.next) {\n          case 0:\n            options = {\n              method: 'POST',\n              body: request,\n              agent: agent,\n              headers: Object.assign({\n                'Content-Type': 'application/json'\n              }, httpHeaders || {}, COMMON_HTTP_HEADERS)\n            };\n            _context7.prev = 1;\n            too_many_requests_retries = 5;\n            waitTime = 500;\n          case 4:\n            if (!fetchWithMiddleware) {\n              _context7.next = 10;\n              break;\n            }\n            _context7.next = 7;\n            return fetchWithMiddleware(url, options);\n          case 7:\n            res = _context7.sent;\n            _context7.next = 13;\n            break;\n          case 10:\n            _context7.next = 12;\n            return fetch(url, options);\n          case 12:\n            res = _context7.sent;\n          case 13:\n            if (!(res.status !== 429\n            /* Too many requests */)) {\n              _context7.next = 15;\n              break;\n            }\n            return _context7.abrupt(\"break\", 26);\n          case 15:\n            if (!(disableRetryOnRateLimit === true)) {\n              _context7.next = 17;\n              break;\n            }\n            return _context7.abrupt(\"break\", 26);\n          case 17:\n            too_many_requests_retries -= 1;\n            if (!(too_many_requests_retries === 0)) {\n              _context7.next = 20;\n              break;\n            }\n            return _context7.abrupt(\"break\", 26);\n          case 20:\n            console.log(\"Server responded with \".concat(res.status, \" \").concat(res.statusText, \".  Retrying after \").concat(waitTime, \"ms delay...\"));\n            _context7.next = 23;\n            return sleep(waitTime);\n          case 23:\n            waitTime *= 2;\n          case 24:\n            _context7.next = 4;\n            break;\n          case 26:\n            _context7.next = 28;\n            return res.text();\n          case 28:\n            text = _context7.sent;\n            if (res.ok) {\n              callback(null, text);\n            } else {\n              callback(new Error(\"\".concat(res.status, \" \").concat(res.statusText, \": \").concat(text)));\n            }\n            _context7.next = 35;\n            break;\n          case 32:\n            _context7.prev = 32;\n            _context7.t0 = _context7[\"catch\"](1);\n            if (_context7.t0 instanceof Error) callback(_context7.t0);\n          case 35:\n          case \"end\":\n            return _context7.stop();\n        }\n      }, _callee7, null, [[1, 32]]);\n    }));\n    return function (_x20, _x21) {\n      return _ref23.apply(this, arguments);\n    };\n  }(), {});\n  return clientBrowser;\n}\nfunction createRpcRequest(client) {\n  return function (method, args) {\n    return new Promise(function (resolve, reject) {\n      client.request(method, args, function (err, response) {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\nfunction createRpcBatchRequest(client) {\n  return function (requests) {\n    return new Promise(function (resolve, reject) {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      var batch = requests.map(function (params) {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, function (err, response) {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\n\nvar GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\n\nvar GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\n\nvar GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\n\nvar GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\n\nvar GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\n\nvar SlotRpcResult = jsonRpcResult(number());\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nvar GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nvar TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nvar GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\n\nvar GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nvar ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\n\nvar GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nvar GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n/**\n * @internal\n */\n\nvar AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n/**\n * @internal\n */\n\nvar KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nvar ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), function (value) {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n/**\n * @internal\n */\n\nvar ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nvar KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n/**\n * @internal\n */\n\nvar StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nvar GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\n\nvar GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\n\nvar AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n/**\n * @internal\n */\n\nvar ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\n\nvar ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n/**\n * @internal\n */\n\nvar SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\n\nvar SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\nvar SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\n\nvar SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\n\nvar SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\n\nvar RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nvar ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nvar VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\n\nvar GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nvar ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nvar SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\n\nvar GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\n\nvar GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nvar AddressTableLookupStruct = type({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number())\n});\nvar ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct))\n  })\n});\nvar AnnotatedAccountKey = type({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')]))\n});\nvar ConfirmedTransactionAccountsModeResult = type({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string())\n});\nvar ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nvar RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nvar InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nvar UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nvar ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, function (value) {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n/**\n * @internal\n */\n\nvar ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct)))\n  })\n});\nvar TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult\n});\nvar LoadedAddressesResult = type({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString)\n});\n/**\n * @internal\n */\n\nvar ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\n/**\n * @internal\n */\n\nvar ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\nvar TransactionVersionStruct = union([literal(0), literal('legacy')]);\n/** @internal */\n\nvar RewardsResult = type({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number()))\n});\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nvar GetBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\n\nvar GetNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\n\nvar GetAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\n\nvar GetParsedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ParsedConfirmedTransactionResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\n\nvar GetParsedAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\n\nvar GetParsedNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\n\nvar GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nvar GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\n\nvar GetTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: ConfirmedTransactionMetaResult,\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult,\n  version: optional(TransactionVersionStruct)\n})));\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\n\nvar GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number())),\n  version: optional(TransactionVersionStruct)\n})));\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\n\nvar GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n}));\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\n\nvar GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  lastValidBlockHeight: number()\n}));\nvar PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\n\nvar GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\n\nvar GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\n\nvar RequestAirdropRpcResult = jsonRpcResult(string());\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\n\nvar SendTransactionRpcResult = jsonRpcResult(string());\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * @internal\n */\nvar LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nvar LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n/**\n * Filter for log subscriptions.\n */\n\n/** @internal */\nvar COMMON_HTTP_HEADERS = {\n  'solana-client': \"js/\".concat((_process$env$npm_pack = \"0.0.0-development\") !== null && _process$env$npm_pack !== void 0 ? _process$env$npm_pack : 'UNKNOWN')\n};\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nvar Connection = /*#__PURE__*/function () {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n\n  /** @internal */\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  function Connection(endpoint, commitmentOrConfig) {\n    _classCallCheck(this, Connection);\n    this._commitment = void 0;\n    this._confirmTransactionInitialTimeout = void 0;\n    this._rpcEndpoint = void 0;\n    this._rpcWsEndpoint = void 0;\n    this._rpcClient = void 0;\n    this._rpcRequest = void 0;\n    this._rpcBatchRequest = void 0;\n    this._rpcWebSocket = void 0;\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketHeartbeat = null;\n    this._rpcWebSocketIdleTimeout = null;\n    this._rpcWebSocketGeneration = 0;\n    this._disableBlockhashCaching = false;\n    this._pollingBlockhash = false;\n    this._blockhashInfo = {\n      latestBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    this._nextClientSubscriptionId = 0;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId = {};\n    this._subscriptionHashByClientSubscriptionId = {};\n    this._subscriptionStateChangeCallbacksByHash = {};\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    this._subscriptionsByHash = {};\n    this._subscriptionsAutoDisposedByRpc = new Set();\n    var wsEndpoint;\n    var httpHeaders;\n    var fetch;\n    var fetchMiddleware;\n    var disableRetryOnRateLimit;\n    var httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(endpoint, httpHeaders, fetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new Client(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n  /**\n   * The default commitment used for requests\n   */\n  _createClass(Connection, [{\n    key: \"commitment\",\n    get: function get() {\n      return this._commitment;\n    }\n    /**\n     * The RPC endpoint\n     */\n  }, {\n    key: \"rpcEndpoint\",\n    get: function get() {\n      return this._rpcEndpoint;\n    }\n    /**\n     * Fetch the balance for the specified public key, return with context\n     */\n  }, {\n    key: \"getBalanceAndContext\",\n    value: function () {\n      var _getBalanceAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(publicKey, commitmentOrConfig) {\n        var _extractCommitmentFro, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              /** @internal */\n              _extractCommitmentFro = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro.commitment, config = _extractCommitmentFro.config;\n              args = this._buildArgs([publicKey.toBase58()], commitment, undefined\n              /* encoding */, config);\n              _context8.next = 4;\n              return this._rpcRequest('getBalance', args);\n            case 4:\n              unsafeRes = _context8.sent;\n              res = create(unsafeRes, jsonRpcResultAndContext(number()));\n              if (!('error' in res)) {\n                _context8.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get balance for \".concat(publicKey.toBase58()));\n            case 8:\n              return _context8.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n      function getBalanceAndContext(_x22, _x23) {\n        return _getBalanceAndContext.apply(this, arguments);\n      }\n      return getBalanceAndContext;\n    }()\n    /**\n     * Fetch the balance for the specified public key\n     */\n  }, {\n    key: \"getBalance\",\n    value: function () {\n      var _getBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(publicKey, commitmentOrConfig) {\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return this.getBalanceAndContext(publicKey, commitmentOrConfig).then(function (x) {\n                return x.value;\n              }).catch(function (e) {\n                throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n              });\n            case 2:\n              return _context9.abrupt(\"return\", _context9.sent);\n            case 3:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this);\n      }));\n      function getBalance(_x24, _x25) {\n        return _getBalance.apply(this, arguments);\n      }\n      return getBalance;\n    }()\n    /**\n     * Fetch the estimated production time of a block\n     */\n  }, {\n    key: \"getBlockTime\",\n    value: function () {\n      var _getBlockTime = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(slot) {\n        var unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return this._rpcRequest('getBlockTime', [slot]);\n            case 2:\n              unsafeRes = _context10.sent;\n              res = create(unsafeRes, jsonRpcResult(nullable(number())));\n              if (!('error' in res)) {\n                _context10.next = 6;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get block time for slot \".concat(slot));\n            case 6:\n              return _context10.abrupt(\"return\", res.result);\n            case 7:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this);\n      }));\n      function getBlockTime(_x26) {\n        return _getBlockTime.apply(this, arguments);\n      }\n      return getBlockTime;\n    }()\n    /**\n     * Fetch the lowest slot that the node has information about in its ledger.\n     * This value may increase over time if the node is configured to purge older ledger data\n     */\n  }, {\n    key: \"getMinimumLedgerSlot\",\n    value: function () {\n      var _getMinimumLedgerSlot = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        var unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.next = 2;\n              return this._rpcRequest('minimumLedgerSlot', []);\n            case 2:\n              unsafeRes = _context11.sent;\n              res = create(unsafeRes, jsonRpcResult(number()));\n              if (!('error' in res)) {\n                _context11.next = 6;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get minimum ledger slot');\n            case 6:\n              return _context11.abrupt(\"return\", res.result);\n            case 7:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this);\n      }));\n      function getMinimumLedgerSlot() {\n        return _getMinimumLedgerSlot.apply(this, arguments);\n      }\n      return getMinimumLedgerSlot;\n    }()\n    /**\n     * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n     */\n  }, {\n    key: \"getFirstAvailableBlock\",\n    value: function () {\n      var _getFirstAvailableBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n        var unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.next = 2;\n              return this._rpcRequest('getFirstAvailableBlock', []);\n            case 2:\n              unsafeRes = _context12.sent;\n              res = create(unsafeRes, SlotRpcResult);\n              if (!('error' in res)) {\n                _context12.next = 6;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get first available block');\n            case 6:\n              return _context12.abrupt(\"return\", res.result);\n            case 7:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12, this);\n      }));\n      function getFirstAvailableBlock() {\n        return _getFirstAvailableBlock.apply(this, arguments);\n      }\n      return getFirstAvailableBlock;\n    }()\n    /**\n     * Fetch information about the current supply\n     */\n  }, {\n    key: \"getSupply\",\n    value: function () {\n      var _getSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(config) {\n        var configArg, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              configArg = {};\n              if (typeof config === 'string') {\n                configArg = {\n                  commitment: config\n                };\n              } else if (config) {\n                configArg = _objectSpread(_objectSpread({}, config), {}, {\n                  commitment: config && config.commitment || this.commitment\n                });\n              } else {\n                configArg = {\n                  commitment: this.commitment\n                };\n              }\n              _context13.next = 4;\n              return this._rpcRequest('getSupply', [configArg]);\n            case 4:\n              unsafeRes = _context13.sent;\n              res = create(unsafeRes, GetSupplyRpcResult);\n              if (!('error' in res)) {\n                _context13.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n            case 8:\n              return _context13.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context13.stop();\n          }\n        }, _callee13, this);\n      }));\n      function getSupply(_x27) {\n        return _getSupply.apply(this, arguments);\n      }\n      return getSupply;\n    }()\n    /**\n     * Fetch the current supply of a token mint\n     */\n  }, {\n    key: \"getTokenSupply\",\n    value: function () {\n      var _getTokenSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(tokenMintAddress, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) switch (_context14.prev = _context14.next) {\n            case 0:\n              args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n              _context14.next = 3;\n              return this._rpcRequest('getTokenSupply', args);\n            case 3:\n              unsafeRes = _context14.sent;\n              res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n              if (!('error' in res)) {\n                _context14.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n            case 7:\n              return _context14.abrupt(\"return\", res.result);\n            case 8:\n            case \"end\":\n              return _context14.stop();\n          }\n        }, _callee14, this);\n      }));\n      function getTokenSupply(_x28, _x29) {\n        return _getTokenSupply.apply(this, arguments);\n      }\n      return getTokenSupply;\n    }()\n    /**\n     * Fetch the current balance of a token account\n     */\n  }, {\n    key: \"getTokenAccountBalance\",\n    value: function () {\n      var _getTokenAccountBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(tokenAddress, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) switch (_context15.prev = _context15.next) {\n            case 0:\n              args = this._buildArgs([tokenAddress.toBase58()], commitment);\n              _context15.next = 3;\n              return this._rpcRequest('getTokenAccountBalance', args);\n            case 3:\n              unsafeRes = _context15.sent;\n              res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n              if (!('error' in res)) {\n                _context15.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get token account balance');\n            case 7:\n              return _context15.abrupt(\"return\", res.result);\n            case 8:\n            case \"end\":\n              return _context15.stop();\n          }\n        }, _callee15, this);\n      }));\n      function getTokenAccountBalance(_x30, _x31) {\n        return _getTokenAccountBalance.apply(this, arguments);\n      }\n      return getTokenAccountBalance;\n    }()\n    /**\n     * Fetch all the token accounts owned by the specified account\n     *\n     * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n     */\n  }, {\n    key: \"getTokenAccountsByOwner\",\n    value: function () {\n      var _getTokenAccountsByOwner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(ownerAddress, filter, commitmentOrConfig) {\n        var _extractCommitmentFro2, commitment, config, _args, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) switch (_context16.prev = _context16.next) {\n            case 0:\n              _extractCommitmentFro2 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro2.commitment, config = _extractCommitmentFro2.config;\n              _args = [ownerAddress.toBase58()];\n              if ('mint' in filter) {\n                _args.push({\n                  mint: filter.mint.toBase58()\n                });\n              } else {\n                _args.push({\n                  programId: filter.programId.toBase58()\n                });\n              }\n              args = this._buildArgs(_args, commitment, 'base64', config);\n              _context16.next = 6;\n              return this._rpcRequest('getTokenAccountsByOwner', args);\n            case 6:\n              unsafeRes = _context16.sent;\n              res = create(unsafeRes, GetTokenAccountsByOwner);\n              if (!('error' in res)) {\n                _context16.next = 10;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get token accounts owned by account \".concat(ownerAddress.toBase58()));\n            case 10:\n              return _context16.abrupt(\"return\", res.result);\n            case 11:\n            case \"end\":\n              return _context16.stop();\n          }\n        }, _callee16, this);\n      }));\n      function getTokenAccountsByOwner(_x32, _x33, _x34) {\n        return _getTokenAccountsByOwner.apply(this, arguments);\n      }\n      return getTokenAccountsByOwner;\n    }()\n    /**\n     * Fetch parsed token accounts owned by the specified account\n     *\n     * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n     */\n  }, {\n    key: \"getParsedTokenAccountsByOwner\",\n    value: function () {\n      var _getParsedTokenAccountsByOwner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(ownerAddress, filter, commitment) {\n        var _args, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) switch (_context17.prev = _context17.next) {\n            case 0:\n              _args = [ownerAddress.toBase58()];\n              if ('mint' in filter) {\n                _args.push({\n                  mint: filter.mint.toBase58()\n                });\n              } else {\n                _args.push({\n                  programId: filter.programId.toBase58()\n                });\n              }\n              args = this._buildArgs(_args, commitment, 'jsonParsed');\n              _context17.next = 5;\n              return this._rpcRequest('getTokenAccountsByOwner', args);\n            case 5:\n              unsafeRes = _context17.sent;\n              res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n              if (!('error' in res)) {\n                _context17.next = 9;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get token accounts owned by account \".concat(ownerAddress.toBase58()));\n            case 9:\n              return _context17.abrupt(\"return\", res.result);\n            case 10:\n            case \"end\":\n              return _context17.stop();\n          }\n        }, _callee17, this);\n      }));\n      function getParsedTokenAccountsByOwner(_x35, _x36, _x37) {\n        return _getParsedTokenAccountsByOwner.apply(this, arguments);\n      }\n      return getParsedTokenAccountsByOwner;\n    }()\n    /**\n     * Fetch the 20 largest accounts with their current balances\n     */\n  }, {\n    key: \"getLargestAccounts\",\n    value: function () {\n      var _getLargestAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(config) {\n        var arg, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) switch (_context18.prev = _context18.next) {\n            case 0:\n              arg = _objectSpread(_objectSpread({}, config), {}, {\n                commitment: config && config.commitment || this.commitment\n              });\n              args = arg.filter || arg.commitment ? [arg] : [];\n              _context18.next = 4;\n              return this._rpcRequest('getLargestAccounts', args);\n            case 4:\n              unsafeRes = _context18.sent;\n              res = create(unsafeRes, GetLargestAccountsRpcResult);\n              if (!('error' in res)) {\n                _context18.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n            case 8:\n              return _context18.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context18.stop();\n          }\n        }, _callee18, this);\n      }));\n      function getLargestAccounts(_x38) {\n        return _getLargestAccounts.apply(this, arguments);\n      }\n      return getLargestAccounts;\n    }()\n    /**\n     * Fetch the 20 largest token accounts with their current balances\n     * for a given mint.\n     */\n  }, {\n    key: \"getTokenLargestAccounts\",\n    value: function () {\n      var _getTokenLargestAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(mintAddress, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n          while (1) switch (_context19.prev = _context19.next) {\n            case 0:\n              args = this._buildArgs([mintAddress.toBase58()], commitment);\n              _context19.next = 3;\n              return this._rpcRequest('getTokenLargestAccounts', args);\n            case 3:\n              unsafeRes = _context19.sent;\n              res = create(unsafeRes, GetTokenLargestAccountsResult);\n              if (!('error' in res)) {\n                _context19.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get token largest accounts');\n            case 7:\n              return _context19.abrupt(\"return\", res.result);\n            case 8:\n            case \"end\":\n              return _context19.stop();\n          }\n        }, _callee19, this);\n      }));\n      function getTokenLargestAccounts(_x39, _x40) {\n        return _getTokenLargestAccounts.apply(this, arguments);\n      }\n      return getTokenLargestAccounts;\n    }()\n    /**\n     * Fetch all the account info for the specified public key, return with context\n     */\n  }, {\n    key: \"getAccountInfoAndContext\",\n    value: function () {\n      var _getAccountInfoAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(publicKey, commitmentOrConfig) {\n        var _extractCommitmentFro3, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n          while (1) switch (_context20.prev = _context20.next) {\n            case 0:\n              _extractCommitmentFro3 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro3.commitment, config = _extractCommitmentFro3.config;\n              args = this._buildArgs([publicKey.toBase58()], commitment, 'base64', config);\n              _context20.next = 4;\n              return this._rpcRequest('getAccountInfo', args);\n            case 4:\n              unsafeRes = _context20.sent;\n              res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n              if (!('error' in res)) {\n                _context20.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get info about account \".concat(publicKey.toBase58()));\n            case 8:\n              return _context20.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context20.stop();\n          }\n        }, _callee20, this);\n      }));\n      function getAccountInfoAndContext(_x41, _x42) {\n        return _getAccountInfoAndContext.apply(this, arguments);\n      }\n      return getAccountInfoAndContext;\n    }()\n    /**\n     * Fetch parsed account info for the specified public key\n     */\n  }, {\n    key: \"getParsedAccountInfo\",\n    value: function () {\n      var _getParsedAccountInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(publicKey, commitmentOrConfig) {\n        var _extractCommitmentFro4, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n          while (1) switch (_context21.prev = _context21.next) {\n            case 0:\n              _extractCommitmentFro4 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro4.commitment, config = _extractCommitmentFro4.config;\n              args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed', config);\n              _context21.next = 4;\n              return this._rpcRequest('getAccountInfo', args);\n            case 4:\n              unsafeRes = _context21.sent;\n              res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n              if (!('error' in res)) {\n                _context21.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get info about account \".concat(publicKey.toBase58()));\n            case 8:\n              return _context21.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context21.stop();\n          }\n        }, _callee21, this);\n      }));\n      function getParsedAccountInfo(_x43, _x44) {\n        return _getParsedAccountInfo.apply(this, arguments);\n      }\n      return getParsedAccountInfo;\n    }()\n    /**\n     * Fetch all the account info for the specified public key\n     */\n  }, {\n    key: \"getAccountInfo\",\n    value: function () {\n      var _getAccountInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22(publicKey, commitmentOrConfig) {\n        var res;\n        return _regeneratorRuntime().wrap(function _callee22$(_context22) {\n          while (1) switch (_context22.prev = _context22.next) {\n            case 0:\n              _context22.prev = 0;\n              _context22.next = 3;\n              return this.getAccountInfoAndContext(publicKey, commitmentOrConfig);\n            case 3:\n              res = _context22.sent;\n              return _context22.abrupt(\"return\", res.value);\n            case 7:\n              _context22.prev = 7;\n              _context22.t0 = _context22[\"catch\"](0);\n              throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + _context22.t0);\n            case 10:\n            case \"end\":\n              return _context22.stop();\n          }\n        }, _callee22, this, [[0, 7]]);\n      }));\n      function getAccountInfo(_x45, _x46) {\n        return _getAccountInfo.apply(this, arguments);\n      }\n      return getAccountInfo;\n    }()\n    /**\n     * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n     */\n  }, {\n    key: \"getMultipleParsedAccounts\",\n    value: function () {\n      var _getMultipleParsedAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23(publicKeys, rawConfig) {\n        var _extractCommitmentFro5, commitment, config, keys, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee23$(_context23) {\n          while (1) switch (_context23.prev = _context23.next) {\n            case 0:\n              _extractCommitmentFro5 = extractCommitmentFromConfig(rawConfig), commitment = _extractCommitmentFro5.commitment, config = _extractCommitmentFro5.config;\n              keys = publicKeys.map(function (key) {\n                return key.toBase58();\n              });\n              args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n              _context23.next = 5;\n              return this._rpcRequest('getMultipleAccounts', args);\n            case 5:\n              unsafeRes = _context23.sent;\n              res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))));\n              if (!('error' in res)) {\n                _context23.next = 9;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get info for accounts \".concat(keys));\n            case 9:\n              return _context23.abrupt(\"return\", res.result);\n            case 10:\n            case \"end\":\n              return _context23.stop();\n          }\n        }, _callee23, this);\n      }));\n      function getMultipleParsedAccounts(_x47, _x48) {\n        return _getMultipleParsedAccounts.apply(this, arguments);\n      }\n      return getMultipleParsedAccounts;\n    }()\n    /**\n     * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n     */\n  }, {\n    key: \"getMultipleAccountsInfoAndContext\",\n    value: function () {\n      var _getMultipleAccountsInfoAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee24(publicKeys, commitmentOrConfig) {\n        var _extractCommitmentFro6, commitment, config, keys, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee24$(_context24) {\n          while (1) switch (_context24.prev = _context24.next) {\n            case 0:\n              _extractCommitmentFro6 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro6.commitment, config = _extractCommitmentFro6.config;\n              keys = publicKeys.map(function (key) {\n                return key.toBase58();\n              });\n              args = this._buildArgs([keys], commitment, 'base64', config);\n              _context24.next = 5;\n              return this._rpcRequest('getMultipleAccounts', args);\n            case 5:\n              unsafeRes = _context24.sent;\n              res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));\n              if (!('error' in res)) {\n                _context24.next = 9;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get info for accounts \".concat(keys));\n            case 9:\n              return _context24.abrupt(\"return\", res.result);\n            case 10:\n            case \"end\":\n              return _context24.stop();\n          }\n        }, _callee24, this);\n      }));\n      function getMultipleAccountsInfoAndContext(_x49, _x50) {\n        return _getMultipleAccountsInfoAndContext.apply(this, arguments);\n      }\n      return getMultipleAccountsInfoAndContext;\n    }()\n    /**\n     * Fetch all the account info for multiple accounts specified by an array of public keys\n     */\n  }, {\n    key: \"getMultipleAccountsInfo\",\n    value: function () {\n      var _getMultipleAccountsInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee25(publicKeys, commitmentOrConfig) {\n        var res;\n        return _regeneratorRuntime().wrap(function _callee25$(_context25) {\n          while (1) switch (_context25.prev = _context25.next) {\n            case 0:\n              _context25.next = 2;\n              return this.getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig);\n            case 2:\n              res = _context25.sent;\n              return _context25.abrupt(\"return\", res.value);\n            case 4:\n            case \"end\":\n              return _context25.stop();\n          }\n        }, _callee25, this);\n      }));\n      function getMultipleAccountsInfo(_x51, _x52) {\n        return _getMultipleAccountsInfo.apply(this, arguments);\n      }\n      return getMultipleAccountsInfo;\n    }()\n    /**\n     * Returns epoch activation information for a stake account that has been delegated\n     */\n  }, {\n    key: \"getStakeActivation\",\n    value: function () {\n      var _getStakeActivation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee26(publicKey, commitmentOrConfig, epoch) {\n        var _extractCommitmentFro7, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee26$(_context26) {\n          while (1) switch (_context26.prev = _context26.next) {\n            case 0:\n              _extractCommitmentFro7 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro7.commitment, config = _extractCommitmentFro7.config;\n              args = this._buildArgs([publicKey.toBase58()], commitment, undefined\n              /* encoding */, _objectSpread(_objectSpread({}, config), {}, {\n                epoch: epoch != null ? epoch : config === null || config === void 0 ? void 0 : config.epoch\n              }));\n              _context26.next = 4;\n              return this._rpcRequest('getStakeActivation', args);\n            case 4:\n              unsafeRes = _context26.sent;\n              res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n              if (!('error' in res)) {\n                _context26.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get Stake Activation \".concat(publicKey.toBase58()));\n            case 8:\n              return _context26.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context26.stop();\n          }\n        }, _callee26, this);\n      }));\n      function getStakeActivation(_x53, _x54, _x55) {\n        return _getStakeActivation.apply(this, arguments);\n      }\n      return getStakeActivation;\n    }()\n    /**\n     * Fetch all the accounts owned by the specified program id\n     *\n     * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n     */\n  }, {\n    key: \"getProgramAccounts\",\n    value: function () {\n      var _getProgramAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee27(programId, configOrCommitment) {\n        var _extractCommitmentFro8, commitment, config, _ref24, encoding, configWithoutEncoding, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee27$(_context27) {\n          while (1) switch (_context27.prev = _context27.next) {\n            case 0:\n              _extractCommitmentFro8 = extractCommitmentFromConfig(configOrCommitment), commitment = _extractCommitmentFro8.commitment, config = _extractCommitmentFro8.config;\n              _ref24 = config || {}, encoding = _ref24.encoding, configWithoutEncoding = _objectWithoutProperties(_ref24, _excluded2);\n              args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', configWithoutEncoding);\n              _context27.next = 5;\n              return this._rpcRequest('getProgramAccounts', args);\n            case 5:\n              unsafeRes = _context27.sent;\n              res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n              if (!('error' in res)) {\n                _context27.next = 9;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get accounts owned by program \".concat(programId.toBase58()));\n            case 9:\n              return _context27.abrupt(\"return\", res.result);\n            case 10:\n            case \"end\":\n              return _context27.stop();\n          }\n        }, _callee27, this);\n      }));\n      function getProgramAccounts(_x56, _x57) {\n        return _getProgramAccounts.apply(this, arguments);\n      }\n      return getProgramAccounts;\n    }()\n    /**\n     * Fetch and parse all the accounts owned by the specified program id\n     *\n     * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n     */\n  }, {\n    key: \"getParsedProgramAccounts\",\n    value: function () {\n      var _getParsedProgramAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee28(programId, configOrCommitment) {\n        var _extractCommitmentFro9, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee28$(_context28) {\n          while (1) switch (_context28.prev = _context28.next) {\n            case 0:\n              _extractCommitmentFro9 = extractCommitmentFromConfig(configOrCommitment), commitment = _extractCommitmentFro9.commitment, config = _extractCommitmentFro9.config;\n              args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', config);\n              _context28.next = 4;\n              return this._rpcRequest('getProgramAccounts', args);\n            case 4:\n              unsafeRes = _context28.sent;\n              res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n              if (!('error' in res)) {\n                _context28.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get accounts owned by program \".concat(programId.toBase58()));\n            case 8:\n              return _context28.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context28.stop();\n          }\n        }, _callee28, this);\n      }));\n      function getParsedProgramAccounts(_x58, _x59) {\n        return _getParsedProgramAccounts.apply(this, arguments);\n      }\n      return getParsedProgramAccounts;\n    }() // eslint-disable-next-line no-dupe-class-members\n  }, {\n    key: \"confirmTransaction\",\n    value: function () {\n      var _confirmTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee29(strategy, commitment) {\n        var rawSignature, _config$abortSignal, config, decodedSignature;\n        return _regeneratorRuntime().wrap(function _callee29$(_context29) {\n          while (1) switch (_context29.prev = _context29.next) {\n            case 0:\n              if (!(typeof strategy == 'string')) {\n                _context29.next = 4;\n                break;\n              }\n              rawSignature = strategy;\n              _context29.next = 8;\n              break;\n            case 4:\n              config = strategy;\n              if (!((_config$abortSignal = config.abortSignal) !== null && _config$abortSignal !== void 0 && _config$abortSignal.aborted)) {\n                _context29.next = 7;\n                break;\n              }\n              return _context29.abrupt(\"return\", Promise.reject(config.abortSignal.reason));\n            case 7:\n              rawSignature = config.signature;\n            case 8:\n              _context29.prev = 8;\n              decodedSignature = bs58.decode(rawSignature);\n              _context29.next = 15;\n              break;\n            case 12:\n              _context29.prev = 12;\n              _context29.t0 = _context29[\"catch\"](8);\n              throw new Error('signature must be base58 encoded: ' + rawSignature);\n            case 15:\n              assert(decodedSignature.length === 64, 'signature has invalid length');\n              if (!(typeof strategy === 'string')) {\n                _context29.next = 22;\n                break;\n              }\n              _context29.next = 19;\n              return this.confirmTransactionUsingLegacyTimeoutStrategy({\n                commitment: commitment || this.commitment,\n                signature: rawSignature\n              });\n            case 19:\n              return _context29.abrupt(\"return\", _context29.sent);\n            case 22:\n              if (!('lastValidBlockHeight' in strategy)) {\n                _context29.next = 28;\n                break;\n              }\n              _context29.next = 25;\n              return this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n                commitment: commitment || this.commitment,\n                strategy: strategy\n              });\n            case 25:\n              return _context29.abrupt(\"return\", _context29.sent);\n            case 28:\n              _context29.next = 30;\n              return this.confirmTransactionUsingDurableNonceStrategy({\n                commitment: commitment || this.commitment,\n                strategy: strategy\n              });\n            case 30:\n              return _context29.abrupt(\"return\", _context29.sent);\n            case 31:\n            case \"end\":\n              return _context29.stop();\n          }\n        }, _callee29, this, [[8, 12]]);\n      }));\n      function confirmTransaction(_x60, _x61) {\n        return _confirmTransaction.apply(this, arguments);\n      }\n      return confirmTransaction;\n    }()\n  }, {\n    key: \"getCancellationPromise\",\n    value: function getCancellationPromise(signal) {\n      return new Promise(function (_, reject) {\n        if (signal == null) {\n          return;\n        }\n        if (signal.aborted) {\n          reject(signal.reason);\n        } else {\n          signal.addEventListener('abort', function () {\n            reject(signal.reason);\n          });\n        }\n      });\n    }\n  }, {\n    key: \"getTransactionConfirmationPromise\",\n    value: function getTransactionConfirmationPromise(_ref25) {\n      var _this14 = this;\n      var commitment = _ref25.commitment,\n        signature = _ref25.signature;\n      var signatureSubscriptionId;\n      var disposeSignatureSubscriptionStateChangeObserver;\n      var done = false;\n      var confirmationPromise = new Promise(function (resolve, reject) {\n        try {\n          signatureSubscriptionId = _this14.onSignature(signature, function (result, context) {\n            signatureSubscriptionId = undefined;\n            var response = {\n              context: context,\n              value: result\n            };\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: response\n            });\n          }, commitment);\n          var subscriptionSetupPromise = new Promise(function (resolveSubscriptionSetup) {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver = _this14._onSubscriptionStateChange(signatureSubscriptionId, function (nextState) {\n                if (nextState === 'subscribed') {\n                  resolveSubscriptionSetup();\n                }\n              });\n            }\n          });\n          _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee30() {\n            var response, context, value;\n            return _regeneratorRuntime().wrap(function _callee30$(_context30) {\n              while (1) switch (_context30.prev = _context30.next) {\n                case 0:\n                  _context30.next = 2;\n                  return subscriptionSetupPromise;\n                case 2:\n                  if (!done) {\n                    _context30.next = 4;\n                    break;\n                  }\n                  return _context30.abrupt(\"return\");\n                case 4:\n                  _context30.next = 6;\n                  return _this14.getSignatureStatus(signature);\n                case 6:\n                  response = _context30.sent;\n                  if (!done) {\n                    _context30.next = 9;\n                    break;\n                  }\n                  return _context30.abrupt(\"return\");\n                case 9:\n                  if (!(response == null)) {\n                    _context30.next = 11;\n                    break;\n                  }\n                  return _context30.abrupt(\"return\");\n                case 11:\n                  context = response.context, value = response.value;\n                  if (!(value == null)) {\n                    _context30.next = 14;\n                    break;\n                  }\n                  return _context30.abrupt(\"return\");\n                case 14:\n                  if (!(value !== null && value !== void 0 && value.err)) {\n                    _context30.next = 18;\n                    break;\n                  }\n                  reject(value.err);\n                  _context30.next = 29;\n                  break;\n                case 18:\n                  _context30.t0 = commitment;\n                  _context30.next = _context30.t0 === 'confirmed' ? 21 : _context30.t0 === 'single' ? 21 : _context30.t0 === 'singleGossip' ? 21 : _context30.t0 === 'finalized' ? 24 : _context30.t0 === 'max' ? 24 : _context30.t0 === 'root' ? 24 : _context30.t0 === 'processed' ? 27 : _context30.t0 === 'recent' ? 27 : 27;\n                  break;\n                case 21:\n                  if (!(value.confirmationStatus === 'processed')) {\n                    _context30.next = 23;\n                    break;\n                  }\n                  return _context30.abrupt(\"return\");\n                case 23:\n                  return _context30.abrupt(\"break\", 27);\n                case 24:\n                  if (!(value.confirmationStatus === 'processed' || value.confirmationStatus === 'confirmed')) {\n                    _context30.next = 26;\n                    break;\n                  }\n                  return _context30.abrupt(\"return\");\n                case 26:\n                  return _context30.abrupt(\"break\", 27);\n                case 27:\n                  done = true;\n                  resolve({\n                    __type: TransactionStatus.PROCESSED,\n                    response: {\n                      context: context,\n                      value: value\n                    }\n                  });\n                case 29:\n                case \"end\":\n                  return _context30.stop();\n              }\n            }, _callee30);\n          }))();\n        } catch (err) {\n          reject(err);\n        }\n      });\n      var abortConfirmation = function abortConfirmation() {\n        if (disposeSignatureSubscriptionStateChangeObserver) {\n          disposeSignatureSubscriptionStateChangeObserver();\n          disposeSignatureSubscriptionStateChangeObserver = undefined;\n        }\n        if (signatureSubscriptionId != null) {\n          _this14.removeSignatureListener(signatureSubscriptionId);\n          signatureSubscriptionId = undefined;\n        }\n      };\n      return {\n        abortConfirmation: abortConfirmation,\n        confirmationPromise: confirmationPromise\n      };\n    }\n  }, {\n    key: \"confirmTransactionUsingBlockHeightExceedanceStrategy\",\n    value: function () {\n      var _confirmTransactionUsingBlockHeightExceedanceStrategy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee33(_ref27) {\n        var _this15 = this;\n        var commitment, _ref27$strategy, abortSignal, lastValidBlockHeight, signature, done, expiryPromise, _this$getTransactionC, abortConfirmation, confirmationPromise, cancellationPromise, result, outcome;\n        return _regeneratorRuntime().wrap(function _callee33$(_context33) {\n          while (1) switch (_context33.prev = _context33.next) {\n            case 0:\n              commitment = _ref27.commitment, _ref27$strategy = _ref27.strategy, abortSignal = _ref27$strategy.abortSignal, lastValidBlockHeight = _ref27$strategy.lastValidBlockHeight, signature = _ref27$strategy.signature;\n              done = false;\n              expiryPromise = new Promise(function (resolve) {\n                var checkBlockHeight = /*#__PURE__*/function () {\n                  var _ref28 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee31() {\n                    var blockHeight;\n                    return _regeneratorRuntime().wrap(function _callee31$(_context31) {\n                      while (1) switch (_context31.prev = _context31.next) {\n                        case 0:\n                          _context31.prev = 0;\n                          _context31.next = 3;\n                          return _this15.getBlockHeight(commitment);\n                        case 3:\n                          blockHeight = _context31.sent;\n                          return _context31.abrupt(\"return\", blockHeight);\n                        case 7:\n                          _context31.prev = 7;\n                          _context31.t0 = _context31[\"catch\"](0);\n                          return _context31.abrupt(\"return\", -1);\n                        case 10:\n                        case \"end\":\n                          return _context31.stop();\n                      }\n                    }, _callee31, null, [[0, 7]]);\n                  }));\n                  return function checkBlockHeight() {\n                    return _ref28.apply(this, arguments);\n                  };\n                }();\n                _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee32() {\n                  var currentBlockHeight;\n                  return _regeneratorRuntime().wrap(function _callee32$(_context32) {\n                    while (1) switch (_context32.prev = _context32.next) {\n                      case 0:\n                        _context32.next = 2;\n                        return checkBlockHeight();\n                      case 2:\n                        currentBlockHeight = _context32.sent;\n                        if (!done) {\n                          _context32.next = 5;\n                          break;\n                        }\n                        return _context32.abrupt(\"return\");\n                      case 5:\n                        if (!(currentBlockHeight <= lastValidBlockHeight)) {\n                          _context32.next = 17;\n                          break;\n                        }\n                        _context32.next = 8;\n                        return sleep(1000);\n                      case 8:\n                        if (!done) {\n                          _context32.next = 10;\n                          break;\n                        }\n                        return _context32.abrupt(\"return\");\n                      case 10:\n                        _context32.next = 12;\n                        return checkBlockHeight();\n                      case 12:\n                        currentBlockHeight = _context32.sent;\n                        if (!done) {\n                          _context32.next = 15;\n                          break;\n                        }\n                        return _context32.abrupt(\"return\");\n                      case 15:\n                        _context32.next = 5;\n                        break;\n                      case 17:\n                        resolve({\n                          __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED\n                        });\n                      case 18:\n                      case \"end\":\n                        return _context32.stop();\n                    }\n                  }, _callee32);\n                }))();\n              });\n              _this$getTransactionC = this.getTransactionConfirmationPromise({\n                commitment: commitment,\n                signature: signature\n              }), abortConfirmation = _this$getTransactionC.abortConfirmation, confirmationPromise = _this$getTransactionC.confirmationPromise;\n              cancellationPromise = this.getCancellationPromise(abortSignal);\n              _context33.prev = 5;\n              _context33.next = 8;\n              return Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n            case 8:\n              outcome = _context33.sent;\n              if (!(outcome.__type === TransactionStatus.PROCESSED)) {\n                _context33.next = 13;\n                break;\n              }\n              result = outcome.response;\n              _context33.next = 14;\n              break;\n            case 13:\n              throw new TransactionExpiredBlockheightExceededError(signature);\n            case 14:\n              _context33.prev = 14;\n              done = true;\n              abortConfirmation();\n              return _context33.finish(14);\n            case 18:\n              return _context33.abrupt(\"return\", result);\n            case 19:\n            case \"end\":\n              return _context33.stop();\n          }\n        }, _callee33, this, [[5,, 14, 18]]);\n      }));\n      function confirmTransactionUsingBlockHeightExceedanceStrategy(_x62) {\n        return _confirmTransactionUsingBlockHeightExceedanceStrategy.apply(this, arguments);\n      }\n      return confirmTransactionUsingBlockHeightExceedanceStrategy;\n    }()\n  }, {\n    key: \"confirmTransactionUsingDurableNonceStrategy\",\n    value: function () {\n      var _confirmTransactionUsingDurableNonceStrategy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee36(_ref30) {\n        var _this16 = this;\n        var commitment, _ref30$strategy, abortSignal, minContextSlot, nonceAccountPubkey, nonceValue, signature, done, expiryPromise, _this$getTransactionC2, abortConfirmation, confirmationPromise, cancellationPromise, result, outcome, _signatureStatus, signatureStatus, _outcome$slotInWhichN, status, commitmentForStatus, confirmationStatus;\n        return _regeneratorRuntime().wrap(function _callee36$(_context36) {\n          while (1) switch (_context36.prev = _context36.next) {\n            case 0:\n              commitment = _ref30.commitment, _ref30$strategy = _ref30.strategy, abortSignal = _ref30$strategy.abortSignal, minContextSlot = _ref30$strategy.minContextSlot, nonceAccountPubkey = _ref30$strategy.nonceAccountPubkey, nonceValue = _ref30$strategy.nonceValue, signature = _ref30$strategy.signature;\n              done = false;\n              expiryPromise = new Promise(function (resolve) {\n                var currentNonceValue = nonceValue;\n                var lastCheckedSlot = null;\n                var getCurrentNonceValue = /*#__PURE__*/function () {\n                  var _ref31 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee34() {\n                    var _yield$_this16$getNon, context, nonceAccount;\n                    return _regeneratorRuntime().wrap(function _callee34$(_context34) {\n                      while (1) switch (_context34.prev = _context34.next) {\n                        case 0:\n                          _context34.prev = 0;\n                          _context34.next = 3;\n                          return _this16.getNonceAndContext(nonceAccountPubkey, {\n                            commitment: commitment,\n                            minContextSlot: minContextSlot\n                          });\n                        case 3:\n                          _yield$_this16$getNon = _context34.sent;\n                          context = _yield$_this16$getNon.context;\n                          nonceAccount = _yield$_this16$getNon.value;\n                          lastCheckedSlot = context.slot;\n                          return _context34.abrupt(\"return\", nonceAccount === null || nonceAccount === void 0 ? void 0 : nonceAccount.nonce);\n                        case 10:\n                          _context34.prev = 10;\n                          _context34.t0 = _context34[\"catch\"](0);\n                          return _context34.abrupt(\"return\", currentNonceValue);\n                        case 13:\n                        case \"end\":\n                          return _context34.stop();\n                      }\n                    }, _callee34, null, [[0, 10]]);\n                  }));\n                  return function getCurrentNonceValue() {\n                    return _ref31.apply(this, arguments);\n                  };\n                }();\n                _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee35() {\n                  return _regeneratorRuntime().wrap(function _callee35$(_context35) {\n                    while (1) switch (_context35.prev = _context35.next) {\n                      case 0:\n                        _context35.next = 2;\n                        return getCurrentNonceValue();\n                      case 2:\n                        currentNonceValue = _context35.sent;\n                        if (!done) {\n                          _context35.next = 5;\n                          break;\n                        }\n                        return _context35.abrupt(\"return\");\n                      case 5:\n                        if (!true // eslint-disable-line no-constant-condition\n                        ) {\n                          _context35.next = 20;\n                          break;\n                        }\n                        if (!(nonceValue !== currentNonceValue)) {\n                          _context35.next = 9;\n                          break;\n                        }\n                        resolve({\n                          __type: TransactionStatus.NONCE_INVALID,\n                          slotInWhichNonceDidAdvance: lastCheckedSlot\n                        });\n                        return _context35.abrupt(\"return\");\n                      case 9:\n                        _context35.next = 11;\n                        return sleep(2000);\n                      case 11:\n                        if (!done) {\n                          _context35.next = 13;\n                          break;\n                        }\n                        return _context35.abrupt(\"return\");\n                      case 13:\n                        _context35.next = 15;\n                        return getCurrentNonceValue();\n                      case 15:\n                        currentNonceValue = _context35.sent;\n                        if (!done) {\n                          _context35.next = 18;\n                          break;\n                        }\n                        return _context35.abrupt(\"return\");\n                      case 18:\n                        _context35.next = 5;\n                        break;\n                      case 20:\n                      case \"end\":\n                        return _context35.stop();\n                    }\n                  }, _callee35);\n                }))();\n              });\n              _this$getTransactionC2 = this.getTransactionConfirmationPromise({\n                commitment: commitment,\n                signature: signature\n              }), abortConfirmation = _this$getTransactionC2.abortConfirmation, confirmationPromise = _this$getTransactionC2.confirmationPromise;\n              cancellationPromise = this.getCancellationPromise(abortSignal);\n              _context36.prev = 5;\n              _context36.next = 8;\n              return Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n            case 8:\n              outcome = _context36.sent;\n              if (!(outcome.__type === TransactionStatus.PROCESSED)) {\n                _context36.next = 13;\n                break;\n              }\n              result = outcome.response;\n              _context36.next = 47;\n              break;\n            case 13:\n              if (!true // eslint-disable-line no-constant-condition\n              ) {\n                _context36.next = 27;\n                break;\n              }\n              _context36.next = 16;\n              return this.getSignatureStatus(signature);\n            case 16:\n              status = _context36.sent;\n              if (!(status == null)) {\n                _context36.next = 19;\n                break;\n              }\n              return _context36.abrupt(\"break\", 27);\n            case 19:\n              if (!(status.context.slot < ((_outcome$slotInWhichN = outcome.slotInWhichNonceDidAdvance) !== null && _outcome$slotInWhichN !== void 0 ? _outcome$slotInWhichN : minContextSlot))) {\n                _context36.next = 23;\n                break;\n              }\n              _context36.next = 22;\n              return sleep(400);\n            case 22:\n              return _context36.abrupt(\"continue\", 13);\n            case 23:\n              signatureStatus = status;\n              return _context36.abrupt(\"break\", 27);\n            case 27:\n              if (!((_signatureStatus = signatureStatus) !== null && _signatureStatus !== void 0 && _signatureStatus.value)) {\n                _context36.next = 46;\n                break;\n              }\n              commitmentForStatus = commitment || 'finalized';\n              confirmationStatus = signatureStatus.value.confirmationStatus;\n              _context36.t0 = commitmentForStatus;\n              _context36.next = _context36.t0 === 'processed' ? 33 : _context36.t0 === 'recent' ? 33 : _context36.t0 === 'confirmed' ? 36 : _context36.t0 === 'single' ? 36 : _context36.t0 === 'singleGossip' ? 36 : _context36.t0 === 'finalized' ? 39 : _context36.t0 === 'max' ? 39 : _context36.t0 === 'root' ? 39 : 42;\n              break;\n            case 33:\n              if (!(confirmationStatus !== 'processed' && confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized')) {\n                _context36.next = 35;\n                break;\n              }\n              throw new TransactionExpiredNonceInvalidError(signature);\n            case 35:\n              return _context36.abrupt(\"break\", 43);\n            case 36:\n              if (!(confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized')) {\n                _context36.next = 38;\n                break;\n              }\n              throw new TransactionExpiredNonceInvalidError(signature);\n            case 38:\n              return _context36.abrupt(\"break\", 43);\n            case 39:\n              if (!(confirmationStatus !== 'finalized')) {\n                _context36.next = 41;\n                break;\n              }\n              throw new TransactionExpiredNonceInvalidError(signature);\n            case 41:\n              return _context36.abrupt(\"break\", 43);\n            case 42:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              (function (_) {})(commitmentForStatus);\n            case 43:\n              result = {\n                context: signatureStatus.context,\n                value: {\n                  err: signatureStatus.value.err\n                }\n              };\n              _context36.next = 47;\n              break;\n            case 46:\n              throw new TransactionExpiredNonceInvalidError(signature);\n            case 47:\n              _context36.prev = 47;\n              done = true;\n              abortConfirmation();\n              return _context36.finish(47);\n            case 51:\n              return _context36.abrupt(\"return\", result);\n            case 52:\n            case \"end\":\n              return _context36.stop();\n          }\n        }, _callee36, this, [[5,, 47, 51]]);\n      }));\n      function confirmTransactionUsingDurableNonceStrategy(_x63) {\n        return _confirmTransactionUsingDurableNonceStrategy.apply(this, arguments);\n      }\n      return confirmTransactionUsingDurableNonceStrategy;\n    }()\n  }, {\n    key: \"confirmTransactionUsingLegacyTimeoutStrategy\",\n    value: function () {\n      var _confirmTransactionUsingLegacyTimeoutStrategy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee37(_ref33) {\n        var _this17 = this;\n        var commitment, signature, timeoutId, expiryPromise, _this$getTransactionC3, abortConfirmation, confirmationPromise, result, outcome;\n        return _regeneratorRuntime().wrap(function _callee37$(_context37) {\n          while (1) switch (_context37.prev = _context37.next) {\n            case 0:\n              commitment = _ref33.commitment, signature = _ref33.signature;\n              expiryPromise = new Promise(function (resolve) {\n                var timeoutMs = _this17._confirmTransactionInitialTimeout || 60 * 1000;\n                switch (commitment) {\n                  case 'processed':\n                  case 'recent':\n                  case 'single':\n                  case 'confirmed':\n                  case 'singleGossip':\n                    {\n                      timeoutMs = _this17._confirmTransactionInitialTimeout || 30 * 1000;\n                      break;\n                    }\n                }\n                timeoutId = setTimeout(function () {\n                  return resolve({\n                    __type: TransactionStatus.TIMED_OUT,\n                    timeoutMs: timeoutMs\n                  });\n                }, timeoutMs);\n              });\n              _this$getTransactionC3 = this.getTransactionConfirmationPromise({\n                commitment: commitment,\n                signature: signature\n              }), abortConfirmation = _this$getTransactionC3.abortConfirmation, confirmationPromise = _this$getTransactionC3.confirmationPromise;\n              _context37.prev = 3;\n              _context37.next = 6;\n              return Promise.race([confirmationPromise, expiryPromise]);\n            case 6:\n              outcome = _context37.sent;\n              if (!(outcome.__type === TransactionStatus.PROCESSED)) {\n                _context37.next = 11;\n                break;\n              }\n              result = outcome.response;\n              _context37.next = 12;\n              break;\n            case 11:\n              throw new TransactionExpiredTimeoutError(signature, outcome.timeoutMs / 1000);\n            case 12:\n              _context37.prev = 12;\n              clearTimeout(timeoutId);\n              abortConfirmation();\n              return _context37.finish(12);\n            case 16:\n              return _context37.abrupt(\"return\", result);\n            case 17:\n            case \"end\":\n              return _context37.stop();\n          }\n        }, _callee37, this, [[3,, 12, 16]]);\n      }));\n      function confirmTransactionUsingLegacyTimeoutStrategy(_x64) {\n        return _confirmTransactionUsingLegacyTimeoutStrategy.apply(this, arguments);\n      }\n      return confirmTransactionUsingLegacyTimeoutStrategy;\n    }()\n    /**\n     * Return the list of nodes that are currently participating in the cluster\n     */\n  }, {\n    key: \"getClusterNodes\",\n    value: function () {\n      var _getClusterNodes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee38() {\n        var unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee38$(_context38) {\n          while (1) switch (_context38.prev = _context38.next) {\n            case 0:\n              _context38.next = 2;\n              return this._rpcRequest('getClusterNodes', []);\n            case 2:\n              unsafeRes = _context38.sent;\n              res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n              if (!('error' in res)) {\n                _context38.next = 6;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n            case 6:\n              return _context38.abrupt(\"return\", res.result);\n            case 7:\n            case \"end\":\n              return _context38.stop();\n          }\n        }, _callee38, this);\n      }));\n      function getClusterNodes() {\n        return _getClusterNodes.apply(this, arguments);\n      }\n      return getClusterNodes;\n    }()\n    /**\n     * Return the list of nodes that are currently participating in the cluster\n     */\n  }, {\n    key: \"getVoteAccounts\",\n    value: function () {\n      var _getVoteAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee39(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee39$(_context39) {\n          while (1) switch (_context39.prev = _context39.next) {\n            case 0:\n              args = this._buildArgs([], commitment);\n              _context39.next = 3;\n              return this._rpcRequest('getVoteAccounts', args);\n            case 3:\n              unsafeRes = _context39.sent;\n              res = create(unsafeRes, GetVoteAccounts);\n              if (!('error' in res)) {\n                _context39.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n            case 7:\n              return _context39.abrupt(\"return\", res.result);\n            case 8:\n            case \"end\":\n              return _context39.stop();\n          }\n        }, _callee39, this);\n      }));\n      function getVoteAccounts(_x65) {\n        return _getVoteAccounts.apply(this, arguments);\n      }\n      return getVoteAccounts;\n    }()\n    /**\n     * Fetch the current slot that the node is processing\n     */\n  }, {\n    key: \"getSlot\",\n    value: function () {\n      var _getSlot = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee40(commitmentOrConfig) {\n        var _extractCommitmentFro10, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee40$(_context40) {\n          while (1) switch (_context40.prev = _context40.next) {\n            case 0:\n              _extractCommitmentFro10 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro10.commitment, config = _extractCommitmentFro10.config;\n              args = this._buildArgs([], commitment, undefined\n              /* encoding */, config);\n              _context40.next = 4;\n              return this._rpcRequest('getSlot', args);\n            case 4:\n              unsafeRes = _context40.sent;\n              res = create(unsafeRes, jsonRpcResult(number()));\n              if (!('error' in res)) {\n                _context40.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n            case 8:\n              return _context40.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context40.stop();\n          }\n        }, _callee40, this);\n      }));\n      function getSlot(_x66) {\n        return _getSlot.apply(this, arguments);\n      }\n      return getSlot;\n    }()\n    /**\n     * Fetch the current slot leader of the cluster\n     */\n  }, {\n    key: \"getSlotLeader\",\n    value: function () {\n      var _getSlotLeader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee41(commitmentOrConfig) {\n        var _extractCommitmentFro11, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee41$(_context41) {\n          while (1) switch (_context41.prev = _context41.next) {\n            case 0:\n              _extractCommitmentFro11 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro11.commitment, config = _extractCommitmentFro11.config;\n              args = this._buildArgs([], commitment, undefined\n              /* encoding */, config);\n              _context41.next = 4;\n              return this._rpcRequest('getSlotLeader', args);\n            case 4:\n              unsafeRes = _context41.sent;\n              res = create(unsafeRes, jsonRpcResult(string()));\n              if (!('error' in res)) {\n                _context41.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n            case 8:\n              return _context41.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context41.stop();\n          }\n        }, _callee41, this);\n      }));\n      function getSlotLeader(_x67) {\n        return _getSlotLeader.apply(this, arguments);\n      }\n      return getSlotLeader;\n    }()\n    /**\n     * Fetch `limit` number of slot leaders starting from `startSlot`\n     *\n     * @param startSlot fetch slot leaders starting from this slot\n     * @param limit number of slot leaders to return\n     */\n  }, {\n    key: \"getSlotLeaders\",\n    value: function () {\n      var _getSlotLeaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee42(startSlot, limit) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee42$(_context42) {\n          while (1) switch (_context42.prev = _context42.next) {\n            case 0:\n              args = [startSlot, limit];\n              _context42.next = 3;\n              return this._rpcRequest('getSlotLeaders', args);\n            case 3:\n              unsafeRes = _context42.sent;\n              res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n              if (!('error' in res)) {\n                _context42.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n            case 7:\n              return _context42.abrupt(\"return\", res.result);\n            case 8:\n            case \"end\":\n              return _context42.stop();\n          }\n        }, _callee42, this);\n      }));\n      function getSlotLeaders(_x68, _x69) {\n        return _getSlotLeaders.apply(this, arguments);\n      }\n      return getSlotLeaders;\n    }()\n    /**\n     * Fetch the current status of a signature\n     */\n  }, {\n    key: \"getSignatureStatus\",\n    value: function () {\n      var _getSignatureStatus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee43(signature, config) {\n        var _yield$this$getSignat, context, values, value;\n        return _regeneratorRuntime().wrap(function _callee43$(_context43) {\n          while (1) switch (_context43.prev = _context43.next) {\n            case 0:\n              _context43.next = 2;\n              return this.getSignatureStatuses([signature], config);\n            case 2:\n              _yield$this$getSignat = _context43.sent;\n              context = _yield$this$getSignat.context;\n              values = _yield$this$getSignat.value;\n              assert(values.length === 1);\n              value = values[0];\n              return _context43.abrupt(\"return\", {\n                context: context,\n                value: value\n              });\n            case 8:\n            case \"end\":\n              return _context43.stop();\n          }\n        }, _callee43, this);\n      }));\n      function getSignatureStatus(_x70, _x71) {\n        return _getSignatureStatus.apply(this, arguments);\n      }\n      return getSignatureStatus;\n    }()\n    /**\n     * Fetch the current statuses of a batch of signatures\n     */\n  }, {\n    key: \"getSignatureStatuses\",\n    value: function () {\n      var _getSignatureStatuses = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee44(signatures, config) {\n        var params, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee44$(_context44) {\n          while (1) switch (_context44.prev = _context44.next) {\n            case 0:\n              params = [signatures];\n              if (config) {\n                params.push(config);\n              }\n              _context44.next = 4;\n              return this._rpcRequest('getSignatureStatuses', params);\n            case 4:\n              unsafeRes = _context44.sent;\n              res = create(unsafeRes, GetSignatureStatusesRpcResult);\n              if (!('error' in res)) {\n                _context44.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n            case 8:\n              return _context44.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context44.stop();\n          }\n        }, _callee44, this);\n      }));\n      function getSignatureStatuses(_x72, _x73) {\n        return _getSignatureStatuses.apply(this, arguments);\n      }\n      return getSignatureStatuses;\n    }()\n    /**\n     * Fetch the current transaction count of the cluster\n     */\n  }, {\n    key: \"getTransactionCount\",\n    value: function () {\n      var _getTransactionCount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee45(commitmentOrConfig) {\n        var _extractCommitmentFro12, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee45$(_context45) {\n          while (1) switch (_context45.prev = _context45.next) {\n            case 0:\n              _extractCommitmentFro12 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro12.commitment, config = _extractCommitmentFro12.config;\n              args = this._buildArgs([], commitment, undefined\n              /* encoding */, config);\n              _context45.next = 4;\n              return this._rpcRequest('getTransactionCount', args);\n            case 4:\n              unsafeRes = _context45.sent;\n              res = create(unsafeRes, jsonRpcResult(number()));\n              if (!('error' in res)) {\n                _context45.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get transaction count');\n            case 8:\n              return _context45.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context45.stop();\n          }\n        }, _callee45, this);\n      }));\n      function getTransactionCount(_x74) {\n        return _getTransactionCount.apply(this, arguments);\n      }\n      return getTransactionCount;\n    }()\n    /**\n     * Fetch the current total currency supply of the cluster in lamports\n     *\n     * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n     */\n  }, {\n    key: \"getTotalSupply\",\n    value: function () {\n      var _getTotalSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee46(commitment) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee46$(_context46) {\n          while (1) switch (_context46.prev = _context46.next) {\n            case 0:\n              _context46.next = 2;\n              return this.getSupply({\n                commitment: commitment,\n                excludeNonCirculatingAccountsList: true\n              });\n            case 2:\n              result = _context46.sent;\n              return _context46.abrupt(\"return\", result.value.total);\n            case 4:\n            case \"end\":\n              return _context46.stop();\n          }\n        }, _callee46, this);\n      }));\n      function getTotalSupply(_x75) {\n        return _getTotalSupply.apply(this, arguments);\n      }\n      return getTotalSupply;\n    }()\n    /**\n     * Fetch the cluster InflationGovernor parameters\n     */\n  }, {\n    key: \"getInflationGovernor\",\n    value: function () {\n      var _getInflationGovernor = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee47(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee47$(_context47) {\n          while (1) switch (_context47.prev = _context47.next) {\n            case 0:\n              args = this._buildArgs([], commitment);\n              _context47.next = 3;\n              return this._rpcRequest('getInflationGovernor', args);\n            case 3:\n              unsafeRes = _context47.sent;\n              res = create(unsafeRes, GetInflationGovernorRpcResult);\n              if (!('error' in res)) {\n                _context47.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n            case 7:\n              return _context47.abrupt(\"return\", res.result);\n            case 8:\n            case \"end\":\n              return _context47.stop();\n          }\n        }, _callee47, this);\n      }));\n      function getInflationGovernor(_x76) {\n        return _getInflationGovernor.apply(this, arguments);\n      }\n      return getInflationGovernor;\n    }()\n    /**\n     * Fetch the inflation reward for a list of addresses for an epoch\n     */\n  }, {\n    key: \"getInflationReward\",\n    value: function () {\n      var _getInflationReward = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee48(addresses, epoch, commitmentOrConfig) {\n        var _extractCommitmentFro13, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee48$(_context48) {\n          while (1) switch (_context48.prev = _context48.next) {\n            case 0:\n              _extractCommitmentFro13 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro13.commitment, config = _extractCommitmentFro13.config;\n              args = this._buildArgs([addresses.map(function (pubkey) {\n                return pubkey.toBase58();\n              })], commitment, undefined\n              /* encoding */, _objectSpread(_objectSpread({}, config), {}, {\n                epoch: epoch != null ? epoch : config === null || config === void 0 ? void 0 : config.epoch\n              }));\n              _context48.next = 4;\n              return this._rpcRequest('getInflationReward', args);\n            case 4:\n              unsafeRes = _context48.sent;\n              res = create(unsafeRes, GetInflationRewardResult);\n              if (!('error' in res)) {\n                _context48.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n            case 8:\n              return _context48.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context48.stop();\n          }\n        }, _callee48, this);\n      }));\n      function getInflationReward(_x77, _x78, _x79) {\n        return _getInflationReward.apply(this, arguments);\n      }\n      return getInflationReward;\n    }()\n    /**\n     * Fetch the specific inflation values for the current epoch\n     */\n  }, {\n    key: \"getInflationRate\",\n    value: function () {\n      var _getInflationRate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee49() {\n        var unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee49$(_context49) {\n          while (1) switch (_context49.prev = _context49.next) {\n            case 0:\n              _context49.next = 2;\n              return this._rpcRequest('getInflationRate', []);\n            case 2:\n              unsafeRes = _context49.sent;\n              res = create(unsafeRes, GetInflationRateRpcResult);\n              if (!('error' in res)) {\n                _context49.next = 6;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n            case 6:\n              return _context49.abrupt(\"return\", res.result);\n            case 7:\n            case \"end\":\n              return _context49.stop();\n          }\n        }, _callee49, this);\n      }));\n      function getInflationRate() {\n        return _getInflationRate.apply(this, arguments);\n      }\n      return getInflationRate;\n    }()\n    /**\n     * Fetch the Epoch Info parameters\n     */\n  }, {\n    key: \"getEpochInfo\",\n    value: function () {\n      var _getEpochInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee50(commitmentOrConfig) {\n        var _extractCommitmentFro14, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee50$(_context50) {\n          while (1) switch (_context50.prev = _context50.next) {\n            case 0:\n              _extractCommitmentFro14 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro14.commitment, config = _extractCommitmentFro14.config;\n              args = this._buildArgs([], commitment, undefined\n              /* encoding */, config);\n              _context50.next = 4;\n              return this._rpcRequest('getEpochInfo', args);\n            case 4:\n              unsafeRes = _context50.sent;\n              res = create(unsafeRes, GetEpochInfoRpcResult);\n              if (!('error' in res)) {\n                _context50.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n            case 8:\n              return _context50.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context50.stop();\n          }\n        }, _callee50, this);\n      }));\n      function getEpochInfo(_x80) {\n        return _getEpochInfo.apply(this, arguments);\n      }\n      return getEpochInfo;\n    }()\n    /**\n     * Fetch the Epoch Schedule parameters\n     */\n  }, {\n    key: \"getEpochSchedule\",\n    value: function () {\n      var _getEpochSchedule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee51() {\n        var unsafeRes, res, epochSchedule;\n        return _regeneratorRuntime().wrap(function _callee51$(_context51) {\n          while (1) switch (_context51.prev = _context51.next) {\n            case 0:\n              _context51.next = 2;\n              return this._rpcRequest('getEpochSchedule', []);\n            case 2:\n              unsafeRes = _context51.sent;\n              res = create(unsafeRes, GetEpochScheduleRpcResult);\n              if (!('error' in res)) {\n                _context51.next = 6;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n            case 6:\n              epochSchedule = res.result;\n              return _context51.abrupt(\"return\", new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot));\n            case 8:\n            case \"end\":\n              return _context51.stop();\n          }\n        }, _callee51, this);\n      }));\n      function getEpochSchedule() {\n        return _getEpochSchedule.apply(this, arguments);\n      }\n      return getEpochSchedule;\n    }()\n    /**\n     * Fetch the leader schedule for the current epoch\n     * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n     */\n  }, {\n    key: \"getLeaderSchedule\",\n    value: function () {\n      var _getLeaderSchedule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee52() {\n        var unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee52$(_context52) {\n          while (1) switch (_context52.prev = _context52.next) {\n            case 0:\n              _context52.next = 2;\n              return this._rpcRequest('getLeaderSchedule', []);\n            case 2:\n              unsafeRes = _context52.sent;\n              res = create(unsafeRes, GetLeaderScheduleRpcResult);\n              if (!('error' in res)) {\n                _context52.next = 6;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n            case 6:\n              return _context52.abrupt(\"return\", res.result);\n            case 7:\n            case \"end\":\n              return _context52.stop();\n          }\n        }, _callee52, this);\n      }));\n      function getLeaderSchedule() {\n        return _getLeaderSchedule.apply(this, arguments);\n      }\n      return getLeaderSchedule;\n    }()\n    /**\n     * Fetch the minimum balance needed to exempt an account of `dataLength`\n     * size from rent\n     */\n  }, {\n    key: \"getMinimumBalanceForRentExemption\",\n    value: function () {\n      var _getMinimumBalanceForRentExemption = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee53(dataLength, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee53$(_context53) {\n          while (1) switch (_context53.prev = _context53.next) {\n            case 0:\n              args = this._buildArgs([dataLength], commitment);\n              _context53.next = 3;\n              return this._rpcRequest('getMinimumBalanceForRentExemption', args);\n            case 3:\n              unsafeRes = _context53.sent;\n              res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n              if (!('error' in res)) {\n                _context53.next = 8;\n                break;\n              }\n              console.warn('Unable to fetch minimum balance for rent exemption');\n              return _context53.abrupt(\"return\", 0);\n            case 8:\n              return _context53.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context53.stop();\n          }\n        }, _callee53, this);\n      }));\n      function getMinimumBalanceForRentExemption(_x81, _x82) {\n        return _getMinimumBalanceForRentExemption.apply(this, arguments);\n      }\n      return getMinimumBalanceForRentExemption;\n    }()\n    /**\n     * Fetch a recent blockhash from the cluster, return with context\n     * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n     */\n  }, {\n    key: \"getRecentBlockhashAndContext\",\n    value: function () {\n      var _getRecentBlockhashAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee54(commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee54$(_context54) {\n          while (1) switch (_context54.prev = _context54.next) {\n            case 0:\n              args = this._buildArgs([], commitment);\n              _context54.next = 3;\n              return this._rpcRequest('getRecentBlockhash', args);\n            case 3:\n              unsafeRes = _context54.sent;\n              res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n              if (!('error' in res)) {\n                _context54.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n            case 7:\n              return _context54.abrupt(\"return\", res.result);\n            case 8:\n            case \"end\":\n              return _context54.stop();\n          }\n        }, _callee54, this);\n      }));\n      function getRecentBlockhashAndContext(_x83) {\n        return _getRecentBlockhashAndContext.apply(this, arguments);\n      }\n      return getRecentBlockhashAndContext;\n    }()\n    /**\n     * Fetch recent performance samples\n     * @return {Promise<Array<PerfSample>>}\n     */\n  }, {\n    key: \"getRecentPerformanceSamples\",\n    value: function () {\n      var _getRecentPerformanceSamples = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee55(limit) {\n        var unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee55$(_context55) {\n          while (1) switch (_context55.prev = _context55.next) {\n            case 0:\n              _context55.next = 2;\n              return this._rpcRequest('getRecentPerformanceSamples', limit ? [limit] : []);\n            case 2:\n              unsafeRes = _context55.sent;\n              res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n              if (!('error' in res)) {\n                _context55.next = 6;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get recent performance samples');\n            case 6:\n              return _context55.abrupt(\"return\", res.result);\n            case 7:\n            case \"end\":\n              return _context55.stop();\n          }\n        }, _callee55, this);\n      }));\n      function getRecentPerformanceSamples(_x84) {\n        return _getRecentPerformanceSamples.apply(this, arguments);\n      }\n      return getRecentPerformanceSamples;\n    }()\n    /**\n     * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n     */\n  }, {\n    key: \"getFeeCalculatorForBlockhash\",\n    value: function () {\n      var _getFeeCalculatorForBlockhash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee56(blockhash, commitment) {\n        var args, unsafeRes, res, _res$result, context, value;\n        return _regeneratorRuntime().wrap(function _callee56$(_context56) {\n          while (1) switch (_context56.prev = _context56.next) {\n            case 0:\n              args = this._buildArgs([blockhash], commitment);\n              _context56.next = 3;\n              return this._rpcRequest('getFeeCalculatorForBlockhash', args);\n            case 3:\n              unsafeRes = _context56.sent;\n              res = create(unsafeRes, GetFeeCalculatorRpcResult);\n              if (!('error' in res)) {\n                _context56.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n            case 7:\n              _res$result = res.result, context = _res$result.context, value = _res$result.value;\n              return _context56.abrupt(\"return\", {\n                context: context,\n                value: value !== null ? value.feeCalculator : null\n              });\n            case 9:\n            case \"end\":\n              return _context56.stop();\n          }\n        }, _callee56, this);\n      }));\n      function getFeeCalculatorForBlockhash(_x85, _x86) {\n        return _getFeeCalculatorForBlockhash.apply(this, arguments);\n      }\n      return getFeeCalculatorForBlockhash;\n    }()\n    /**\n     * Fetch the fee for a message from the cluster, return with context\n     */\n  }, {\n    key: \"getFeeForMessage\",\n    value: function () {\n      var _getFeeForMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee57(message, commitment) {\n        var wireMessage, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee57$(_context57) {\n          while (1) switch (_context57.prev = _context57.next) {\n            case 0:\n              wireMessage = toBuffer(message.serialize()).toString('base64');\n              args = this._buildArgs([wireMessage], commitment);\n              _context57.next = 4;\n              return this._rpcRequest('getFeeForMessage', args);\n            case 4:\n              unsafeRes = _context57.sent;\n              res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n              if (!('error' in res)) {\n                _context57.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n            case 8:\n              if (!(res.result === null)) {\n                _context57.next = 10;\n                break;\n              }\n              throw new Error('invalid blockhash');\n            case 10:\n              return _context57.abrupt(\"return\", res.result);\n            case 11:\n            case \"end\":\n              return _context57.stop();\n          }\n        }, _callee57, this);\n      }));\n      function getFeeForMessage(_x87, _x88) {\n        return _getFeeForMessage.apply(this, arguments);\n      }\n      return getFeeForMessage;\n    }()\n    /**\n     * Fetch a recent blockhash from the cluster\n     * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n     */\n  }, {\n    key: \"getRecentBlockhash\",\n    value: function () {\n      var _getRecentBlockhash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee58(commitment) {\n        var res;\n        return _regeneratorRuntime().wrap(function _callee58$(_context58) {\n          while (1) switch (_context58.prev = _context58.next) {\n            case 0:\n              _context58.prev = 0;\n              _context58.next = 3;\n              return this.getRecentBlockhashAndContext(commitment);\n            case 3:\n              res = _context58.sent;\n              return _context58.abrupt(\"return\", res.value);\n            case 7:\n              _context58.prev = 7;\n              _context58.t0 = _context58[\"catch\"](0);\n              throw new Error('failed to get recent blockhash: ' + _context58.t0);\n            case 10:\n            case \"end\":\n              return _context58.stop();\n          }\n        }, _callee58, this, [[0, 7]]);\n      }));\n      function getRecentBlockhash(_x89) {\n        return _getRecentBlockhash.apply(this, arguments);\n      }\n      return getRecentBlockhash;\n    }()\n    /**\n     * Fetch the latest blockhash from the cluster\n     * @return {Promise<BlockhashWithExpiryBlockHeight>}\n     */\n  }, {\n    key: \"getLatestBlockhash\",\n    value: function () {\n      var _getLatestBlockhash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee59(commitmentOrConfig) {\n        var res;\n        return _regeneratorRuntime().wrap(function _callee59$(_context59) {\n          while (1) switch (_context59.prev = _context59.next) {\n            case 0:\n              _context59.prev = 0;\n              _context59.next = 3;\n              return this.getLatestBlockhashAndContext(commitmentOrConfig);\n            case 3:\n              res = _context59.sent;\n              return _context59.abrupt(\"return\", res.value);\n            case 7:\n              _context59.prev = 7;\n              _context59.t0 = _context59[\"catch\"](0);\n              throw new Error('failed to get recent blockhash: ' + _context59.t0);\n            case 10:\n            case \"end\":\n              return _context59.stop();\n          }\n        }, _callee59, this, [[0, 7]]);\n      }));\n      function getLatestBlockhash(_x90) {\n        return _getLatestBlockhash.apply(this, arguments);\n      }\n      return getLatestBlockhash;\n    }()\n    /**\n     * Fetch the latest blockhash from the cluster\n     * @return {Promise<BlockhashWithExpiryBlockHeight>}\n     */\n  }, {\n    key: \"getLatestBlockhashAndContext\",\n    value: function () {\n      var _getLatestBlockhashAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee60(commitmentOrConfig) {\n        var _extractCommitmentFro15, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee60$(_context60) {\n          while (1) switch (_context60.prev = _context60.next) {\n            case 0:\n              _extractCommitmentFro15 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro15.commitment, config = _extractCommitmentFro15.config;\n              args = this._buildArgs([], commitment, undefined\n              /* encoding */, config);\n              _context60.next = 4;\n              return this._rpcRequest('getLatestBlockhash', args);\n            case 4:\n              unsafeRes = _context60.sent;\n              res = create(unsafeRes, GetLatestBlockhashRpcResult);\n              if (!('error' in res)) {\n                _context60.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n            case 8:\n              return _context60.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context60.stop();\n          }\n        }, _callee60, this);\n      }));\n      function getLatestBlockhashAndContext(_x91) {\n        return _getLatestBlockhashAndContext.apply(this, arguments);\n      }\n      return getLatestBlockhashAndContext;\n    }()\n    /**\n     * Fetch the node version\n     */\n  }, {\n    key: \"getVersion\",\n    value: function () {\n      var _getVersion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee61() {\n        var unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee61$(_context61) {\n          while (1) switch (_context61.prev = _context61.next) {\n            case 0:\n              _context61.next = 2;\n              return this._rpcRequest('getVersion', []);\n            case 2:\n              unsafeRes = _context61.sent;\n              res = create(unsafeRes, jsonRpcResult(VersionResult));\n              if (!('error' in res)) {\n                _context61.next = 6;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get version');\n            case 6:\n              return _context61.abrupt(\"return\", res.result);\n            case 7:\n            case \"end\":\n              return _context61.stop();\n          }\n        }, _callee61, this);\n      }));\n      function getVersion() {\n        return _getVersion.apply(this, arguments);\n      }\n      return getVersion;\n    }()\n    /**\n     * Fetch the genesis hash\n     */\n  }, {\n    key: \"getGenesisHash\",\n    value: function () {\n      var _getGenesisHash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee62() {\n        var unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee62$(_context62) {\n          while (1) switch (_context62.prev = _context62.next) {\n            case 0:\n              _context62.next = 2;\n              return this._rpcRequest('getGenesisHash', []);\n            case 2:\n              unsafeRes = _context62.sent;\n              res = create(unsafeRes, jsonRpcResult(string()));\n              if (!('error' in res)) {\n                _context62.next = 6;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n            case 6:\n              return _context62.abrupt(\"return\", res.result);\n            case 7:\n            case \"end\":\n              return _context62.stop();\n          }\n        }, _callee62, this);\n      }));\n      function getGenesisHash() {\n        return _getGenesisHash.apply(this, arguments);\n      }\n      return getGenesisHash;\n    }()\n    /**\n     * Fetch a processed block from the cluster.\n     *\n     * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n     * setting the `maxSupportedTransactionVersion` property.\n     */\n    /**\n     * Fetch a processed block from the cluster.\n     */\n    // eslint-disable-next-line no-dupe-class-members\n  }, {\n    key: \"getBlock\",\n    value: function () {\n      var _getBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee63(slot, rawConfig) {\n        var _extractCommitmentFro16, commitment, config, args, unsafeRes, res, _res, _res2, result;\n        return _regeneratorRuntime().wrap(function _callee63$(_context63) {\n          while (1) switch (_context63.prev = _context63.next) {\n            case 0:\n              _extractCommitmentFro16 = extractCommitmentFromConfig(rawConfig), commitment = _extractCommitmentFro16.commitment, config = _extractCommitmentFro16.config;\n              args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined\n              /* encoding */, config);\n              _context63.next = 4;\n              return this._rpcRequest('getBlock', args);\n            case 4:\n              unsafeRes = _context63.sent;\n              _context63.prev = 5;\n              _context63.t0 = config === null || config === void 0 ? void 0 : config.transactionDetails;\n              _context63.next = _context63.t0 === 'accounts' ? 9 : _context63.t0 === 'none' ? 13 : 17;\n              break;\n            case 9:\n              res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n              if (!('error' in res)) {\n                _context63.next = 12;\n                break;\n              }\n              throw res.error;\n            case 12:\n              return _context63.abrupt(\"return\", res.result);\n            case 13:\n              _res = create(unsafeRes, GetNoneModeBlockRpcResult);\n              if (!('error' in _res)) {\n                _context63.next = 16;\n                break;\n              }\n              throw _res.error;\n            case 16:\n              return _context63.abrupt(\"return\", _res.result);\n            case 17:\n              _res2 = create(unsafeRes, GetBlockRpcResult);\n              if (!('error' in _res2)) {\n                _context63.next = 20;\n                break;\n              }\n              throw _res2.error;\n            case 20:\n              result = _res2.result;\n              return _context63.abrupt(\"return\", result ? _objectSpread(_objectSpread({}, result), {}, {\n                transactions: result.transactions.map(function (_ref34) {\n                  var transaction = _ref34.transaction,\n                    meta = _ref34.meta,\n                    version = _ref34.version;\n                  return {\n                    meta: meta,\n                    transaction: _objectSpread(_objectSpread({}, transaction), {}, {\n                      message: versionedMessageFromResponse(version, transaction.message)\n                    }),\n                    version: version\n                  };\n                })\n              }) : null);\n            case 22:\n              _context63.next = 27;\n              break;\n            case 24:\n              _context63.prev = 24;\n              _context63.t1 = _context63[\"catch\"](5);\n              throw new SolanaJSONRPCError(_context63.t1, 'failed to get confirmed block');\n            case 27:\n            case \"end\":\n              return _context63.stop();\n          }\n        }, _callee63, this, [[5, 24]]);\n      }));\n      function getBlock(_x92, _x93) {\n        return _getBlock.apply(this, arguments);\n      }\n      return getBlock;\n    }()\n    /**\n     * Fetch parsed transaction details for a confirmed or finalized block\n     */\n    // eslint-disable-next-line no-dupe-class-members\n  }, {\n    key: \"getParsedBlock\",\n    value: function () {\n      var _getParsedBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee64(slot, rawConfig) {\n        var _extractCommitmentFro17, commitment, config, args, unsafeRes, res, _res3, _res4;\n        return _regeneratorRuntime().wrap(function _callee64$(_context64) {\n          while (1) switch (_context64.prev = _context64.next) {\n            case 0:\n              _extractCommitmentFro17 = extractCommitmentFromConfig(rawConfig), commitment = _extractCommitmentFro17.commitment, config = _extractCommitmentFro17.config;\n              args = this._buildArgsAtLeastConfirmed([slot], commitment, 'jsonParsed', config);\n              _context64.next = 4;\n              return this._rpcRequest('getBlock', args);\n            case 4:\n              unsafeRes = _context64.sent;\n              _context64.prev = 5;\n              _context64.t0 = config === null || config === void 0 ? void 0 : config.transactionDetails;\n              _context64.next = _context64.t0 === 'accounts' ? 9 : _context64.t0 === 'none' ? 13 : 17;\n              break;\n            case 9:\n              res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n              if (!('error' in res)) {\n                _context64.next = 12;\n                break;\n              }\n              throw res.error;\n            case 12:\n              return _context64.abrupt(\"return\", res.result);\n            case 13:\n              _res3 = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n              if (!('error' in _res3)) {\n                _context64.next = 16;\n                break;\n              }\n              throw _res3.error;\n            case 16:\n              return _context64.abrupt(\"return\", _res3.result);\n            case 17:\n              _res4 = create(unsafeRes, GetParsedBlockRpcResult);\n              if (!('error' in _res4)) {\n                _context64.next = 20;\n                break;\n              }\n              throw _res4.error;\n            case 20:\n              return _context64.abrupt(\"return\", _res4.result);\n            case 21:\n              _context64.next = 26;\n              break;\n            case 23:\n              _context64.prev = 23;\n              _context64.t1 = _context64[\"catch\"](5);\n              throw new SolanaJSONRPCError(_context64.t1, 'failed to get block');\n            case 26:\n            case \"end\":\n              return _context64.stop();\n          }\n        }, _callee64, this, [[5, 23]]);\n      }));\n      function getParsedBlock(_x94, _x95) {\n        return _getParsedBlock.apply(this, arguments);\n      }\n      return getParsedBlock;\n    }()\n    /*\n     * Returns the current block height of the node\n     */\n  }, {\n    key: \"getBlockHeight\",\n    value: function () {\n      var _getBlockHeight = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee65(commitmentOrConfig) {\n        var _extractCommitmentFro18, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee65$(_context65) {\n          while (1) switch (_context65.prev = _context65.next) {\n            case 0:\n              _extractCommitmentFro18 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro18.commitment, config = _extractCommitmentFro18.config;\n              args = this._buildArgs([], commitment, undefined\n              /* encoding */, config);\n              _context65.next = 4;\n              return this._rpcRequest('getBlockHeight', args);\n            case 4:\n              unsafeRes = _context65.sent;\n              res = create(unsafeRes, jsonRpcResult(number()));\n              if (!('error' in res)) {\n                _context65.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get block height information');\n            case 8:\n              return _context65.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context65.stop();\n          }\n        }, _callee65, this);\n      }));\n      function getBlockHeight(_x96) {\n        return _getBlockHeight.apply(this, arguments);\n      }\n      return getBlockHeight;\n    }()\n    /*\n     * Returns recent block production information from the current or previous epoch\n     */\n  }, {\n    key: \"getBlockProduction\",\n    value: function () {\n      var _getBlockProduction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee66(configOrCommitment) {\n        var extra, commitment, c, rest, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee66$(_context66) {\n          while (1) switch (_context66.prev = _context66.next) {\n            case 0:\n              if (typeof configOrCommitment === 'string') {\n                commitment = configOrCommitment;\n              } else if (configOrCommitment) {\n                c = configOrCommitment.commitment, rest = _objectWithoutProperties(configOrCommitment, _excluded3);\n                commitment = c;\n                extra = rest;\n              }\n              args = this._buildArgs([], commitment, 'base64', extra);\n              _context66.next = 4;\n              return this._rpcRequest('getBlockProduction', args);\n            case 4:\n              unsafeRes = _context66.sent;\n              res = create(unsafeRes, BlockProductionResponseStruct);\n              if (!('error' in res)) {\n                _context66.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get block production information');\n            case 8:\n              return _context66.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context66.stop();\n          }\n        }, _callee66, this);\n      }));\n      function getBlockProduction(_x97) {\n        return _getBlockProduction.apply(this, arguments);\n      }\n      return getBlockProduction;\n    }()\n    /**\n     * Fetch a confirmed or finalized transaction from the cluster.\n     *\n     * @deprecated Instead, call `getTransaction` using a\n     * `GetVersionedTransactionConfig` by setting the\n     * `maxSupportedTransactionVersion` property.\n     */\n    /**\n     * Fetch a confirmed or finalized transaction from the cluster.\n     */\n    // eslint-disable-next-line no-dupe-class-members\n  }, {\n    key: \"getTransaction\",\n    value: function () {\n      var _getTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee67(signature, rawConfig) {\n        var _extractCommitmentFro19, commitment, config, args, unsafeRes, res, result;\n        return _regeneratorRuntime().wrap(function _callee67$(_context67) {\n          while (1) switch (_context67.prev = _context67.next) {\n            case 0:\n              _extractCommitmentFro19 = extractCommitmentFromConfig(rawConfig), commitment = _extractCommitmentFro19.commitment, config = _extractCommitmentFro19.config;\n              args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined\n              /* encoding */, config);\n              _context67.next = 4;\n              return this._rpcRequest('getTransaction', args);\n            case 4:\n              unsafeRes = _context67.sent;\n              res = create(unsafeRes, GetTransactionRpcResult);\n              if (!('error' in res)) {\n                _context67.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n            case 8:\n              result = res.result;\n              if (result) {\n                _context67.next = 11;\n                break;\n              }\n              return _context67.abrupt(\"return\", result);\n            case 11:\n              return _context67.abrupt(\"return\", _objectSpread(_objectSpread({}, result), {}, {\n                transaction: _objectSpread(_objectSpread({}, result.transaction), {}, {\n                  message: versionedMessageFromResponse(result.version, result.transaction.message)\n                })\n              }));\n            case 12:\n            case \"end\":\n              return _context67.stop();\n          }\n        }, _callee67, this);\n      }));\n      function getTransaction(_x98, _x99) {\n        return _getTransaction.apply(this, arguments);\n      }\n      return getTransaction;\n    }()\n    /**\n     * Fetch parsed transaction details for a confirmed or finalized transaction\n     */\n  }, {\n    key: \"getParsedTransaction\",\n    value: function () {\n      var _getParsedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee68(signature, commitmentOrConfig) {\n        var _extractCommitmentFro20, commitment, config, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee68$(_context68) {\n          while (1) switch (_context68.prev = _context68.next) {\n            case 0:\n              _extractCommitmentFro20 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro20.commitment, config = _extractCommitmentFro20.config;\n              args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n              _context68.next = 4;\n              return this._rpcRequest('getTransaction', args);\n            case 4:\n              unsafeRes = _context68.sent;\n              res = create(unsafeRes, GetParsedTransactionRpcResult);\n              if (!('error' in res)) {\n                _context68.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n            case 8:\n              return _context68.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context68.stop();\n          }\n        }, _callee68, this);\n      }));\n      function getParsedTransaction(_x100, _x101) {\n        return _getParsedTransaction.apply(this, arguments);\n      }\n      return getParsedTransaction;\n    }()\n    /**\n     * Fetch parsed transaction details for a batch of confirmed transactions\n     */\n  }, {\n    key: \"getParsedTransactions\",\n    value: function () {\n      var _getParsedTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee69(signatures, commitmentOrConfig) {\n        var _this18 = this;\n        var _extractCommitmentFro21, commitment, config, batch, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee69$(_context69) {\n          while (1) switch (_context69.prev = _context69.next) {\n            case 0:\n              _extractCommitmentFro21 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro21.commitment, config = _extractCommitmentFro21.config;\n              batch = signatures.map(function (signature) {\n                var args = _this18._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n                return {\n                  methodName: 'getTransaction',\n                  args: args\n                };\n              });\n              _context69.next = 4;\n              return this._rpcBatchRequest(batch);\n            case 4:\n              unsafeRes = _context69.sent;\n              res = unsafeRes.map(function (unsafeRes) {\n                var res = create(unsafeRes, GetParsedTransactionRpcResult);\n                if ('error' in res) {\n                  throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n                }\n                return res.result;\n              });\n              return _context69.abrupt(\"return\", res);\n            case 7:\n            case \"end\":\n              return _context69.stop();\n          }\n        }, _callee69, this);\n      }));\n      function getParsedTransactions(_x102, _x103) {\n        return _getParsedTransactions.apply(this, arguments);\n      }\n      return getParsedTransactions;\n    }()\n    /**\n     * Fetch transaction details for a batch of confirmed transactions.\n     * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n     *\n     * @deprecated Instead, call `getTransactions` using a\n     * `GetVersionedTransactionConfig` by setting the\n     * `maxSupportedTransactionVersion` property.\n     */\n    /**\n     * Fetch transaction details for a batch of confirmed transactions.\n     * Similar to {@link getParsedTransactions} but returns a {@link\n     * VersionedTransactionResponse}.\n     */\n    // eslint-disable-next-line no-dupe-class-members\n  }, {\n    key: \"getTransactions\",\n    value: function () {\n      var _getTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee70(signatures, commitmentOrConfig) {\n        var _this19 = this;\n        var _extractCommitmentFro22, commitment, config, batch, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee70$(_context70) {\n          while (1) switch (_context70.prev = _context70.next) {\n            case 0:\n              _extractCommitmentFro22 = extractCommitmentFromConfig(commitmentOrConfig), commitment = _extractCommitmentFro22.commitment, config = _extractCommitmentFro22.config;\n              batch = signatures.map(function (signature) {\n                var args = _this19._buildArgsAtLeastConfirmed([signature], commitment, undefined\n                /* encoding */, config);\n                return {\n                  methodName: 'getTransaction',\n                  args: args\n                };\n              });\n              _context70.next = 4;\n              return this._rpcBatchRequest(batch);\n            case 4:\n              unsafeRes = _context70.sent;\n              res = unsafeRes.map(function (unsafeRes) {\n                var res = create(unsafeRes, GetTransactionRpcResult);\n                if ('error' in res) {\n                  throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n                }\n                var result = res.result;\n                if (!result) return result;\n                return _objectSpread(_objectSpread({}, result), {}, {\n                  transaction: _objectSpread(_objectSpread({}, result.transaction), {}, {\n                    message: versionedMessageFromResponse(result.version, result.transaction.message)\n                  })\n                });\n              });\n              return _context70.abrupt(\"return\", res);\n            case 7:\n            case \"end\":\n              return _context70.stop();\n          }\n        }, _callee70, this);\n      }));\n      function getTransactions(_x104, _x105) {\n        return _getTransactions.apply(this, arguments);\n      }\n      return getTransactions;\n    }()\n    /**\n     * Fetch a list of Transactions and transaction statuses from the cluster\n     * for a confirmed block.\n     *\n     * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n     */\n  }, {\n    key: \"getConfirmedBlock\",\n    value: function () {\n      var _getConfirmedBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee71(slot, commitment) {\n        var args, unsafeRes, res, result, block;\n        return _regeneratorRuntime().wrap(function _callee71$(_context71) {\n          while (1) switch (_context71.prev = _context71.next) {\n            case 0:\n              args = this._buildArgsAtLeastConfirmed([slot], commitment);\n              _context71.next = 3;\n              return this._rpcRequest('getConfirmedBlock', args);\n            case 3:\n              unsafeRes = _context71.sent;\n              res = create(unsafeRes, GetConfirmedBlockRpcResult);\n              if (!('error' in res)) {\n                _context71.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n            case 7:\n              result = res.result;\n              if (result) {\n                _context71.next = 10;\n                break;\n              }\n              throw new Error('Confirmed block ' + slot + ' not found');\n            case 10:\n              block = _objectSpread(_objectSpread({}, result), {}, {\n                transactions: result.transactions.map(function (_ref35) {\n                  var transaction = _ref35.transaction,\n                    meta = _ref35.meta;\n                  var message = new Message(transaction.message);\n                  return {\n                    meta: meta,\n                    transaction: _objectSpread(_objectSpread({}, transaction), {}, {\n                      message: message\n                    })\n                  };\n                })\n              });\n              return _context71.abrupt(\"return\", _objectSpread(_objectSpread({}, block), {}, {\n                transactions: block.transactions.map(function (_ref36) {\n                  var transaction = _ref36.transaction,\n                    meta = _ref36.meta;\n                  return {\n                    meta: meta,\n                    transaction: Transaction.populate(transaction.message, transaction.signatures)\n                  };\n                })\n              }));\n            case 12:\n            case \"end\":\n              return _context71.stop();\n          }\n        }, _callee71, this);\n      }));\n      function getConfirmedBlock(_x106, _x107) {\n        return _getConfirmedBlock.apply(this, arguments);\n      }\n      return getConfirmedBlock;\n    }()\n    /**\n     * Fetch confirmed blocks between two slots\n     */\n  }, {\n    key: \"getBlocks\",\n    value: function () {\n      var _getBlocks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee72(startSlot, endSlot, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee72$(_context72) {\n          while (1) switch (_context72.prev = _context72.next) {\n            case 0:\n              args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n              _context72.next = 3;\n              return this._rpcRequest('getBlocks', args);\n            case 3:\n              unsafeRes = _context72.sent;\n              res = create(unsafeRes, jsonRpcResult(array(number())));\n              if (!('error' in res)) {\n                _context72.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n            case 7:\n              return _context72.abrupt(\"return\", res.result);\n            case 8:\n            case \"end\":\n              return _context72.stop();\n          }\n        }, _callee72, this);\n      }));\n      function getBlocks(_x108, _x109, _x110) {\n        return _getBlocks.apply(this, arguments);\n      }\n      return getBlocks;\n    }()\n    /**\n     * Fetch a list of Signatures from the cluster for a block, excluding rewards\n     */\n  }, {\n    key: \"getBlockSignatures\",\n    value: function () {\n      var _getBlockSignatures = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee73(slot, commitment) {\n        var args, unsafeRes, res, result;\n        return _regeneratorRuntime().wrap(function _callee73$(_context73) {\n          while (1) switch (_context73.prev = _context73.next) {\n            case 0:\n              args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n                transactionDetails: 'signatures',\n                rewards: false\n              });\n              _context73.next = 3;\n              return this._rpcRequest('getBlock', args);\n            case 3:\n              unsafeRes = _context73.sent;\n              res = create(unsafeRes, GetBlockSignaturesRpcResult);\n              if (!('error' in res)) {\n                _context73.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get block');\n            case 7:\n              result = res.result;\n              if (result) {\n                _context73.next = 10;\n                break;\n              }\n              throw new Error('Block ' + slot + ' not found');\n            case 10:\n              return _context73.abrupt(\"return\", result);\n            case 11:\n            case \"end\":\n              return _context73.stop();\n          }\n        }, _callee73, this);\n      }));\n      function getBlockSignatures(_x111, _x112) {\n        return _getBlockSignatures.apply(this, arguments);\n      }\n      return getBlockSignatures;\n    }()\n    /**\n     * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n     */\n  }, {\n    key: \"getConfirmedBlockSignatures\",\n    value: function () {\n      var _getConfirmedBlockSignatures = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee74(slot, commitment) {\n        var args, unsafeRes, res, result;\n        return _regeneratorRuntime().wrap(function _callee74$(_context74) {\n          while (1) switch (_context74.prev = _context74.next) {\n            case 0:\n              args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n                transactionDetails: 'signatures',\n                rewards: false\n              });\n              _context74.next = 3;\n              return this._rpcRequest('getConfirmedBlock', args);\n            case 3:\n              unsafeRes = _context74.sent;\n              res = create(unsafeRes, GetBlockSignaturesRpcResult);\n              if (!('error' in res)) {\n                _context74.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n            case 7:\n              result = res.result;\n              if (result) {\n                _context74.next = 10;\n                break;\n              }\n              throw new Error('Confirmed block ' + slot + ' not found');\n            case 10:\n              return _context74.abrupt(\"return\", result);\n            case 11:\n            case \"end\":\n              return _context74.stop();\n          }\n        }, _callee74, this);\n      }));\n      function getConfirmedBlockSignatures(_x113, _x114) {\n        return _getConfirmedBlockSignatures.apply(this, arguments);\n      }\n      return getConfirmedBlockSignatures;\n    }()\n    /**\n     * Fetch a transaction details for a confirmed transaction\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n     */\n  }, {\n    key: \"getConfirmedTransaction\",\n    value: function () {\n      var _getConfirmedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee75(signature, commitment) {\n        var args, unsafeRes, res, result, message, signatures;\n        return _regeneratorRuntime().wrap(function _callee75$(_context75) {\n          while (1) switch (_context75.prev = _context75.next) {\n            case 0:\n              args = this._buildArgsAtLeastConfirmed([signature], commitment);\n              _context75.next = 3;\n              return this._rpcRequest('getConfirmedTransaction', args);\n            case 3:\n              unsafeRes = _context75.sent;\n              res = create(unsafeRes, GetTransactionRpcResult);\n              if (!('error' in res)) {\n                _context75.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n            case 7:\n              result = res.result;\n              if (result) {\n                _context75.next = 10;\n                break;\n              }\n              return _context75.abrupt(\"return\", result);\n            case 10:\n              message = new Message(result.transaction.message);\n              signatures = result.transaction.signatures;\n              return _context75.abrupt(\"return\", _objectSpread(_objectSpread({}, result), {}, {\n                transaction: Transaction.populate(message, signatures)\n              }));\n            case 13:\n            case \"end\":\n              return _context75.stop();\n          }\n        }, _callee75, this);\n      }));\n      function getConfirmedTransaction(_x115, _x116) {\n        return _getConfirmedTransaction.apply(this, arguments);\n      }\n      return getConfirmedTransaction;\n    }()\n    /**\n     * Fetch parsed transaction details for a confirmed transaction\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n     */\n  }, {\n    key: \"getParsedConfirmedTransaction\",\n    value: function () {\n      var _getParsedConfirmedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee76(signature, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee76$(_context76) {\n          while (1) switch (_context76.prev = _context76.next) {\n            case 0:\n              args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n              _context76.next = 3;\n              return this._rpcRequest('getConfirmedTransaction', args);\n            case 3:\n              unsafeRes = _context76.sent;\n              res = create(unsafeRes, GetParsedTransactionRpcResult);\n              if (!('error' in res)) {\n                _context76.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transaction');\n            case 7:\n              return _context76.abrupt(\"return\", res.result);\n            case 8:\n            case \"end\":\n              return _context76.stop();\n          }\n        }, _callee76, this);\n      }));\n      function getParsedConfirmedTransaction(_x117, _x118) {\n        return _getParsedConfirmedTransaction.apply(this, arguments);\n      }\n      return getParsedConfirmedTransaction;\n    }()\n    /**\n     * Fetch parsed transaction details for a batch of confirmed transactions\n     *\n     * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n     */\n  }, {\n    key: \"getParsedConfirmedTransactions\",\n    value: function () {\n      var _getParsedConfirmedTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee77(signatures, commitment) {\n        var _this20 = this;\n        var batch, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee77$(_context77) {\n          while (1) switch (_context77.prev = _context77.next) {\n            case 0:\n              batch = signatures.map(function (signature) {\n                var args = _this20._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n                return {\n                  methodName: 'getConfirmedTransaction',\n                  args: args\n                };\n              });\n              _context77.next = 3;\n              return this._rpcBatchRequest(batch);\n            case 3:\n              unsafeRes = _context77.sent;\n              res = unsafeRes.map(function (unsafeRes) {\n                var res = create(unsafeRes, GetParsedTransactionRpcResult);\n                if ('error' in res) {\n                  throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transactions');\n                }\n                return res.result;\n              });\n              return _context77.abrupt(\"return\", res);\n            case 6:\n            case \"end\":\n              return _context77.stop();\n          }\n        }, _callee77, this);\n      }));\n      function getParsedConfirmedTransactions(_x119, _x120) {\n        return _getParsedConfirmedTransactions.apply(this, arguments);\n      }\n      return getParsedConfirmedTransactions;\n    }()\n    /**\n     * Fetch a list of all the confirmed signatures for transactions involving an address\n     * within a specified slot range. Max range allowed is 10,000 slots.\n     *\n     * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n     *\n     * @param address queried address\n     * @param startSlot start slot, inclusive\n     * @param endSlot end slot, inclusive\n     */\n  }, {\n    key: \"getConfirmedSignaturesForAddress\",\n    value: function () {\n      var _getConfirmedSignaturesForAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee78(address, startSlot, endSlot) {\n        var options, firstAvailableBlock, block, highestConfirmedRoot, _block, confirmedSignatureInfo;\n        return _regeneratorRuntime().wrap(function _callee78$(_context78) {\n          while (1) switch (_context78.prev = _context78.next) {\n            case 0:\n              options = {};\n              _context78.next = 3;\n              return this.getFirstAvailableBlock();\n            case 3:\n              firstAvailableBlock = _context78.sent;\n            case 4:\n              if ('until' in options) {\n                _context78.next = 24;\n                break;\n              }\n              startSlot--;\n              if (!(startSlot <= 0 || startSlot < firstAvailableBlock)) {\n                _context78.next = 8;\n                break;\n              }\n              return _context78.abrupt(\"break\", 24);\n            case 8:\n              _context78.prev = 8;\n              _context78.next = 11;\n              return this.getConfirmedBlockSignatures(startSlot, 'finalized');\n            case 11:\n              block = _context78.sent;\n              if (block.signatures.length > 0) {\n                options.until = block.signatures[block.signatures.length - 1].toString();\n              }\n              _context78.next = 22;\n              break;\n            case 15:\n              _context78.prev = 15;\n              _context78.t0 = _context78[\"catch\"](8);\n              if (!(_context78.t0 instanceof Error && _context78.t0.message.includes('skipped'))) {\n                _context78.next = 21;\n                break;\n              }\n              return _context78.abrupt(\"continue\", 4);\n            case 21:\n              throw _context78.t0;\n            case 22:\n              _context78.next = 4;\n              break;\n            case 24:\n              _context78.next = 26;\n              return this.getSlot('finalized');\n            case 26:\n              highestConfirmedRoot = _context78.sent;\n            case 27:\n              if ('before' in options) {\n                _context78.next = 47;\n                break;\n              }\n              endSlot++;\n              if (!(endSlot > highestConfirmedRoot)) {\n                _context78.next = 31;\n                break;\n              }\n              return _context78.abrupt(\"break\", 47);\n            case 31:\n              _context78.prev = 31;\n              _context78.next = 34;\n              return this.getConfirmedBlockSignatures(endSlot);\n            case 34:\n              _block = _context78.sent;\n              if (_block.signatures.length > 0) {\n                options.before = _block.signatures[_block.signatures.length - 1].toString();\n              }\n              _context78.next = 45;\n              break;\n            case 38:\n              _context78.prev = 38;\n              _context78.t1 = _context78[\"catch\"](31);\n              if (!(_context78.t1 instanceof Error && _context78.t1.message.includes('skipped'))) {\n                _context78.next = 44;\n                break;\n              }\n              return _context78.abrupt(\"continue\", 27);\n            case 44:\n              throw _context78.t1;\n            case 45:\n              _context78.next = 27;\n              break;\n            case 47:\n              _context78.next = 49;\n              return this.getConfirmedSignaturesForAddress2(address, options);\n            case 49:\n              confirmedSignatureInfo = _context78.sent;\n              return _context78.abrupt(\"return\", confirmedSignatureInfo.map(function (info) {\n                return info.signature;\n              }));\n            case 51:\n            case \"end\":\n              return _context78.stop();\n          }\n        }, _callee78, this, [[8, 15], [31, 38]]);\n      }));\n      function getConfirmedSignaturesForAddress(_x121, _x122, _x123) {\n        return _getConfirmedSignaturesForAddress.apply(this, arguments);\n      }\n      return getConfirmedSignaturesForAddress;\n    }()\n    /**\n     * Returns confirmed signatures for transactions involving an\n     * address backwards in time from the provided signature or most recent confirmed block\n     *\n     *\n     * @param address queried address\n     * @param options\n     */\n  }, {\n    key: \"getConfirmedSignaturesForAddress2\",\n    value: function () {\n      var _getConfirmedSignaturesForAddress2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee79(address, options, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee79$(_context79) {\n          while (1) switch (_context79.prev = _context79.next) {\n            case 0:\n              args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n              _context79.next = 3;\n              return this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n            case 3:\n              unsafeRes = _context79.sent;\n              res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n              if (!('error' in res)) {\n                _context79.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get confirmed signatures for address');\n            case 7:\n              return _context79.abrupt(\"return\", res.result);\n            case 8:\n            case \"end\":\n              return _context79.stop();\n          }\n        }, _callee79, this);\n      }));\n      function getConfirmedSignaturesForAddress2(_x124, _x125, _x126) {\n        return _getConfirmedSignaturesForAddress2.apply(this, arguments);\n      }\n      return getConfirmedSignaturesForAddress2;\n    }()\n    /**\n     * Returns confirmed signatures for transactions involving an\n     * address backwards in time from the provided signature or most recent confirmed block\n     *\n     *\n     * @param address queried address\n     * @param options\n     */\n  }, {\n    key: \"getSignaturesForAddress\",\n    value: function () {\n      var _getSignaturesForAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee80(address, options, commitment) {\n        var args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee80$(_context80) {\n          while (1) switch (_context80.prev = _context80.next) {\n            case 0:\n              args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n              _context80.next = 3;\n              return this._rpcRequest('getSignaturesForAddress', args);\n            case 3:\n              unsafeRes = _context80.sent;\n              res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n              if (!('error' in res)) {\n                _context80.next = 7;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, 'failed to get signatures for address');\n            case 7:\n              return _context80.abrupt(\"return\", res.result);\n            case 8:\n            case \"end\":\n              return _context80.stop();\n          }\n        }, _callee80, this);\n      }));\n      function getSignaturesForAddress(_x127, _x128, _x129) {\n        return _getSignaturesForAddress.apply(this, arguments);\n      }\n      return getSignaturesForAddress;\n    }()\n  }, {\n    key: \"getAddressLookupTable\",\n    value: function () {\n      var _getAddressLookupTable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee81(accountKey, config) {\n        var _yield$this$getAccoun, context, accountInfo, value;\n        return _regeneratorRuntime().wrap(function _callee81$(_context81) {\n          while (1) switch (_context81.prev = _context81.next) {\n            case 0:\n              _context81.next = 2;\n              return this.getAccountInfoAndContext(accountKey, config);\n            case 2:\n              _yield$this$getAccoun = _context81.sent;\n              context = _yield$this$getAccoun.context;\n              accountInfo = _yield$this$getAccoun.value;\n              value = null;\n              if (accountInfo !== null) {\n                value = new AddressLookupTableAccount({\n                  key: accountKey,\n                  state: AddressLookupTableAccount.deserialize(accountInfo.data)\n                });\n              }\n              return _context81.abrupt(\"return\", {\n                context: context,\n                value: value\n              });\n            case 8:\n            case \"end\":\n              return _context81.stop();\n          }\n        }, _callee81, this);\n      }));\n      function getAddressLookupTable(_x130, _x131) {\n        return _getAddressLookupTable.apply(this, arguments);\n      }\n      return getAddressLookupTable;\n    }()\n    /**\n     * Fetch the contents of a Nonce account from the cluster, return with context\n     */\n  }, {\n    key: \"getNonceAndContext\",\n    value: function () {\n      var _getNonceAndContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee82(nonceAccount, commitmentOrConfig) {\n        var _yield$this$getAccoun2, context, accountInfo, value;\n        return _regeneratorRuntime().wrap(function _callee82$(_context82) {\n          while (1) switch (_context82.prev = _context82.next) {\n            case 0:\n              _context82.next = 2;\n              return this.getAccountInfoAndContext(nonceAccount, commitmentOrConfig);\n            case 2:\n              _yield$this$getAccoun2 = _context82.sent;\n              context = _yield$this$getAccoun2.context;\n              accountInfo = _yield$this$getAccoun2.value;\n              value = null;\n              if (accountInfo !== null) {\n                value = NonceAccount.fromAccountData(accountInfo.data);\n              }\n              return _context82.abrupt(\"return\", {\n                context: context,\n                value: value\n              });\n            case 8:\n            case \"end\":\n              return _context82.stop();\n          }\n        }, _callee82, this);\n      }));\n      function getNonceAndContext(_x132, _x133) {\n        return _getNonceAndContext.apply(this, arguments);\n      }\n      return getNonceAndContext;\n    }()\n    /**\n     * Fetch the contents of a Nonce account from the cluster\n     */\n  }, {\n    key: \"getNonce\",\n    value: function () {\n      var _getNonce = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee83(nonceAccount, commitmentOrConfig) {\n        return _regeneratorRuntime().wrap(function _callee83$(_context83) {\n          while (1) switch (_context83.prev = _context83.next) {\n            case 0:\n              _context83.next = 2;\n              return this.getNonceAndContext(nonceAccount, commitmentOrConfig).then(function (x) {\n                return x.value;\n              }).catch(function (e) {\n                throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n              });\n            case 2:\n              return _context83.abrupt(\"return\", _context83.sent);\n            case 3:\n            case \"end\":\n              return _context83.stop();\n          }\n        }, _callee83, this);\n      }));\n      function getNonce(_x134, _x135) {\n        return _getNonce.apply(this, arguments);\n      }\n      return getNonce;\n    }()\n    /**\n     * Request an allocation of lamports to the specified address\n     *\n     * ```typescript\n     * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n     *\n     * (async () => {\n     *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n     *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n     *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n     *   await connection.confirmTransaction(signature);\n     * })();\n     * ```\n     */\n  }, {\n    key: \"requestAirdrop\",\n    value: function () {\n      var _requestAirdrop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee84(to, lamports) {\n        var unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee84$(_context84) {\n          while (1) switch (_context84.prev = _context84.next) {\n            case 0:\n              _context84.next = 2;\n              return this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n            case 2:\n              unsafeRes = _context84.sent;\n              res = create(unsafeRes, RequestAirdropRpcResult);\n              if (!('error' in res)) {\n                _context84.next = 6;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"airdrop to \".concat(to.toBase58(), \" failed\"));\n            case 6:\n              return _context84.abrupt(\"return\", res.result);\n            case 7:\n            case \"end\":\n              return _context84.stop();\n          }\n        }, _callee84, this);\n      }));\n      function requestAirdrop(_x136, _x137) {\n        return _requestAirdrop.apply(this, arguments);\n      }\n      return requestAirdrop;\n    }()\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_blockhashWithExpiryBlockHeight\",\n    value: function () {\n      var _blockhashWithExpiryBlockHeight2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee85(disableCache) {\n        var timeSinceFetch, expired;\n        return _regeneratorRuntime().wrap(function _callee85$(_context85) {\n          while (1) switch (_context85.prev = _context85.next) {\n            case 0:\n              if (disableCache) {\n                _context85.next = 10;\n                break;\n              }\n            case 1:\n              if (!this._pollingBlockhash) {\n                _context85.next = 6;\n                break;\n              }\n              _context85.next = 4;\n              return sleep(100);\n            case 4:\n              _context85.next = 1;\n              break;\n            case 6:\n              timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n              expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n              if (!(this._blockhashInfo.latestBlockhash !== null && !expired)) {\n                _context85.next = 10;\n                break;\n              }\n              return _context85.abrupt(\"return\", this._blockhashInfo.latestBlockhash);\n            case 10:\n              _context85.next = 12;\n              return this._pollNewBlockhash();\n            case 12:\n              return _context85.abrupt(\"return\", _context85.sent);\n            case 13:\n            case \"end\":\n              return _context85.stop();\n          }\n        }, _callee85, this);\n      }));\n      function _blockhashWithExpiryBlockHeight(_x138) {\n        return _blockhashWithExpiryBlockHeight2.apply(this, arguments);\n      }\n      return _blockhashWithExpiryBlockHeight;\n    }()\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_pollNewBlockhash\",\n    value: function () {\n      var _pollNewBlockhash2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee86() {\n        var startTime, cachedLatestBlockhash, cachedBlockhash, i, latestBlockhash;\n        return _regeneratorRuntime().wrap(function _callee86$(_context86) {\n          while (1) switch (_context86.prev = _context86.next) {\n            case 0:\n              this._pollingBlockhash = true;\n              _context86.prev = 1;\n              startTime = Date.now();\n              cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n              cachedBlockhash = cachedLatestBlockhash ? cachedLatestBlockhash.blockhash : null;\n              i = 0;\n            case 6:\n              if (!(i < 50)) {\n                _context86.next = 18;\n                break;\n              }\n              _context86.next = 9;\n              return this.getLatestBlockhash('finalized');\n            case 9:\n              latestBlockhash = _context86.sent;\n              if (!(cachedBlockhash !== latestBlockhash.blockhash)) {\n                _context86.next = 13;\n                break;\n              }\n              this._blockhashInfo = {\n                latestBlockhash: latestBlockhash,\n                lastFetch: Date.now(),\n                transactionSignatures: [],\n                simulatedSignatures: []\n              };\n              return _context86.abrupt(\"return\", latestBlockhash);\n            case 13:\n              _context86.next = 15;\n              return sleep(MS_PER_SLOT / 2);\n            case 15:\n              i++;\n              _context86.next = 6;\n              break;\n            case 18:\n              throw new Error(\"Unable to obtain a new blockhash after \".concat(Date.now() - startTime, \"ms\"));\n            case 19:\n              _context86.prev = 19;\n              this._pollingBlockhash = false;\n              return _context86.finish(19);\n            case 22:\n            case \"end\":\n              return _context86.stop();\n          }\n        }, _callee86, this, [[1,, 19, 22]]);\n      }));\n      function _pollNewBlockhash() {\n        return _pollNewBlockhash2.apply(this, arguments);\n      }\n      return _pollNewBlockhash;\n    }()\n    /**\n     * get the stake minimum delegation\n     */\n  }, {\n    key: \"getStakeMinimumDelegation\",\n    value: function () {\n      var _getStakeMinimumDelegation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee87(config) {\n        var _extractCommitmentFro23, commitment, configArg, args, unsafeRes, res;\n        return _regeneratorRuntime().wrap(function _callee87$(_context87) {\n          while (1) switch (_context87.prev = _context87.next) {\n            case 0:\n              _extractCommitmentFro23 = extractCommitmentFromConfig(config), commitment = _extractCommitmentFro23.commitment, configArg = _extractCommitmentFro23.config;\n              args = this._buildArgs([], commitment, 'base64', configArg);\n              _context87.next = 4;\n              return this._rpcRequest('getStakeMinimumDelegation', args);\n            case 4:\n              unsafeRes = _context87.sent;\n              res = create(unsafeRes, jsonRpcResultAndContext(number()));\n              if (!('error' in res)) {\n                _context87.next = 8;\n                break;\n              }\n              throw new SolanaJSONRPCError(res.error, \"failed to get stake minimum delegation\");\n            case 8:\n              return _context87.abrupt(\"return\", res.result);\n            case 9:\n            case \"end\":\n              return _context87.stop();\n          }\n        }, _callee87, this);\n      }));\n      function getStakeMinimumDelegation(_x139) {\n        return _getStakeMinimumDelegation.apply(this, arguments);\n      }\n      return getStakeMinimumDelegation;\n    }()\n    /**\n     * Simulate a transaction\n     *\n     * @deprecated Instead, call {@link simulateTransaction} with {@link\n     * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n     */\n    /**\n     * Simulate a transaction\n     */\n    // eslint-disable-next-line no-dupe-class-members\n  }, {\n    key: \"simulateTransaction\",\n    value: function () {\n      var _simulateTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee88(transactionOrMessage, configOrSigners, includeAccounts) {\n        var versionedTx, _wireTransaction, _encodedTransaction, _config, _args89, _unsafeRes, _res5, transaction, originalTx, signers, _transaction3, disableCache, _transaction4, latestBlockhash, _signature3, message, signData, wireTransaction, encodedTransaction, config, addresses, args, unsafeRes, res, logs, traceIndent, logTrace;\n        return _regeneratorRuntime().wrap(function _callee88$(_context88) {\n          while (1) switch (_context88.prev = _context88.next) {\n            case 0:\n              if (!('message' in transactionOrMessage)) {\n                _context88.next = 17;\n                break;\n              }\n              versionedTx = transactionOrMessage;\n              _wireTransaction = versionedTx.serialize();\n              _encodedTransaction = Buffer.from(_wireTransaction).toString('base64');\n              if (!(Array.isArray(configOrSigners) || includeAccounts !== undefined)) {\n                _context88.next = 6;\n                break;\n              }\n              throw new Error('Invalid arguments');\n            case 6:\n              _config = configOrSigners || {};\n              _config.encoding = 'base64';\n              if (!('commitment' in _config)) {\n                _config.commitment = this.commitment;\n              }\n              _args89 = [_encodedTransaction, _config];\n              _context88.next = 12;\n              return this._rpcRequest('simulateTransaction', _args89);\n            case 12:\n              _unsafeRes = _context88.sent;\n              _res5 = create(_unsafeRes, SimulatedTransactionResponseStruct);\n              if (!('error' in _res5)) {\n                _context88.next = 16;\n                break;\n              }\n              throw new Error('failed to simulate transaction: ' + _res5.error.message);\n            case 16:\n              return _context88.abrupt(\"return\", _res5.result);\n            case 17:\n              if (transactionOrMessage instanceof Transaction) {\n                originalTx = transactionOrMessage;\n                transaction = new Transaction();\n                transaction.feePayer = originalTx.feePayer;\n                transaction.instructions = transactionOrMessage.instructions;\n                transaction.nonceInfo = originalTx.nonceInfo;\n                transaction.signatures = originalTx.signatures;\n              } else {\n                transaction = Transaction.populate(transactionOrMessage); // HACK: this function relies on mutating the populated transaction\n\n                transaction._message = transaction._json = undefined;\n              }\n              if (!(configOrSigners !== undefined && !Array.isArray(configOrSigners))) {\n                _context88.next = 20;\n                break;\n              }\n              throw new Error('Invalid arguments');\n            case 20:\n              signers = configOrSigners;\n              if (!(transaction.nonceInfo && signers)) {\n                _context88.next = 25;\n                break;\n              }\n              (_transaction3 = transaction).sign.apply(_transaction3, _toConsumableArray(signers));\n              _context88.next = 45;\n              break;\n            case 25:\n              disableCache = this._disableBlockhashCaching;\n            case 26:\n              _context88.next = 28;\n              return this._blockhashWithExpiryBlockHeight(disableCache);\n            case 28:\n              latestBlockhash = _context88.sent;\n              transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n              transaction.recentBlockhash = latestBlockhash.blockhash;\n              if (signers) {\n                _context88.next = 33;\n                break;\n              }\n              return _context88.abrupt(\"break\", 45);\n            case 33:\n              (_transaction4 = transaction).sign.apply(_transaction4, _toConsumableArray(signers));\n              if (transaction.signature) {\n                _context88.next = 36;\n                break;\n              }\n              throw new Error('!signature');\n            case 36:\n              _signature3 = transaction.signature.toString('base64');\n              if (!(!this._blockhashInfo.simulatedSignatures.includes(_signature3) && !this._blockhashInfo.transactionSignatures.includes(_signature3))) {\n                _context88.next = 42;\n                break;\n              }\n              // The signature of this transaction has not been seen before with the\n              // current recentBlockhash, all done. Let's break\n              this._blockhashInfo.simulatedSignatures.push(_signature3);\n              return _context88.abrupt(\"break\", 45);\n            case 42:\n              // This transaction would be treated as duplicate (its derived signature\n              // matched to one of already recorded signatures).\n              // So, we must fetch a new blockhash for a different signature by disabling\n              // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n              disableCache = true;\n            case 43:\n              _context88.next = 26;\n              break;\n            case 45:\n              message = transaction._compile();\n              signData = message.serialize();\n              wireTransaction = transaction._serialize(signData);\n              encodedTransaction = wireTransaction.toString('base64');\n              config = {\n                encoding: 'base64',\n                commitment: this.commitment\n              };\n              if (includeAccounts) {\n                addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(function (key) {\n                  return key.toBase58();\n                });\n                config['accounts'] = {\n                  encoding: 'base64',\n                  addresses: addresses\n                };\n              }\n              if (signers) {\n                config.sigVerify = true;\n              }\n              args = [encodedTransaction, config];\n              _context88.next = 55;\n              return this._rpcRequest('simulateTransaction', args);\n            case 55:\n              unsafeRes = _context88.sent;\n              res = create(unsafeRes, SimulatedTransactionResponseStruct);\n              if (!('error' in res)) {\n                _context88.next = 60;\n                break;\n              }\n              if ('data' in res.error) {\n                logs = res.error.data.logs;\n                if (logs && Array.isArray(logs)) {\n                  traceIndent = '\\n    ';\n                  logTrace = traceIndent + logs.join(traceIndent);\n                  console.error(res.error.message, logTrace);\n                }\n              }\n              throw new SendTransactionError('failed to simulate transaction: ' + res.error.message, logs);\n            case 60:\n              return _context88.abrupt(\"return\", res.result);\n            case 61:\n            case \"end\":\n              return _context88.stop();\n          }\n        }, _callee88, this);\n      }));\n      function simulateTransaction(_x140, _x141, _x142) {\n        return _simulateTransaction.apply(this, arguments);\n      }\n      return simulateTransaction;\n    }()\n    /**\n     * Sign and send a transaction\n     *\n     * @deprecated Instead, call {@link sendTransaction} with a {@link\n     * VersionedTransaction}\n     */\n    /**\n     * Sign and send a transaction\n     */\n    // eslint-disable-next-line no-dupe-class-members\n  }, {\n    key: \"sendTransaction\",\n    value: function () {\n      var _sendTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee89(transaction, signersOrOptions, options) {\n        var _wireTransaction2, signers, disableCache, latestBlockhash, _signature4, wireTransaction;\n        return _regeneratorRuntime().wrap(function _callee89$(_context89) {\n          while (1) switch (_context89.prev = _context89.next) {\n            case 0:\n              if (!('version' in transaction)) {\n                _context89.next = 7;\n                break;\n              }\n              if (!(signersOrOptions && Array.isArray(signersOrOptions))) {\n                _context89.next = 3;\n                break;\n              }\n              throw new Error('Invalid arguments');\n            case 3:\n              _wireTransaction2 = transaction.serialize();\n              _context89.next = 6;\n              return this.sendRawTransaction(_wireTransaction2, options);\n            case 6:\n              return _context89.abrupt(\"return\", _context89.sent);\n            case 7:\n              if (!(signersOrOptions === undefined || !Array.isArray(signersOrOptions))) {\n                _context89.next = 9;\n                break;\n              }\n              throw new Error('Invalid arguments');\n            case 9:\n              signers = signersOrOptions;\n              if (!transaction.nonceInfo) {\n                _context89.next = 14;\n                break;\n              }\n              transaction.sign.apply(transaction, _toConsumableArray(signers));\n              _context89.next = 32;\n              break;\n            case 14:\n              disableCache = this._disableBlockhashCaching;\n            case 15:\n              _context89.next = 17;\n              return this._blockhashWithExpiryBlockHeight(disableCache);\n            case 17:\n              latestBlockhash = _context89.sent;\n              transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n              transaction.recentBlockhash = latestBlockhash.blockhash;\n              transaction.sign.apply(transaction, _toConsumableArray(signers));\n              if (transaction.signature) {\n                _context89.next = 23;\n                break;\n              }\n              throw new Error('!signature');\n            case 23:\n              _signature4 = transaction.signature.toString('base64');\n              if (this._blockhashInfo.transactionSignatures.includes(_signature4)) {\n                _context89.next = 29;\n                break;\n              }\n              // The signature of this transaction has not been seen before with the\n              // current recentBlockhash, all done. Let's break\n              this._blockhashInfo.transactionSignatures.push(_signature4);\n              return _context89.abrupt(\"break\", 32);\n            case 29:\n              // This transaction would be treated as duplicate (its derived signature\n              // matched to one of already recorded signatures).\n              // So, we must fetch a new blockhash for a different signature by disabling\n              // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n              disableCache = true;\n            case 30:\n              _context89.next = 15;\n              break;\n            case 32:\n              wireTransaction = transaction.serialize();\n              _context89.next = 35;\n              return this.sendRawTransaction(wireTransaction, options);\n            case 35:\n              return _context89.abrupt(\"return\", _context89.sent);\n            case 36:\n            case \"end\":\n              return _context89.stop();\n          }\n        }, _callee89, this);\n      }));\n      function sendTransaction(_x143, _x144, _x145) {\n        return _sendTransaction.apply(this, arguments);\n      }\n      return sendTransaction;\n    }()\n    /**\n     * Send a transaction that has already been signed and serialized into the\n     * wire format\n     */\n  }, {\n    key: \"sendRawTransaction\",\n    value: function () {\n      var _sendRawTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee90(rawTransaction, options) {\n        var encodedTransaction, result;\n        return _regeneratorRuntime().wrap(function _callee90$(_context90) {\n          while (1) switch (_context90.prev = _context90.next) {\n            case 0:\n              encodedTransaction = toBuffer(rawTransaction).toString('base64');\n              _context90.next = 3;\n              return this.sendEncodedTransaction(encodedTransaction, options);\n            case 3:\n              result = _context90.sent;\n              return _context90.abrupt(\"return\", result);\n            case 5:\n            case \"end\":\n              return _context90.stop();\n          }\n        }, _callee90, this);\n      }));\n      function sendRawTransaction(_x146, _x147) {\n        return _sendRawTransaction.apply(this, arguments);\n      }\n      return sendRawTransaction;\n    }()\n    /**\n     * Send a transaction that has already been signed, serialized into the\n     * wire format, and encoded as a base64 string\n     */\n  }, {\n    key: \"sendEncodedTransaction\",\n    value: function () {\n      var _sendEncodedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee91(encodedTransaction, options) {\n        var config, skipPreflight, preflightCommitment, args, unsafeRes, res, logs;\n        return _regeneratorRuntime().wrap(function _callee91$(_context91) {\n          while (1) switch (_context91.prev = _context91.next) {\n            case 0:\n              config = {\n                encoding: 'base64'\n              };\n              skipPreflight = options && options.skipPreflight;\n              preflightCommitment = options && options.preflightCommitment || this.commitment;\n              if (options && options.maxRetries != null) {\n                config.maxRetries = options.maxRetries;\n              }\n              if (options && options.minContextSlot != null) {\n                config.minContextSlot = options.minContextSlot;\n              }\n              if (skipPreflight) {\n                config.skipPreflight = skipPreflight;\n              }\n              if (preflightCommitment) {\n                config.preflightCommitment = preflightCommitment;\n              }\n              args = [encodedTransaction, config];\n              _context91.next = 10;\n              return this._rpcRequest('sendTransaction', args);\n            case 10:\n              unsafeRes = _context91.sent;\n              res = create(unsafeRes, SendTransactionRpcResult);\n              if (!('error' in res)) {\n                _context91.next = 15;\n                break;\n              }\n              if ('data' in res.error) {\n                logs = res.error.data.logs;\n              }\n              throw new SendTransactionError('failed to send transaction: ' + res.error.message, logs);\n            case 15:\n              return _context91.abrupt(\"return\", res.result);\n            case 16:\n            case \"end\":\n              return _context91.stop();\n          }\n        }, _callee91, this);\n      }));\n      function sendEncodedTransaction(_x148, _x149) {\n        return _sendEncodedTransaction.apply(this, arguments);\n      }\n      return sendEncodedTransaction;\n    }()\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_wsOnOpen\",\n    value: function _wsOnOpen() {\n      var _this21 = this;\n      this._rpcWebSocketConnected = true;\n      this._rpcWebSocketHeartbeat = setInterval(function () {\n        // Ping server every 5s to prevent idle timeouts\n        _this21._rpcWebSocket.notify('ping').catch(function () {});\n      }, 5000);\n      this._updateSubscriptions();\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_wsOnError\",\n    value: function _wsOnError(err) {\n      this._rpcWebSocketConnected = false;\n      console.error('ws error:', err.message);\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_wsOnClose\",\n    value: function _wsOnClose(code) {\n      var _this22 = this;\n      this._rpcWebSocketConnected = false;\n      this._rpcWebSocketGeneration = (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n      if (this._rpcWebSocketIdleTimeout) {\n        clearTimeout(this._rpcWebSocketIdleTimeout);\n        this._rpcWebSocketIdleTimeout = null;\n      }\n      if (this._rpcWebSocketHeartbeat) {\n        clearInterval(this._rpcWebSocketHeartbeat);\n        this._rpcWebSocketHeartbeat = null;\n      }\n      if (code === 1000) {\n        // explicit close, check if any subscriptions have been made since close\n        this._updateSubscriptions();\n        return;\n      } // implicit close, prepare subscriptions for auto-reconnect\n\n      this._subscriptionCallbacksByServerSubscriptionId = {};\n      Object.entries(this._subscriptionsByHash).forEach(function (_ref37) {\n        var _ref38 = _slicedToArray(_ref37, 2),\n          hash = _ref38[0],\n          subscription = _ref38[1];\n        _this22._setSubscription(hash, _objectSpread(_objectSpread({}, subscription), {}, {\n          state: 'pending'\n        }));\n      });\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_setSubscription\",\n    value: function _setSubscription(hash, nextSubscription) {\n      var _this$_subscriptionsB;\n      var prevState = (_this$_subscriptionsB = this._subscriptionsByHash[hash]) === null || _this$_subscriptionsB === void 0 ? void 0 : _this$_subscriptionsB.state;\n      this._subscriptionsByHash[hash] = nextSubscription;\n      if (prevState !== nextSubscription.state) {\n        var stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash];\n        if (stateChangeCallbacks) {\n          stateChangeCallbacks.forEach(function (cb) {\n            try {\n              cb(nextSubscription.state); // eslint-disable-next-line no-empty\n            } catch (_unused2) {}\n          });\n        }\n      }\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_onSubscriptionStateChange\",\n    value: function _onSubscriptionStateChange(clientSubscriptionId, callback) {\n      var _this23 = this;\n      var _this$_subscriptionSt;\n      var hash = this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      if (hash == null) {\n        return function () {};\n      }\n      var stateChangeCallbacks = (_this$_subscriptionSt = this._subscriptionStateChangeCallbacksByHash)[hash] || (_this$_subscriptionSt[hash] = new Set());\n      stateChangeCallbacks.add(callback);\n      return function () {\n        stateChangeCallbacks.delete(callback);\n        if (stateChangeCallbacks.size === 0) {\n          delete _this23._subscriptionStateChangeCallbacksByHash[hash];\n        }\n      };\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_updateSubscriptions\",\n    value: function () {\n      var _updateSubscriptions2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee95() {\n        var _this24 = this;\n        var activeWebSocketGeneration, isCurrentConnectionStillActive;\n        return _regeneratorRuntime().wrap(function _callee95$(_context95) {\n          while (1) switch (_context95.prev = _context95.next) {\n            case 0:\n              if (!(Object.keys(this._subscriptionsByHash).length === 0)) {\n                _context95.next = 3;\n                break;\n              }\n              if (this._rpcWebSocketConnected) {\n                this._rpcWebSocketConnected = false;\n                this._rpcWebSocketIdleTimeout = setTimeout(function () {\n                  _this24._rpcWebSocketIdleTimeout = null;\n                  try {\n                    _this24._rpcWebSocket.close();\n                  } catch (err) {\n                    // swallow error if socket has already been closed.\n                    if (err instanceof Error) {\n                      console.log(\"Error when closing socket connection: \".concat(err.message));\n                    }\n                  }\n                }, 500);\n              }\n              return _context95.abrupt(\"return\");\n            case 3:\n              if (this._rpcWebSocketIdleTimeout !== null) {\n                clearTimeout(this._rpcWebSocketIdleTimeout);\n                this._rpcWebSocketIdleTimeout = null;\n                this._rpcWebSocketConnected = true;\n              }\n              if (this._rpcWebSocketConnected) {\n                _context95.next = 7;\n                break;\n              }\n              this._rpcWebSocket.connect();\n              return _context95.abrupt(\"return\");\n            case 7:\n              activeWebSocketGeneration = this._rpcWebSocketGeneration;\n              isCurrentConnectionStillActive = function isCurrentConnectionStillActive() {\n                return activeWebSocketGeneration === _this24._rpcWebSocketGeneration;\n              };\n              _context95.next = 11;\n              return Promise.all(\n              // Don't be tempted to change this to `Object.entries`. We call\n              // `_updateSubscriptions` recursively when processing the state,\n              // so it's important that we look up the *current* version of\n              // each subscription, every time we process a hash.\n              Object.keys(this._subscriptionsByHash).map( /*#__PURE__*/function () {\n                var _ref39 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee94(hash) {\n                  var subscription;\n                  return _regeneratorRuntime().wrap(function _callee94$(_context94) {\n                    while (1) switch (_context94.prev = _context94.next) {\n                      case 0:\n                        subscription = _this24._subscriptionsByHash[hash];\n                        if (!(subscription === undefined)) {\n                          _context94.next = 3;\n                          break;\n                        }\n                        return _context94.abrupt(\"return\");\n                      case 3:\n                        _context94.t0 = subscription.state;\n                        _context94.next = _context94.t0 === 'pending' ? 6 : _context94.t0 === 'unsubscribed' ? 6 : _context94.t0 === 'subscribed' ? 15 : 19;\n                        break;\n                      case 6:\n                        if (!(subscription.callbacks.size === 0)) {\n                          _context94.next = 12;\n                          break;\n                        }\n                        /**\n                         * You can end up here when:\n                         *\n                         * - a subscription has recently unsubscribed\n                         *   without having new callbacks added to it\n                         *   while the unsubscribe was in flight, or\n                         * - when a pending subscription has its\n                         *   listeners removed before a request was\n                         *   sent to the server.\n                         *\n                         * Being that nobody is interested in this\n                         * subscription any longer, delete it.\n                         */\n                        delete _this24._subscriptionsByHash[hash];\n                        if (subscription.state === 'unsubscribed') {\n                          delete _this24._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId];\n                        }\n                        _context94.next = 11;\n                        return _this24._updateSubscriptions();\n                      case 11:\n                        return _context94.abrupt(\"return\");\n                      case 12:\n                        _context94.next = 14;\n                        return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee92() {\n                          var args, method, serverSubscriptionId;\n                          return _regeneratorRuntime().wrap(function _callee92$(_context92) {\n                            while (1) switch (_context92.prev = _context92.next) {\n                              case 0:\n                                args = subscription.args, method = subscription.method;\n                                _context92.prev = 1;\n                                _this24._setSubscription(hash, _objectSpread(_objectSpread({}, subscription), {}, {\n                                  state: 'subscribing'\n                                }));\n                                _context92.next = 5;\n                                return _this24._rpcWebSocket.call(method, args);\n                              case 5:\n                                serverSubscriptionId = _context92.sent;\n                                _this24._setSubscription(hash, _objectSpread(_objectSpread({}, subscription), {}, {\n                                  serverSubscriptionId: serverSubscriptionId,\n                                  state: 'subscribed'\n                                }));\n                                _this24._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId] = subscription.callbacks;\n                                _context92.next = 10;\n                                return _this24._updateSubscriptions();\n                              case 10:\n                                _context92.next = 20;\n                                break;\n                              case 12:\n                                _context92.prev = 12;\n                                _context92.t0 = _context92[\"catch\"](1);\n                                if (_context92.t0 instanceof Error) {\n                                  console.error(\"\".concat(method, \" error for argument\"), args, _context92.t0.message);\n                                }\n                                if (isCurrentConnectionStillActive()) {\n                                  _context92.next = 17;\n                                  break;\n                                }\n                                return _context92.abrupt(\"return\");\n                              case 17:\n                                // TODO: Maybe add an 'errored' state or a retry limit?\n\n                                _this24._setSubscription(hash, _objectSpread(_objectSpread({}, subscription), {}, {\n                                  state: 'pending'\n                                }));\n                                _context92.next = 20;\n                                return _this24._updateSubscriptions();\n                              case 20:\n                              case \"end\":\n                                return _context92.stop();\n                            }\n                          }, _callee92, null, [[1, 12]]);\n                        }))();\n                      case 14:\n                        return _context94.abrupt(\"break\", 19);\n                      case 15:\n                        if (!(subscription.callbacks.size === 0)) {\n                          _context94.next = 18;\n                          break;\n                        }\n                        _context94.next = 18;\n                        return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee93() {\n                          var serverSubscriptionId, unsubscribeMethod;\n                          return _regeneratorRuntime().wrap(function _callee93$(_context93) {\n                            while (1) switch (_context93.prev = _context93.next) {\n                              case 0:\n                                serverSubscriptionId = subscription.serverSubscriptionId, unsubscribeMethod = subscription.unsubscribeMethod;\n                                if (!_this24._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)) {\n                                  _context93.next = 5;\n                                  break;\n                                }\n                                /**\n                                 * Special case.\n                                 * If we're dealing with a subscription that has been auto-\n                                 * disposed by the RPC, then we can skip the RPC call to\n                                 * tear down the subscription here.\n                                 *\n                                 * NOTE: There is a proposal to eliminate this special case, here:\n                                 * https://github.com/solana-labs/solana/issues/18892\n                                 */\n                                _this24._subscriptionsAutoDisposedByRpc.delete(serverSubscriptionId);\n                                _context93.next = 21;\n                                break;\n                              case 5:\n                                _this24._setSubscription(hash, _objectSpread(_objectSpread({}, subscription), {}, {\n                                  state: 'unsubscribing'\n                                }));\n                                _this24._setSubscription(hash, _objectSpread(_objectSpread({}, subscription), {}, {\n                                  state: 'unsubscribing'\n                                }));\n                                _context93.prev = 7;\n                                _context93.next = 10;\n                                return _this24._rpcWebSocket.call(unsubscribeMethod, [serverSubscriptionId]);\n                              case 10:\n                                _context93.next = 21;\n                                break;\n                              case 12:\n                                _context93.prev = 12;\n                                _context93.t0 = _context93[\"catch\"](7);\n                                if (_context93.t0 instanceof Error) {\n                                  console.error(\"\".concat(unsubscribeMethod, \" error:\"), _context93.t0.message);\n                                }\n                                if (isCurrentConnectionStillActive()) {\n                                  _context93.next = 17;\n                                  break;\n                                }\n                                return _context93.abrupt(\"return\");\n                              case 17:\n                                // TODO: Maybe add an 'errored' state or a retry limit?\n\n                                _this24._setSubscription(hash, _objectSpread(_objectSpread({}, subscription), {}, {\n                                  state: 'subscribed'\n                                }));\n                                _context93.next = 20;\n                                return _this24._updateSubscriptions();\n                              case 20:\n                                return _context93.abrupt(\"return\");\n                              case 21:\n                                _this24._setSubscription(hash, _objectSpread(_objectSpread({}, subscription), {}, {\n                                  state: 'unsubscribed'\n                                }));\n                                _context93.next = 24;\n                                return _this24._updateSubscriptions();\n                              case 24:\n                              case \"end\":\n                                return _context93.stop();\n                            }\n                          }, _callee93, null, [[7, 12]]);\n                        }))();\n                      case 18:\n                        return _context94.abrupt(\"break\", 19);\n                      case 19:\n                      case \"end\":\n                        return _context94.stop();\n                    }\n                  }, _callee94);\n                }));\n                return function (_x150) {\n                  return _ref39.apply(this, arguments);\n                };\n              }()));\n            case 11:\n            case \"end\":\n              return _context95.stop();\n          }\n        }, _callee95, this);\n      }));\n      function _updateSubscriptions() {\n        return _updateSubscriptions2.apply(this, arguments);\n      }\n      return _updateSubscriptions;\n    }()\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_handleServerNotification\",\n    value: function _handleServerNotification(serverSubscriptionId, callbackArgs) {\n      var callbacks = this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n      if (callbacks === undefined) {\n        return;\n      }\n      callbacks.forEach(function (cb) {\n        try {\n          cb.apply(void 0, _toConsumableArray(callbackArgs));\n        } catch (e) {\n          console.error(e);\n        }\n      });\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_wsOnAccountNotification\",\n    value: function _wsOnAccountNotification(notification) {\n      var _create = create(notification, AccountNotificationResult),\n        result = _create.result,\n        subscription = _create.subscription;\n      this._handleServerNotification(subscription, [result.value, result.context]);\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_makeSubscription\",\n    value: function _makeSubscription(subscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args) {\n      var _this25 = this;\n      var clientSubscriptionId = this._nextClientSubscriptionId++;\n      var hash = fastStableStringify$1([subscriptionConfig.method, args], true\n      /* isArrayProp */);\n\n      var existingSubscription = this._subscriptionsByHash[hash];\n      if (existingSubscription === undefined) {\n        this._subscriptionsByHash[hash] = _objectSpread(_objectSpread({}, subscriptionConfig), {}, {\n          args: args,\n          callbacks: new Set([subscriptionConfig.callback]),\n          state: 'pending'\n        });\n      } else {\n        existingSubscription.callbacks.add(subscriptionConfig.callback);\n      }\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId] = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee96() {\n        var subscription;\n        return _regeneratorRuntime().wrap(function _callee96$(_context96) {\n          while (1) switch (_context96.prev = _context96.next) {\n            case 0:\n              delete _this25._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n              delete _this25._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n              subscription = _this25._subscriptionsByHash[hash];\n              assert(subscription !== undefined, \"Could not find a `Subscription` when tearing down client subscription #\".concat(clientSubscriptionId));\n              subscription.callbacks.delete(subscriptionConfig.callback);\n              _context96.next = 7;\n              return _this25._updateSubscriptions();\n            case 7:\n            case \"end\":\n              return _context96.stop();\n          }\n        }, _callee96);\n      }));\n      this._updateSubscriptions();\n      return clientSubscriptionId;\n    }\n    /**\n     * Register a callback to be invoked whenever the specified account changes\n     *\n     * @param publicKey Public key of the account to monitor\n     * @param callback Function to invoke whenever the account is changed\n     * @param commitment Specify the commitment level account changes must reach before notification\n     * @return subscription id\n     */\n  }, {\n    key: \"onAccountChange\",\n    value: function onAccountChange(publicKey, callback, commitment) {\n      var args = this._buildArgs([publicKey.toBase58()], commitment || this._commitment || 'finalized',\n      // Apply connection/server default.\n      'base64');\n      return this._makeSubscription({\n        callback: callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe'\n      }, args);\n    }\n    /**\n     * Deregister an account notification callback\n     *\n     * @param id client subscription id to deregister\n     */\n  }, {\n    key: \"removeAccountChangeListener\",\n    value: function () {\n      var _removeAccountChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee97(clientSubscriptionId) {\n        return _regeneratorRuntime().wrap(function _callee97$(_context97) {\n          while (1) switch (_context97.prev = _context97.next) {\n            case 0:\n              _context97.next = 2;\n              return this._unsubscribeClientSubscription(clientSubscriptionId, 'account change');\n            case 2:\n            case \"end\":\n              return _context97.stop();\n          }\n        }, _callee97, this);\n      }));\n      function removeAccountChangeListener(_x151) {\n        return _removeAccountChangeListener.apply(this, arguments);\n      }\n      return removeAccountChangeListener;\n    }()\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_wsOnProgramAccountNotification\",\n    value: function _wsOnProgramAccountNotification(notification) {\n      var _create2 = create(notification, ProgramAccountNotificationResult),\n        result = _create2.result,\n        subscription = _create2.subscription;\n      this._handleServerNotification(subscription, [{\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account\n      }, result.context]);\n    }\n    /**\n     * Register a callback to be invoked whenever accounts owned by the\n     * specified program change\n     *\n     * @param programId Public key of the program to monitor\n     * @param callback Function to invoke whenever the account is changed\n     * @param commitment Specify the commitment level account changes must reach before notification\n     * @param filters The program account filters to pass into the RPC method\n     * @return subscription id\n     */\n  }, {\n    key: \"onProgramAccountChange\",\n    value: function onProgramAccountChange(programId, callback, commitment, filters) {\n      var args = this._buildArgs([programId.toBase58()], commitment || this._commitment || 'finalized',\n      // Apply connection/server default.\n      'base64'\n      /* encoding */, filters ? {\n        filters: filters\n      } : undefined\n      /* extra */);\n\n      return this._makeSubscription({\n        callback: callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe'\n      }, args);\n    }\n    /**\n     * Deregister an account notification callback\n     *\n     * @param id client subscription id to deregister\n     */\n  }, {\n    key: \"removeProgramAccountChangeListener\",\n    value: function () {\n      var _removeProgramAccountChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee98(clientSubscriptionId) {\n        return _regeneratorRuntime().wrap(function _callee98$(_context98) {\n          while (1) switch (_context98.prev = _context98.next) {\n            case 0:\n              _context98.next = 2;\n              return this._unsubscribeClientSubscription(clientSubscriptionId, 'program account change');\n            case 2:\n            case \"end\":\n              return _context98.stop();\n          }\n        }, _callee98, this);\n      }));\n      function removeProgramAccountChangeListener(_x152) {\n        return _removeProgramAccountChangeListener.apply(this, arguments);\n      }\n      return removeProgramAccountChangeListener;\n    }()\n    /**\n     * Registers a callback to be invoked whenever logs are emitted.\n     */\n  }, {\n    key: \"onLogs\",\n    value: function onLogs(filter, callback, commitment) {\n      var args = this._buildArgs([typeof filter === 'object' ? {\n        mentions: [filter.toString()]\n      } : filter], commitment || this._commitment || 'finalized' // Apply connection/server default.\n      );\n\n      return this._makeSubscription({\n        callback: callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe'\n      }, args);\n    }\n    /**\n     * Deregister a logs callback.\n     *\n     * @param id client subscription id to deregister.\n     */\n  }, {\n    key: \"removeOnLogsListener\",\n    value: function () {\n      var _removeOnLogsListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee99(clientSubscriptionId) {\n        return _regeneratorRuntime().wrap(function _callee99$(_context99) {\n          while (1) switch (_context99.prev = _context99.next) {\n            case 0:\n              _context99.next = 2;\n              return this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n            case 2:\n            case \"end\":\n              return _context99.stop();\n          }\n        }, _callee99, this);\n      }));\n      function removeOnLogsListener(_x153) {\n        return _removeOnLogsListener.apply(this, arguments);\n      }\n      return removeOnLogsListener;\n    }()\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_wsOnLogsNotification\",\n    value: function _wsOnLogsNotification(notification) {\n      var _create3 = create(notification, LogsNotificationResult),\n        result = _create3.result,\n        subscription = _create3.subscription;\n      this._handleServerNotification(subscription, [result.value, result.context]);\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_wsOnSlotNotification\",\n    value: function _wsOnSlotNotification(notification) {\n      var _create4 = create(notification, SlotNotificationResult),\n        result = _create4.result,\n        subscription = _create4.subscription;\n      this._handleServerNotification(subscription, [result]);\n    }\n    /**\n     * Register a callback to be invoked upon slot changes\n     *\n     * @param callback Function to invoke whenever the slot changes\n     * @return subscription id\n     */\n  }, {\n    key: \"onSlotChange\",\n    value: function onSlotChange(callback) {\n      return this._makeSubscription({\n        callback: callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe'\n      }, []\n      /* args */);\n    }\n    /**\n     * Deregister a slot notification callback\n     *\n     * @param id client subscription id to deregister\n     */\n  }, {\n    key: \"removeSlotChangeListener\",\n    value: function () {\n      var _removeSlotChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee100(clientSubscriptionId) {\n        return _regeneratorRuntime().wrap(function _callee100$(_context100) {\n          while (1) switch (_context100.prev = _context100.next) {\n            case 0:\n              _context100.next = 2;\n              return this._unsubscribeClientSubscription(clientSubscriptionId, 'slot change');\n            case 2:\n            case \"end\":\n              return _context100.stop();\n          }\n        }, _callee100, this);\n      }));\n      function removeSlotChangeListener(_x154) {\n        return _removeSlotChangeListener.apply(this, arguments);\n      }\n      return removeSlotChangeListener;\n    }()\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_wsOnSlotUpdatesNotification\",\n    value: function _wsOnSlotUpdatesNotification(notification) {\n      var _create5 = create(notification, SlotUpdateNotificationResult),\n        result = _create5.result,\n        subscription = _create5.subscription;\n      this._handleServerNotification(subscription, [result]);\n    }\n    /**\n     * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n     * may be useful to track live progress of a cluster.\n     *\n     * @param callback Function to invoke whenever the slot updates\n     * @return subscription id\n     */\n  }, {\n    key: \"onSlotUpdate\",\n    value: function onSlotUpdate(callback) {\n      return this._makeSubscription({\n        callback: callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe'\n      }, []\n      /* args */);\n    }\n    /**\n     * Deregister a slot update notification callback\n     *\n     * @param id client subscription id to deregister\n     */\n  }, {\n    key: \"removeSlotUpdateListener\",\n    value: function () {\n      var _removeSlotUpdateListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee101(clientSubscriptionId) {\n        return _regeneratorRuntime().wrap(function _callee101$(_context101) {\n          while (1) switch (_context101.prev = _context101.next) {\n            case 0:\n              _context101.next = 2;\n              return this._unsubscribeClientSubscription(clientSubscriptionId, 'slot update');\n            case 2:\n            case \"end\":\n              return _context101.stop();\n          }\n        }, _callee101, this);\n      }));\n      function removeSlotUpdateListener(_x155) {\n        return _removeSlotUpdateListener.apply(this, arguments);\n      }\n      return removeSlotUpdateListener;\n    }()\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_unsubscribeClientSubscription\",\n    value: function () {\n      var _unsubscribeClientSubscription2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee102(clientSubscriptionId, subscriptionName) {\n        var dispose;\n        return _regeneratorRuntime().wrap(function _callee102$(_context102) {\n          while (1) switch (_context102.prev = _context102.next) {\n            case 0:\n              dispose = this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n              if (!dispose) {\n                _context102.next = 6;\n                break;\n              }\n              _context102.next = 4;\n              return dispose();\n            case 4:\n              _context102.next = 7;\n              break;\n            case 6:\n              console.warn('Ignored unsubscribe request because an active subscription with id ' + \"`\".concat(clientSubscriptionId, \"` for '\").concat(subscriptionName, \"' events \") + 'could not be found.');\n            case 7:\n            case \"end\":\n              return _context102.stop();\n          }\n        }, _callee102, this);\n      }));\n      function _unsubscribeClientSubscription(_x156, _x157) {\n        return _unsubscribeClientSubscription2.apply(this, arguments);\n      }\n      return _unsubscribeClientSubscription;\n    }()\n  }, {\n    key: \"_buildArgs\",\n    value: function _buildArgs(args, override, encoding, extra) {\n      var commitment = override || this._commitment;\n      if (commitment || encoding || extra) {\n        var options = {};\n        if (encoding) {\n          options.encoding = encoding;\n        }\n        if (commitment) {\n          options.commitment = commitment;\n        }\n        if (extra) {\n          options = Object.assign(options, extra);\n        }\n        args.push(options);\n      }\n      return args;\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_buildArgsAtLeastConfirmed\",\n    value: function _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n      var commitment = override || this._commitment;\n      if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n        throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n      }\n      return this._buildArgs(args, override, encoding, extra);\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_wsOnSignatureNotification\",\n    value: function _wsOnSignatureNotification(notification) {\n      var _create6 = create(notification, SignatureNotificationResult),\n        result = _create6.result,\n        subscription = _create6.subscription;\n      if (result.value !== 'receivedSignature') {\n        /**\n         * Special case.\n         * After a signature is processed, RPCs automatically dispose of the\n         * subscription on the server side. We need to track which of these\n         * subscriptions have been disposed in such a way, so that we know\n         * whether the client is dealing with a not-yet-processed signature\n         * (in which case we must tear down the server subscription) or an\n         * already-processed signature (in which case the client can simply\n         * clear out the subscription locally without telling the server).\n         *\n         * NOTE: There is a proposal to eliminate this special case, here:\n         * https://github.com/solana-labs/solana/issues/18892\n         */\n        this._subscriptionsAutoDisposedByRpc.add(subscription);\n      }\n      this._handleServerNotification(subscription, result.value === 'receivedSignature' ? [{\n        type: 'received'\n      }, result.context] : [{\n        type: 'status',\n        result: result.value\n      }, result.context]);\n    }\n    /**\n     * Register a callback to be invoked upon signature updates\n     *\n     * @param signature Transaction signature string in base 58\n     * @param callback Function to invoke on signature notifications\n     * @param commitment Specify the commitment level signature must reach before notification\n     * @return subscription id\n     */\n  }, {\n    key: \"onSignature\",\n    value: function onSignature(signature, _callback, commitment) {\n      var _this26 = this;\n      var args = this._buildArgs([signature], commitment || this._commitment || 'finalized' // Apply connection/server default.\n      );\n\n      var clientSubscriptionId = this._makeSubscription({\n        callback: function callback(notification, context) {\n          if (notification.type === 'status') {\n            _callback(notification.result, context); // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n\n            try {\n              _this26.removeSignatureListener(clientSubscriptionId); // eslint-disable-next-line no-empty\n            } catch (_err) {// Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe'\n      }, args);\n      return clientSubscriptionId;\n    }\n    /**\n     * Register a callback to be invoked when a transaction is\n     * received and/or processed.\n     *\n     * @param signature Transaction signature string in base 58\n     * @param callback Function to invoke on signature notifications\n     * @param options Enable received notifications and set the commitment\n     *   level that signature must reach before notification\n     * @return subscription id\n     */\n  }, {\n    key: \"onSignatureWithOptions\",\n    value: function onSignatureWithOptions(signature, _callback2, options) {\n      var _this27 = this;\n      var _options$commitment = _objectSpread(_objectSpread({}, options), {}, {\n          commitment: options && options.commitment || this._commitment || 'finalized' // Apply connection/server default.\n        }),\n        commitment = _options$commitment.commitment,\n        extra = _objectWithoutProperties(_options$commitment, _excluded4);\n      var args = this._buildArgs([signature], commitment, undefined\n      /* encoding */, extra);\n      var clientSubscriptionId = this._makeSubscription({\n        callback: function callback(notification, context) {\n          _callback2(notification, context); // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n\n          try {\n            _this27.removeSignatureListener(clientSubscriptionId); // eslint-disable-next-line no-empty\n          } catch (_err) {// Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe'\n      }, args);\n      return clientSubscriptionId;\n    }\n    /**\n     * Deregister a signature notification callback\n     *\n     * @param id client subscription id to deregister\n     */\n  }, {\n    key: \"removeSignatureListener\",\n    value: function () {\n      var _removeSignatureListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee103(clientSubscriptionId) {\n        return _regeneratorRuntime().wrap(function _callee103$(_context103) {\n          while (1) switch (_context103.prev = _context103.next) {\n            case 0:\n              _context103.next = 2;\n              return this._unsubscribeClientSubscription(clientSubscriptionId, 'signature result');\n            case 2:\n            case \"end\":\n              return _context103.stop();\n          }\n        }, _callee103, this);\n      }));\n      function removeSignatureListener(_x158) {\n        return _removeSignatureListener.apply(this, arguments);\n      }\n      return removeSignatureListener;\n    }()\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_wsOnRootNotification\",\n    value: function _wsOnRootNotification(notification) {\n      var _create7 = create(notification, RootNotificationResult),\n        result = _create7.result,\n        subscription = _create7.subscription;\n      this._handleServerNotification(subscription, [result]);\n    }\n    /**\n     * Register a callback to be invoked upon root changes\n     *\n     * @param callback Function to invoke whenever the root changes\n     * @return subscription id\n     */\n  }, {\n    key: \"onRootChange\",\n    value: function onRootChange(callback) {\n      return this._makeSubscription({\n        callback: callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe'\n      }, []\n      /* args */);\n    }\n    /**\n     * Deregister a root notification callback\n     *\n     * @param id client subscription id to deregister\n     */\n  }, {\n    key: \"removeRootChangeListener\",\n    value: function () {\n      var _removeRootChangeListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee104(clientSubscriptionId) {\n        return _regeneratorRuntime().wrap(function _callee104$(_context104) {\n          while (1) switch (_context104.prev = _context104.next) {\n            case 0:\n              _context104.next = 2;\n              return this._unsubscribeClientSubscription(clientSubscriptionId, 'root change');\n            case 2:\n            case \"end\":\n              return _context104.stop();\n          }\n        }, _callee104, this);\n      }));\n      function removeRootChangeListener(_x159) {\n        return _removeRootChangeListener.apply(this, arguments);\n      }\n      return removeRootChangeListener;\n    }()\n  }]);\n  return Connection;\n}();\n/**\n * Keypair signer interface\n */\n/**\n * An account keypair used for signing transactions.\n */\nvar Keypair = /*#__PURE__*/function () {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  function Keypair(keypair) {\n    _classCallCheck(this, Keypair);\n    this._keypair = void 0;\n    this._keypair = keypair !== null && keypair !== void 0 ? keypair : generateKeypair();\n  }\n  /**\n   * Generate a new random keypair\n   */\n  _createClass(Keypair, [{\n    key: \"publicKey\",\n    get:\n    /**\n     * The public key for this keypair\n     */\n\n    function get() {\n      return new PublicKey(this._keypair.publicKey);\n    }\n    /**\n     * The raw secret key for this keypair\n     */\n  }, {\n    key: \"secretKey\",\n    get: function get() {\n      return new Uint8Array(this._keypair.secretKey);\n    }\n  }], [{\n    key: \"generate\",\n    value: function generate() {\n      return new Keypair(generateKeypair());\n    }\n    /**\n     * Create a keypair from a raw secret key byte array.\n     *\n     * This method should only be used to recreate a keypair from a previously\n     * generated secret key. Generating keypairs from a random seed should be done\n     * with the {@link Keypair.fromSeed} method.\n     *\n     * @throws error if the provided secret key is invalid and validation is not skipped.\n     *\n     * @param secretKey secret key byte array\n     * @param options: skip secret key validation\n     */\n  }, {\n    key: \"fromSecretKey\",\n    value: function fromSecretKey(secretKey, options) {\n      if (secretKey.byteLength !== 64) {\n        throw new Error('bad secret key size');\n      }\n      var publicKey = secretKey.slice(32, 64);\n      if (!options || !options.skipValidation) {\n        var privateScalar = secretKey.slice(0, 32);\n        var computedPublicKey = getPublicKey(privateScalar);\n        for (var ii = 0; ii < 32; ii++) {\n          if (publicKey[ii] !== computedPublicKey[ii]) {\n            throw new Error('provided secretKey is invalid');\n          }\n        }\n      }\n      return new Keypair({\n        publicKey: publicKey,\n        secretKey: secretKey\n      });\n    }\n    /**\n     * Generate a keypair from a 32 byte seed.\n     *\n     * @param seed seed byte array\n     */\n  }, {\n    key: \"fromSeed\",\n    value: function fromSeed(seed) {\n      var publicKey = getPublicKey(seed);\n      var secretKey = new Uint8Array(64);\n      secretKey.set(seed);\n      secretKey.set(publicKey, 32);\n      return new Keypair({\n        publicKey: publicKey,\n        secretKey: secretKey\n      });\n    }\n  }]);\n  return Keypair;\n}();\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nvar LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('recentSlot'), BufferLayout.u8('bumpSeed')])\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64(), BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u32(), -8), 'addresses')])\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\nvar AddressLookupTableInstruction = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function AddressLookupTableInstruction() {\n    _classCallCheck(this, AddressLookupTableInstruction);\n  }\n  _createClass(AddressLookupTableInstruction, null, [{\n    key: \"decodeInstructionType\",\n    value: function decodeInstructionType(instruction) {\n      this.checkProgramId(instruction.programId);\n      var instructionTypeLayout = BufferLayout.u32('instruction');\n      var index = instructionTypeLayout.decode(instruction.data);\n      var type;\n      for (var _i7 = 0, _Object$entries2 = Object.entries(LOOKUP_TABLE_INSTRUCTION_LAYOUTS); _i7 < _Object$entries2.length; _i7++) {\n        var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i7], 2),\n          layoutType = _Object$entries2$_i[0],\n          layout = _Object$entries2$_i[1];\n        if (layout.index == index) {\n          type = layoutType;\n          break;\n        }\n      }\n      if (!type) {\n        throw new Error('Invalid Instruction. Should be a LookupTable Instruction');\n      }\n      return type;\n    }\n  }, {\n    key: \"decodeCreateLookupTable\",\n    value: function decodeCreateLookupTable(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeysLength(instruction.keys, 4);\n      var _decodeData$12 = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable, instruction.data),\n        recentSlot = _decodeData$12.recentSlot;\n      return {\n        authority: instruction.keys[1].pubkey,\n        payer: instruction.keys[2].pubkey,\n        recentSlot: Number(recentSlot)\n      };\n    }\n  }, {\n    key: \"decodeExtendLookupTable\",\n    value: function decodeExtendLookupTable(instruction) {\n      this.checkProgramId(instruction.programId);\n      if (instruction.keys.length < 2) {\n        throw new Error(\"invalid instruction; found \".concat(instruction.keys.length, \" keys, expected at least 2\"));\n      }\n      var _decodeData$13 = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable, instruction.data),\n        addresses = _decodeData$13.addresses;\n      return {\n        lookupTable: instruction.keys[0].pubkey,\n        authority: instruction.keys[1].pubkey,\n        payer: instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n        addresses: addresses.map(function (buffer) {\n          return new PublicKey(buffer);\n        })\n      };\n    }\n  }, {\n    key: \"decodeCloseLookupTable\",\n    value: function decodeCloseLookupTable(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeysLength(instruction.keys, 3);\n      return {\n        lookupTable: instruction.keys[0].pubkey,\n        authority: instruction.keys[1].pubkey,\n        recipient: instruction.keys[2].pubkey\n      };\n    }\n  }, {\n    key: \"decodeFreezeLookupTable\",\n    value: function decodeFreezeLookupTable(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeysLength(instruction.keys, 2);\n      return {\n        lookupTable: instruction.keys[0].pubkey,\n        authority: instruction.keys[1].pubkey\n      };\n    }\n  }, {\n    key: \"decodeDeactivateLookupTable\",\n    value: function decodeDeactivateLookupTable(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeysLength(instruction.keys, 2);\n      return {\n        lookupTable: instruction.keys[0].pubkey,\n        authority: instruction.keys[1].pubkey\n      };\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"checkProgramId\",\n    value: function checkProgramId(programId) {\n      if (!programId.equals(AddressLookupTableProgram.programId)) {\n        throw new Error('invalid instruction; programId is not AddressLookupTable Program');\n      }\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"checkKeysLength\",\n    value: function checkKeysLength(keys, expectedLength) {\n      if (keys.length < expectedLength) {\n        throw new Error(\"invalid instruction; found \".concat(keys.length, \" keys, expected at least \").concat(expectedLength));\n      }\n    }\n  }]);\n  return AddressLookupTableInstruction;\n}();\nvar AddressLookupTableProgram = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function AddressLookupTableProgram() {\n    _classCallCheck(this, AddressLookupTableProgram);\n  }\n  _createClass(AddressLookupTableProgram, null, [{\n    key: \"createLookupTable\",\n    value: function createLookupTable(params) {\n      var _PublicKey$findProgra = PublicKey.findProgramAddressSync([params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)], this.programId),\n        _PublicKey$findProgra2 = _slicedToArray(_PublicKey$findProgra, 2),\n        lookupTableAddress = _PublicKey$findProgra2[0],\n        bumpSeed = _PublicKey$findProgra2[1];\n      var type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n      var data = encodeData(type, {\n        recentSlot: BigInt(params.recentSlot),\n        bumpSeed: bumpSeed\n      });\n      var keys = [{\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false\n      }];\n      return [new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data\n      }), lookupTableAddress];\n    }\n  }, {\n    key: \"freezeLookupTable\",\n    value: function freezeLookupTable(params) {\n      var type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n      var data = encodeData(type);\n      var keys = [{\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false\n      }];\n      return new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data\n      });\n    }\n  }, {\n    key: \"extendLookupTable\",\n    value: function extendLookupTable(params) {\n      var type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n      var data = encodeData(type, {\n        addresses: params.addresses.map(function (addr) {\n          return addr.toBytes();\n        })\n      });\n      var keys = [{\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false\n      }];\n      if (params.payer) {\n        keys.push({\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false\n        });\n      }\n      return new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data\n      });\n    }\n  }, {\n    key: \"deactivateLookupTable\",\n    value: function deactivateLookupTable(params) {\n      var type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n      var data = encodeData(type);\n      var keys = [{\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false\n      }];\n      return new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data\n      });\n    }\n  }, {\n    key: \"closeLookupTable\",\n    value: function closeLookupTable(params) {\n      var type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n      var data = encodeData(type);\n      var keys = [{\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true\n      }];\n      return new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data\n      });\n    }\n  }]);\n  return AddressLookupTableProgram;\n}();\nAddressLookupTableProgram.programId = new PublicKey('AddressLookupTab1e1111111111111111111111111');\n\n/**\n * Compute Budget Instruction class\n */\nvar ComputeBudgetInstruction = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function ComputeBudgetInstruction() {\n    _classCallCheck(this, ComputeBudgetInstruction);\n  }\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  _createClass(ComputeBudgetInstruction, null, [{\n    key: \"decodeInstructionType\",\n    value: function decodeInstructionType(instruction) {\n      this.checkProgramId(instruction.programId);\n      var instructionTypeLayout = BufferLayout.u8('instruction');\n      var typeIndex = instructionTypeLayout.decode(instruction.data);\n      var type;\n      for (var _i8 = 0, _Object$entries3 = Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS); _i8 < _Object$entries3.length; _i8++) {\n        var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i8], 2),\n          ixType = _Object$entries3$_i[0],\n          layout = _Object$entries3$_i[1];\n        if (layout.index == typeIndex) {\n          type = ixType;\n          break;\n        }\n      }\n      if (!type) {\n        throw new Error('Instruction type incorrect; not a ComputeBudgetInstruction');\n      }\n      return type;\n    }\n    /**\n     * Decode request units compute budget instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeRequestUnits\",\n    value: function decodeRequestUnits(instruction) {\n      this.checkProgramId(instruction.programId);\n      var _decodeData$14 = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data),\n        units = _decodeData$14.units,\n        additionalFee = _decodeData$14.additionalFee;\n      return {\n        units: units,\n        additionalFee: additionalFee\n      };\n    }\n    /**\n     * Decode request heap frame compute budget instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeRequestHeapFrame\",\n    value: function decodeRequestHeapFrame(instruction) {\n      this.checkProgramId(instruction.programId);\n      var _decodeData$15 = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data),\n        bytes = _decodeData$15.bytes;\n      return {\n        bytes: bytes\n      };\n    }\n    /**\n     * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeSetComputeUnitLimit\",\n    value: function decodeSetComputeUnitLimit(instruction) {\n      this.checkProgramId(instruction.programId);\n      var _decodeData$16 = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit, instruction.data),\n        units = _decodeData$16.units;\n      return {\n        units: units\n      };\n    }\n    /**\n     * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeSetComputeUnitPrice\",\n    value: function decodeSetComputeUnitPrice(instruction) {\n      this.checkProgramId(instruction.programId);\n      var _decodeData$17 = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice, instruction.data),\n        microLamports = _decodeData$17.microLamports;\n      return {\n        microLamports: microLamports\n      };\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"checkProgramId\",\n    value: function checkProgramId(programId) {\n      if (!programId.equals(ComputeBudgetProgram.programId)) {\n        throw new Error('invalid instruction; programId is not ComputeBudgetProgram');\n      }\n    }\n  }]);\n  return ComputeBudgetInstruction;\n}();\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nvar COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units'), BufferLayout.u32('additionalFee')])\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')])\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units')])\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), u64('microLamports')])\n  }\n});\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nvar ComputeBudgetProgram = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function ComputeBudgetProgram() {\n    _classCallCheck(this, ComputeBudgetProgram);\n  }\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  _createClass(ComputeBudgetProgram, null, [{\n    key: \"requestUnits\",\n    value: function requestUnits(params) {\n      var type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n      var data = encodeData(type, params);\n      return new TransactionInstruction({\n        keys: [],\n        programId: this.programId,\n        data: data\n      });\n    }\n  }, {\n    key: \"requestHeapFrame\",\n    value: function requestHeapFrame(params) {\n      var type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n      var data = encodeData(type, params);\n      return new TransactionInstruction({\n        keys: [],\n        programId: this.programId,\n        data: data\n      });\n    }\n  }, {\n    key: \"setComputeUnitLimit\",\n    value: function setComputeUnitLimit(params) {\n      var type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n      var data = encodeData(type, params);\n      return new TransactionInstruction({\n        keys: [],\n        programId: this.programId,\n        data: data\n      });\n    }\n  }, {\n    key: \"setComputeUnitPrice\",\n    value: function setComputeUnitPrice(params) {\n      var type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n      var data = encodeData(type, {\n        microLamports: BigInt(params.microLamports)\n      });\n      return new TransactionInstruction({\n        keys: [],\n        programId: this.programId,\n        data: data\n      });\n    }\n  }]);\n  return ComputeBudgetProgram;\n}();\nComputeBudgetProgram.programId = new PublicKey('ComputeBudget111111111111111111111111111111');\nvar PRIVATE_KEY_BYTES$1 = 64;\nvar PUBLIC_KEY_BYTES$1 = 32;\nvar SIGNATURE_BYTES = 64;\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\nvar ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u8('padding'), BufferLayout.u16('signatureOffset'), BufferLayout.u16('signatureInstructionIndex'), BufferLayout.u16('publicKeyOffset'), BufferLayout.u16('publicKeyInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u16('messageInstructionIndex')]);\nvar Ed25519Program = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function Ed25519Program() {\n    _classCallCheck(this, Ed25519Program);\n  }\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  _createClass(Ed25519Program, null, [{\n    key: \"createInstructionWithPublicKey\",\n    value: function createInstructionWithPublicKey(params) {\n      var publicKey = params.publicKey,\n        message = params.message,\n        signature = params.signature,\n        instructionIndex = params.instructionIndex;\n      assert(publicKey.length === PUBLIC_KEY_BYTES$1, \"Public Key must be \".concat(PUBLIC_KEY_BYTES$1, \" bytes but received \").concat(publicKey.length, \" bytes\"));\n      assert(signature.length === SIGNATURE_BYTES, \"Signature must be \".concat(SIGNATURE_BYTES, \" bytes but received \").concat(signature.length, \" bytes\"));\n      var publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n      var signatureOffset = publicKeyOffset + publicKey.length;\n      var messageDataOffset = signatureOffset + signature.length;\n      var numSignatures = 1;\n      var instructionData = Buffer.alloc(messageDataOffset + message.length);\n      var index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n      : instructionIndex;\n      ED25519_INSTRUCTION_LAYOUT.encode({\n        numSignatures: numSignatures,\n        padding: 0,\n        signatureOffset: signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset: publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset: messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index\n      }, instructionData);\n      instructionData.fill(publicKey, publicKeyOffset);\n      instructionData.fill(signature, signatureOffset);\n      instructionData.fill(message, messageDataOffset);\n      return new TransactionInstruction({\n        keys: [],\n        programId: Ed25519Program.programId,\n        data: instructionData\n      });\n    }\n    /**\n     * Create an ed25519 instruction with a private key. The private key\n     * must be a buffer that is 64 bytes long.\n     */\n  }, {\n    key: \"createInstructionWithPrivateKey\",\n    value: function createInstructionWithPrivateKey(params) {\n      var privateKey = params.privateKey,\n        message = params.message,\n        instructionIndex = params.instructionIndex;\n      assert(privateKey.length === PRIVATE_KEY_BYTES$1, \"Private key must be \".concat(PRIVATE_KEY_BYTES$1, \" bytes but received \").concat(privateKey.length, \" bytes\"));\n      try {\n        var keypair = Keypair.fromSecretKey(privateKey);\n        var _publicKey2 = keypair.publicKey.toBytes();\n        var _signature5 = _sign(message, keypair.secretKey);\n        return this.createInstructionWithPublicKey({\n          publicKey: _publicKey2,\n          message: message,\n          signature: _signature5,\n          instructionIndex: instructionIndex\n        });\n      } catch (error) {\n        throw new Error(\"Error creating instruction; \".concat(error));\n      }\n    }\n  }]);\n  return Ed25519Program;\n}();\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');\n\n// library interoperable with the synchronous APIs in web3.js.\n\nsecp256k1.utils.hmacSha256Sync = function (key) {\n  var h = hmac.create(sha256, key);\n  for (var _len6 = arguments.length, msgs = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n    msgs[_key6 - 1] = arguments[_key6];\n  }\n  msgs.forEach(function (msg) {\n    return h.update(msg);\n  });\n  return h.digest();\n};\nvar ecdsaSign = function ecdsaSign(msgHash, privKey) {\n  return secp256k1.signSync(msgHash, privKey, {\n    der: false,\n    recovered: true\n  });\n};\nsecp256k1.utils.isValidPrivateKey;\nvar publicKeyCreate = secp256k1.getPublicKey;\nvar PRIVATE_KEY_BYTES = 32;\nvar ETHEREUM_ADDRESS_BYTES = 20;\nvar PUBLIC_KEY_BYTES = 64;\nvar SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\nvar SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\nvar Secp256k1Program = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function Secp256k1Program() {\n    _classCallCheck(this, Secp256k1Program);\n  }\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  _createClass(Secp256k1Program, null, [{\n    key: \"publicKeyToEthAddress\",\n    value: function publicKeyToEthAddress(publicKey) {\n      assert(publicKey.length === PUBLIC_KEY_BYTES, \"Public key must be \".concat(PUBLIC_KEY_BYTES, \" bytes but received \").concat(publicKey.length, \" bytes\"));\n      try {\n        return Buffer.from(keccak_256(toBuffer(publicKey))).slice(-ETHEREUM_ADDRESS_BYTES);\n      } catch (error) {\n        throw new Error(\"Error constructing Ethereum address: \".concat(error));\n      }\n    }\n    /**\n     * Create an secp256k1 instruction with a public key. The public key\n     * must be a buffer that is 64 bytes long.\n     */\n  }, {\n    key: \"createInstructionWithPublicKey\",\n    value: function createInstructionWithPublicKey(params) {\n      var publicKey = params.publicKey,\n        message = params.message,\n        signature = params.signature,\n        recoveryId = params.recoveryId,\n        instructionIndex = params.instructionIndex;\n      return Secp256k1Program.createInstructionWithEthAddress({\n        ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n        message: message,\n        signature: signature,\n        recoveryId: recoveryId,\n        instructionIndex: instructionIndex\n      });\n    }\n    /**\n     * Create an secp256k1 instruction with an Ethereum address. The address\n     * must be a hex string or a buffer that is 20 bytes long.\n     */\n  }, {\n    key: \"createInstructionWithEthAddress\",\n    value: function createInstructionWithEthAddress(params) {\n      var rawAddress = params.ethAddress,\n        message = params.message,\n        signature = params.signature,\n        recoveryId = params.recoveryId,\n        _params$instructionIn = params.instructionIndex,\n        instructionIndex = _params$instructionIn === void 0 ? 0 : _params$instructionIn;\n      var ethAddress;\n      if (typeof rawAddress === 'string') {\n        if (rawAddress.startsWith('0x')) {\n          ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n        } else {\n          ethAddress = Buffer.from(rawAddress, 'hex');\n        }\n      } else {\n        ethAddress = rawAddress;\n      }\n      assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, \"Address must be \".concat(ETHEREUM_ADDRESS_BYTES, \" bytes but received \").concat(ethAddress.length, \" bytes\"));\n      var dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n      var ethAddressOffset = dataStart;\n      var signatureOffset = dataStart + ethAddress.length;\n      var messageDataOffset = signatureOffset + signature.length + 1;\n      var numSignatures = 1;\n      var instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n      SECP256K1_INSTRUCTION_LAYOUT.encode({\n        numSignatures: numSignatures,\n        signatureOffset: signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset: ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset: messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId: recoveryId\n      }, instructionData);\n      instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n      return new TransactionInstruction({\n        keys: [],\n        programId: Secp256k1Program.programId,\n        data: instructionData\n      });\n    }\n    /**\n     * Create an secp256k1 instruction with a private key. The private key\n     * must be a buffer that is 32 bytes long.\n     */\n  }, {\n    key: \"createInstructionWithPrivateKey\",\n    value: function createInstructionWithPrivateKey(params) {\n      var pkey = params.privateKey,\n        message = params.message,\n        instructionIndex = params.instructionIndex;\n      assert(pkey.length === PRIVATE_KEY_BYTES, \"Private key must be \".concat(PRIVATE_KEY_BYTES, \" bytes but received \").concat(pkey.length, \" bytes\"));\n      try {\n        var privateKey = toBuffer(pkey);\n        var _publicKey3 = publicKeyCreate(privateKey, false\n        /* isCompressed */).slice(1); // throw away leading byte\n\n        var messageHash = Buffer.from(keccak_256(toBuffer(message)));\n        var _ecdsaSign = ecdsaSign(messageHash, privateKey),\n          _ecdsaSign2 = _slicedToArray(_ecdsaSign, 2),\n          _signature6 = _ecdsaSign2[0],\n          recoveryId = _ecdsaSign2[1];\n        return this.createInstructionWithPublicKey({\n          publicKey: _publicKey3,\n          message: message,\n          signature: _signature6,\n          recoveryId: recoveryId,\n          instructionIndex: instructionIndex\n        });\n      } catch (error) {\n        throw new Error(\"Error creating instruction; \".concat(error));\n      }\n    }\n  }]);\n  return Secp256k1Program;\n}();\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\n\nvar STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n/**\n * Stake account authority info\n */\nvar Authorized = /*#__PURE__*/_createClass( /** stake authority */\n\n/** withdraw authority */\n\n/**\n * Create a new Authorized object\n * @param staker the stake authority\n * @param withdrawer the withdraw authority\n */\nfunction Authorized(staker, withdrawer) {\n  _classCallCheck(this, Authorized);\n  this.staker = void 0;\n  this.withdrawer = void 0;\n  this.staker = staker;\n  this.withdrawer = withdrawer;\n});\n/**\n * Stake account lockup info\n */\nvar Lockup = /*#__PURE__*/_createClass( /** Unix timestamp of lockup expiration */\n\n/** Epoch of lockup expiration */\n\n/** Lockup custodian authority */\n\n/**\n * Create a new Lockup object\n */\nfunction Lockup(unixTimestamp, epoch, custodian) {\n  _classCallCheck(this, Lockup);\n  this.unixTimestamp = void 0;\n  this.epoch = void 0;\n  this.custodian = void 0;\n  this.unixTimestamp = unixTimestamp;\n  this.epoch = epoch;\n  this.custodian = custodian;\n}\n/**\n * Default, inactive Lockup value\n */);\n\nLockup.default = new Lockup(0, 0, PublicKey.default);\n\n/**\n * Stake Instruction class\n */\nvar StakeInstruction = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function StakeInstruction() {\n    _classCallCheck(this, StakeInstruction);\n  }\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  _createClass(StakeInstruction, null, [{\n    key: \"decodeInstructionType\",\n    value: function decodeInstructionType(instruction) {\n      this.checkProgramId(instruction.programId);\n      var instructionTypeLayout = BufferLayout.u32('instruction');\n      var typeIndex = instructionTypeLayout.decode(instruction.data);\n      var type;\n      for (var _i9 = 0, _Object$entries4 = Object.entries(STAKE_INSTRUCTION_LAYOUTS); _i9 < _Object$entries4.length; _i9++) {\n        var _Object$entries4$_i = _slicedToArray(_Object$entries4[_i9], 2),\n          ixType = _Object$entries4$_i[0],\n          layout = _Object$entries4$_i[1];\n        if (layout.index == typeIndex) {\n          type = ixType;\n          break;\n        }\n      }\n      if (!type) {\n        throw new Error('Instruction type incorrect; not a StakeInstruction');\n      }\n      return type;\n    }\n    /**\n     * Decode a initialize stake instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeInitialize\",\n    value: function decodeInitialize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n      var _decodeData$18 = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data),\n        authorized = _decodeData$18.authorized,\n        lockup = _decodeData$18.lockup;\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n        lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n      };\n    }\n    /**\n     * Decode a delegate stake instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeDelegate\",\n    value: function decodeDelegate(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 6);\n      decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        votePubkey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[5].pubkey\n      };\n    }\n    /**\n     * Decode an authorize stake instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeAuthorize\",\n    value: function decodeAuthorize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      var _decodeData$19 = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data),\n        newAuthorized = _decodeData$19.newAuthorized,\n        stakeAuthorizationType = _decodeData$19.stakeAuthorizationType;\n      var o = {\n        stakePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey,\n        newAuthorizedPubkey: new PublicKey(newAuthorized),\n        stakeAuthorizationType: {\n          index: stakeAuthorizationType\n        }\n      };\n      if (instruction.keys.length > 3) {\n        o.custodianPubkey = instruction.keys[3].pubkey;\n      }\n      return o;\n    }\n    /**\n     * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeAuthorizeWithSeed\",\n    value: function decodeAuthorizeWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 2);\n      var _decodeData$20 = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data),\n        newAuthorized = _decodeData$20.newAuthorized,\n        stakeAuthorizationType = _decodeData$20.stakeAuthorizationType,\n        authoritySeed = _decodeData$20.authoritySeed,\n        authorityOwner = _decodeData$20.authorityOwner;\n      var o = {\n        stakePubkey: instruction.keys[0].pubkey,\n        authorityBase: instruction.keys[1].pubkey,\n        authoritySeed: authoritySeed,\n        authorityOwner: new PublicKey(authorityOwner),\n        newAuthorizedPubkey: new PublicKey(newAuthorized),\n        stakeAuthorizationType: {\n          index: stakeAuthorizationType\n        }\n      };\n      if (instruction.keys.length > 3) {\n        o.custodianPubkey = instruction.keys[3].pubkey;\n      }\n      return o;\n    }\n    /**\n     * Decode a split stake instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeSplit\",\n    value: function decodeSplit(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      var _decodeData$21 = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data),\n        lamports = _decodeData$21.lamports;\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        splitStakePubkey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey,\n        lamports: lamports\n      };\n    }\n    /**\n     * Decode a merge stake instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeMerge\",\n    value: function decodeMerge(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        sourceStakePubKey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[4].pubkey\n      };\n    }\n    /**\n     * Decode a withdraw stake instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeWithdraw\",\n    value: function decodeWithdraw(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 5);\n      var _decodeData$22 = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data),\n        lamports = _decodeData$22.lamports;\n      var o = {\n        stakePubkey: instruction.keys[0].pubkey,\n        toPubkey: instruction.keys[1].pubkey,\n        authorizedPubkey: instruction.keys[4].pubkey,\n        lamports: lamports\n      };\n      if (instruction.keys.length > 5) {\n        o.custodianPubkey = instruction.keys[5].pubkey;\n      }\n      return o;\n    }\n    /**\n     * Decode a deactivate stake instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeDeactivate\",\n    value: function decodeDeactivate(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n      return {\n        stakePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey\n      };\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"checkProgramId\",\n    value: function checkProgramId(programId) {\n      if (!programId.equals(StakeProgram.programId)) {\n        throw new Error('invalid instruction; programId is not StakeProgram');\n      }\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"checkKeyLength\",\n    value: function checkKeyLength(keys, expectedLength) {\n      if (keys.length < expectedLength) {\n        throw new Error(\"invalid instruction; found \".concat(keys.length, \" keys, expected at least \").concat(expectedLength));\n      }\n    }\n  }]);\n  return StakeInstruction;\n}();\n/**\n * An enumeration of valid StakeInstructionType's\n */\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nvar STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nvar StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Stake program\n */\nvar StakeProgram = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function StakeProgram() {\n    _classCallCheck(this, StakeProgram);\n  }\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  _createClass(StakeProgram, null, [{\n    key: \"initialize\",\n    value: function initialize(params) {\n      var stakePubkey = params.stakePubkey,\n        authorized = params.authorized,\n        maybeLockup = params.lockup;\n      var lockup = maybeLockup || Lockup.default;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n      var data = encodeData(type, {\n        authorized: {\n          staker: toBuffer(authorized.staker.toBuffer()),\n          withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n        },\n        lockup: {\n          unixTimestamp: lockup.unixTimestamp,\n          epoch: lockup.epoch,\n          custodian: toBuffer(lockup.custodian.toBuffer())\n        }\n      });\n      var instructionData = {\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      };\n      return new TransactionInstruction(instructionData);\n    }\n    /**\n     * Generate a Transaction that creates a new Stake account at\n     *   an address generated with `from`, a seed, and the Stake programId\n     */\n  }, {\n    key: \"createAccountWithSeed\",\n    value: function createAccountWithSeed(params) {\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId\n      }));\n      var stakePubkey = params.stakePubkey,\n        authorized = params.authorized,\n        lockup = params.lockup;\n      return transaction.add(this.initialize({\n        stakePubkey: stakePubkey,\n        authorized: authorized,\n        lockup: lockup\n      }));\n    }\n    /**\n     * Generate a Transaction that creates a new Stake account\n     */\n  }, {\n    key: \"createAccount\",\n    value: function createAccount(params) {\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId\n      }));\n      var stakePubkey = params.stakePubkey,\n        authorized = params.authorized,\n        lockup = params.lockup;\n      return transaction.add(this.initialize({\n        stakePubkey: stakePubkey,\n        authorized: authorized,\n        lockup: lockup\n      }));\n    }\n    /**\n     * Generate a Transaction that delegates Stake tokens to a validator\n     * Vote PublicKey. This transaction can also be used to redelegate Stake\n     * to a new validator Vote PublicKey.\n     */\n  }, {\n    key: \"delegate\",\n    value: function delegate(params) {\n      var stakePubkey = params.stakePubkey,\n        authorizedPubkey = params.authorizedPubkey,\n        votePubkey = params.votePubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n      var data = encodeData(type);\n      return new Transaction().add({\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: votePubkey,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_CLOCK_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: STAKE_CONFIG_ID,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a Transaction that authorizes a new PublicKey as Staker\n     * or Withdrawer on the Stake account.\n     */\n  }, {\n    key: \"authorize\",\n    value: function authorize(params) {\n      var stakePubkey = params.stakePubkey,\n        authorizedPubkey = params.authorizedPubkey,\n        newAuthorizedPubkey = params.newAuthorizedPubkey,\n        stakeAuthorizationType = params.stakeAuthorizationType,\n        custodianPubkey = params.custodianPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n      var data = encodeData(type, {\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        stakeAuthorizationType: stakeAuthorizationType.index\n      });\n      var keys = [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n      if (custodianPubkey) {\n        keys.push({\n          pubkey: custodianPubkey,\n          isSigner: false,\n          isWritable: false\n        });\n      }\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a Transaction that authorizes a new PublicKey as Staker\n     * or Withdrawer on the Stake account.\n     */\n  }, {\n    key: \"authorizeWithSeed\",\n    value: function authorizeWithSeed(params) {\n      var stakePubkey = params.stakePubkey,\n        authorityBase = params.authorityBase,\n        authoritySeed = params.authoritySeed,\n        authorityOwner = params.authorityOwner,\n        newAuthorizedPubkey = params.newAuthorizedPubkey,\n        stakeAuthorizationType = params.stakeAuthorizationType,\n        custodianPubkey = params.custodianPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n      var data = encodeData(type, {\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        stakeAuthorizationType: stakeAuthorizationType.index,\n        authoritySeed: authoritySeed,\n        authorityOwner: toBuffer(authorityOwner.toBuffer())\n      });\n      var keys = [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorityBase,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }];\n      if (custodianPubkey) {\n        keys.push({\n          pubkey: custodianPubkey,\n          isSigner: false,\n          isWritable: false\n        });\n      }\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"splitInstruction\",\n    value: function splitInstruction(params) {\n      var stakePubkey = params.stakePubkey,\n        authorizedPubkey = params.authorizedPubkey,\n        splitStakePubkey = params.splitStakePubkey,\n        lamports = params.lamports;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Split;\n      var data = encodeData(type, {\n        lamports: lamports\n      });\n      return new TransactionInstruction({\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: splitStakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a Transaction that splits Stake tokens into another stake account\n     */\n  }, {\n    key: \"split\",\n    value: function split(params) {\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId\n      }));\n      return transaction.add(this.splitInstruction(params));\n    }\n    /**\n     * Generate a Transaction that splits Stake tokens into another account\n     * derived from a base public key and seed\n     */\n  }, {\n    key: \"splitWithSeed\",\n    value: function splitWithSeed(params) {\n      var stakePubkey = params.stakePubkey,\n        authorizedPubkey = params.authorizedPubkey,\n        splitStakePubkey = params.splitStakePubkey,\n        basePubkey = params.basePubkey,\n        seed = params.seed,\n        lamports = params.lamports;\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey: basePubkey,\n        seed: seed,\n        space: this.space,\n        programId: this.programId\n      }));\n      return transaction.add(this.splitInstruction({\n        stakePubkey: stakePubkey,\n        authorizedPubkey: authorizedPubkey,\n        splitStakePubkey: splitStakePubkey,\n        lamports: lamports\n      }));\n    }\n    /**\n     * Generate a Transaction that merges Stake accounts.\n     */\n  }, {\n    key: \"merge\",\n    value: function merge(params) {\n      var stakePubkey = params.stakePubkey,\n        sourceStakePubKey = params.sourceStakePubKey,\n        authorizedPubkey = params.authorizedPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n      var data = encodeData(type);\n      return new Transaction().add({\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: sourceStakePubKey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_CLOCK_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a Transaction that withdraws deactivated Stake tokens.\n     */\n  }, {\n    key: \"withdraw\",\n    value: function withdraw(params) {\n      var stakePubkey = params.stakePubkey,\n        authorizedPubkey = params.authorizedPubkey,\n        toPubkey = params.toPubkey,\n        lamports = params.lamports,\n        custodianPubkey = params.custodianPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n      var data = encodeData(type, {\n        lamports: lamports\n      });\n      var keys = [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n      if (custodianPubkey) {\n        keys.push({\n          pubkey: custodianPubkey,\n          isSigner: false,\n          isWritable: false\n        });\n      }\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a Transaction that deactivates Stake tokens.\n     */\n  }, {\n    key: \"deactivate\",\n    value: function deactivate(params) {\n      var stakePubkey = params.stakePubkey,\n        authorizedPubkey = params.authorizedPubkey;\n      var type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n      var data = encodeData(type);\n      return new Transaction().add({\n        keys: [{\n          pubkey: stakePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_CLOCK_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: authorizedPubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      });\n    }\n  }]);\n  return StakeProgram;\n}();\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\nStakeProgram.space = 200;\n\n/**\n * Vote account info\n */\nvar VoteInit = /*#__PURE__*/_createClass( /** [0, 100] */\nfunction VoteInit(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n  _classCallCheck(this, VoteInit);\n  this.nodePubkey = void 0;\n  this.authorizedVoter = void 0;\n  this.authorizedWithdrawer = void 0;\n  this.commission = void 0;\n  this.nodePubkey = nodePubkey;\n  this.authorizedVoter = authorizedVoter;\n  this.authorizedWithdrawer = authorizedWithdrawer;\n  this.commission = commission;\n});\n/**\n * Create vote account transaction params\n */\n/**\n * Vote Instruction class\n */\nvar VoteInstruction = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function VoteInstruction() {\n    _classCallCheck(this, VoteInstruction);\n  }\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  _createClass(VoteInstruction, null, [{\n    key: \"decodeInstructionType\",\n    value: function decodeInstructionType(instruction) {\n      this.checkProgramId(instruction.programId);\n      var instructionTypeLayout = BufferLayout.u32('instruction');\n      var typeIndex = instructionTypeLayout.decode(instruction.data);\n      var type;\n      for (var _i10 = 0, _Object$entries5 = Object.entries(VOTE_INSTRUCTION_LAYOUTS); _i10 < _Object$entries5.length; _i10++) {\n        var _Object$entries5$_i = _slicedToArray(_Object$entries5[_i10], 2),\n          ixType = _Object$entries5$_i[0],\n          layout = _Object$entries5$_i[1];\n        if (layout.index == typeIndex) {\n          type = ixType;\n          break;\n        }\n      }\n      if (!type) {\n        throw new Error('Instruction type incorrect; not a VoteInstruction');\n      }\n      return type;\n    }\n    /**\n     * Decode an initialize vote instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeInitializeAccount\",\n    value: function decodeInitializeAccount(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 4);\n      var _decodeData$23 = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data),\n        voteInit = _decodeData$23.voteInit;\n      return {\n        votePubkey: instruction.keys[0].pubkey,\n        nodePubkey: instruction.keys[3].pubkey,\n        voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n      };\n    }\n    /**\n     * Decode an authorize instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeAuthorize\",\n    value: function decodeAuthorize(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      var _decodeData$24 = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data),\n        newAuthorized = _decodeData$24.newAuthorized,\n        voteAuthorizationType = _decodeData$24.voteAuthorizationType;\n      return {\n        votePubkey: instruction.keys[0].pubkey,\n        authorizedPubkey: instruction.keys[2].pubkey,\n        newAuthorizedPubkey: new PublicKey(newAuthorized),\n        voteAuthorizationType: {\n          index: voteAuthorizationType\n        }\n      };\n    }\n    /**\n     * Decode an authorize instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeAuthorizeWithSeed\",\n    value: function decodeAuthorizeWithSeed(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      var _decodeData$25 = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data),\n        _decodeData$25$voteAu = _decodeData$25.voteAuthorizeWithSeedArgs,\n        currentAuthorityDerivedKeyOwnerPubkey = _decodeData$25$voteAu.currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed = _decodeData$25$voteAu.currentAuthorityDerivedKeySeed,\n        newAuthorized = _decodeData$25$voteAu.newAuthorized,\n        voteAuthorizationType = _decodeData$25$voteAu.voteAuthorizationType;\n      return {\n        currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n        currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(currentAuthorityDerivedKeyOwnerPubkey),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorizedPubkey: new PublicKey(newAuthorized),\n        voteAuthorizationType: {\n          index: voteAuthorizationType\n        },\n        votePubkey: instruction.keys[0].pubkey\n      };\n    }\n    /**\n     * Decode a withdraw instruction and retrieve the instruction params.\n     */\n  }, {\n    key: \"decodeWithdraw\",\n    value: function decodeWithdraw(instruction) {\n      this.checkProgramId(instruction.programId);\n      this.checkKeyLength(instruction.keys, 3);\n      var _decodeData$26 = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data),\n        lamports = _decodeData$26.lamports;\n      return {\n        votePubkey: instruction.keys[0].pubkey,\n        authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n        lamports: lamports,\n        toPubkey: instruction.keys[1].pubkey\n      };\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"checkProgramId\",\n    value: function checkProgramId(programId) {\n      if (!programId.equals(VoteProgram.programId)) {\n        throw new Error('invalid instruction; programId is not VoteProgram');\n      }\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"checkKeyLength\",\n    value: function checkKeyLength(keys, expectedLength) {\n      if (keys.length < expectedLength) {\n        throw new Error(\"invalid instruction; found \".concat(keys.length, \" keys, expected at least \").concat(expectedLength));\n      }\n    }\n  }]);\n  return VoteInstruction;\n}();\n/**\n * An enumeration of valid VoteInstructionType's\n */\nvar VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteAuthorizeWithSeedArgs()])\n  }\n});\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nvar VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Vote program\n */\nvar VoteProgram = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function VoteProgram() {\n    _classCallCheck(this, VoteProgram);\n  }\n  /**\n   * Public key that identifies the Vote program\n   */\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  _createClass(VoteProgram, null, [{\n    key: \"initializeAccount\",\n    value: function initializeAccount(params) {\n      var votePubkey = params.votePubkey,\n        nodePubkey = params.nodePubkey,\n        voteInit = params.voteInit;\n      var type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n      var data = encodeData(type, {\n        voteInit: {\n          nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n          authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n          authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n          commission: voteInit.commission\n        }\n      });\n      var instructionData = {\n        keys: [{\n          pubkey: votePubkey,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: SYSVAR_CLOCK_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }, {\n          pubkey: nodePubkey,\n          isSigner: true,\n          isWritable: false\n        }],\n        programId: this.programId,\n        data: data\n      };\n      return new TransactionInstruction(instructionData);\n    }\n    /**\n     * Generate a transaction that creates a new Vote account.\n     */\n  }, {\n    key: \"createAccount\",\n    value: function createAccount(params) {\n      var transaction = new Transaction();\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId\n      }));\n      return transaction.add(this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit\n      }));\n    }\n    /**\n     * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n     */\n  }, {\n    key: \"authorize\",\n    value: function authorize(params) {\n      var votePubkey = params.votePubkey,\n        authorizedPubkey = params.authorizedPubkey,\n        newAuthorizedPubkey = params.newAuthorizedPubkey,\n        voteAuthorizationType = params.voteAuthorizationType;\n      var type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n      var data = encodeData(type, {\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index\n      });\n      var keys = [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n     * where the current Voter or Withdrawer authority is a derived key.\n     */\n  }, {\n    key: \"authorizeWithSeed\",\n    value: function authorizeWithSeed(params) {\n      var currentAuthorityDerivedKeyBasePubkey = params.currentAuthorityDerivedKeyBasePubkey,\n        currentAuthorityDerivedKeyOwnerPubkey = params.currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed = params.currentAuthorityDerivedKeySeed,\n        newAuthorizedPubkey = params.newAuthorizedPubkey,\n        voteAuthorizationType = params.voteAuthorizationType,\n        votePubkey = params.votePubkey;\n      var type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n      var data = encodeData(type, {\n        voteAuthorizeWithSeedArgs: {\n          currentAuthorityDerivedKeyOwnerPubkey: toBuffer(currentAuthorityDerivedKeyOwnerPubkey.toBuffer()),\n          currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n          newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n          voteAuthorizationType: voteAuthorizationType.index\n        }\n      });\n      var keys = [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction to withdraw from a Vote account.\n     */\n  }, {\n    key: \"withdraw\",\n    value: function withdraw(params) {\n      var votePubkey = params.votePubkey,\n        authorizedWithdrawerPubkey = params.authorizedWithdrawerPubkey,\n        lamports = params.lamports,\n        toPubkey = params.toPubkey;\n      var type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n      var data = encodeData(type, {\n        lamports: lamports\n      });\n      var keys = [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedWithdrawerPubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n      return new Transaction().add({\n        keys: keys,\n        programId: this.programId,\n        data: data\n      });\n    }\n    /**\n     * Generate a transaction to withdraw safely from a Vote account.\n     *\n     * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n     * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n     * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n     * `withdraw` method directly.\n     */\n  }, {\n    key: \"safeWithdraw\",\n    value: function safeWithdraw(params, currentVoteAccountBalance, rentExemptMinimum) {\n      if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n        throw new Error('Withdraw will leave vote account with insuffcient funds.');\n      }\n      return VoteProgram.withdraw(params);\n    }\n  }]);\n  return VoteProgram;\n}();\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\nVoteProgram.space = 3731;\nvar VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n/**\n * @internal\n */\n\nvar InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string())\n});\n/**\n * ValidatorInfo class\n */\nvar ValidatorInfo = /*#__PURE__*/function () {\n  /**\n   * validator public key\n   */\n\n  /**\n   * validator information\n   */\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  function ValidatorInfo(key, info) {\n    _classCallCheck(this, ValidatorInfo);\n    this.key = void 0;\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  _createClass(ValidatorInfo, null, [{\n    key: \"fromConfigData\",\n    value: function fromConfigData(buffer) {\n      var byteArray = _toConsumableArray(buffer);\n      var configKeyCount = decodeLength(byteArray);\n      if (configKeyCount !== 2) return null;\n      var configKeys = [];\n      for (var i = 0; i < 2; i++) {\n        var _publicKey4 = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n        byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n        var isSigner = byteArray.slice(0, 1)[0] === 1;\n        byteArray = byteArray.slice(1);\n        configKeys.push({\n          publicKey: _publicKey4,\n          isSigner: isSigner\n        });\n      }\n      if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n        if (configKeys[1].isSigner) {\n          var rawInfo = rustString().decode(Buffer.from(byteArray));\n          var info = JSON.parse(rawInfo);\n          assert$1(info, InfoString);\n          return new ValidatorInfo(configKeys[1].publicKey, info);\n        }\n      }\n      return null;\n    }\n  }]);\n  return ValidatorInfo;\n}();\nvar VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nvar VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission'), BufferLayout.nu64(),\n// votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64(),\n// authorizedVoters.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout.offset(BufferLayout.u32(), -8), 'authorizedVoters'), BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey('authorizedPubkey'), BufferLayout.nu64('epochOfLastAuthorizedSwitch'), BufferLayout.nu64('targetEpoch')]), 32, 'buf'), BufferLayout.nu64('idx'), BufferLayout.u8('isEmpty')], 'priorVoters'), BufferLayout.nu64(),\n// epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits'), BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')], 'lastTimestamp')]);\n\n/**\n * VoteAccount class\n */\nvar VoteAccount = /*#__PURE__*/function () {\n  /**\n   * @internal\n   */\n  function VoteAccount(args) {\n    _classCallCheck(this, VoteAccount);\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  _createClass(VoteAccount, null, [{\n    key: \"fromAccountData\",\n    value: function fromAccountData(buffer) {\n      var versionOffset = 4;\n      var va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n      var rootSlot = va.rootSlot;\n      if (!va.rootSlotValid) {\n        rootSlot = null;\n      }\n      return new VoteAccount({\n        nodePubkey: new PublicKey(va.nodePubkey),\n        authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n        commission: va.commission,\n        votes: va.votes,\n        rootSlot: rootSlot,\n        authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n        priorVoters: getPriorVoters(va.priorVoters),\n        epochCredits: va.epochCredits,\n        lastTimestamp: va.lastTimestamp\n      });\n    }\n  }]);\n  return VoteAccount;\n}();\nfunction parseAuthorizedVoter(_ref43) {\n  var authorizedVoter = _ref43.authorizedVoter,\n    epoch = _ref43.epoch;\n  return {\n    epoch: epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\nfunction parsePriorVoters(_ref44) {\n  var authorizedPubkey = _ref44.authorizedPubkey,\n    epochOfLastAuthorizedSwitch = _ref44.epochOfLastAuthorizedSwitch,\n    targetEpoch = _ref44.targetEpoch;\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch: epochOfLastAuthorizedSwitch,\n    targetEpoch: targetEpoch\n  };\n}\nfunction getPriorVoters(_ref45) {\n  var buf = _ref45.buf,\n    idx = _ref45.idx,\n    isEmpty = _ref45.isEmpty;\n  if (isEmpty) {\n    return [];\n  }\n  return [].concat(_toConsumableArray(buf.slice(idx + 1).map(parsePriorVoters)), _toConsumableArray(buf.slice(0, idx).map(parsePriorVoters)));\n}\nvar endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nfunction clusterApiUrl(cluster, tls) {\n  var key = tls === false ? 'http' : 'https';\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n  var url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(\"Unknown \".concat(key, \" cluster: \").concat(cluster));\n  }\n  return url;\n}\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\n// eslint-disable-next-line no-redeclare\nfunction sendAndConfirmRawTransaction(_x160, _x161, _x162, _x163) {\n  return _sendAndConfirmRawTransaction.apply(this, arguments);\n}\n/**\n * There are 1-billion lamports in one SOL\n */\nfunction _sendAndConfirmRawTransaction() {\n  _sendAndConfirmRawTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee106(connection, rawTransaction, confirmationStrategyOrConfirmOptions, maybeConfirmOptions) {\n    var confirmationStrategy, options, sendOptions, signature, commitment, confirmationPromise, status;\n    return _regeneratorRuntime().wrap(function _callee106$(_context106) {\n      while (1) switch (_context106.prev = _context106.next) {\n        case 0:\n          if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'lastValidBlockHeight')) {\n            confirmationStrategy = confirmationStrategyOrConfirmOptions;\n            options = maybeConfirmOptions;\n          } else if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'nonceValue')) {\n            confirmationStrategy = confirmationStrategyOrConfirmOptions;\n            options = maybeConfirmOptions;\n          } else {\n            options = confirmationStrategyOrConfirmOptions;\n          }\n          sendOptions = options && {\n            skipPreflight: options.skipPreflight,\n            preflightCommitment: options.preflightCommitment || options.commitment,\n            minContextSlot: options.minContextSlot\n          };\n          _context106.next = 4;\n          return connection.sendRawTransaction(rawTransaction, sendOptions);\n        case 4:\n          signature = _context106.sent;\n          commitment = options && options.commitment;\n          confirmationPromise = confirmationStrategy ? connection.confirmTransaction(confirmationStrategy, commitment) : connection.confirmTransaction(signature, commitment);\n          _context106.next = 9;\n          return confirmationPromise;\n        case 9:\n          status = _context106.sent.value;\n          if (!status.err) {\n            _context106.next = 12;\n            break;\n          }\n          throw new Error(\"Raw transaction \".concat(signature, \" failed (\").concat(JSON.stringify(status), \")\"));\n        case 12:\n          return _context106.abrupt(\"return\", signature);\n        case 13:\n        case \"end\":\n          return _context106.stop();\n      }\n    }, _callee106);\n  }));\n  return _sendAndConfirmRawTransaction.apply(this, arguments);\n}\nvar LAMPORTS_PER_SOL = 1000000000;\nexport { Account, AddressLookupTableAccount, AddressLookupTableInstruction, AddressLookupTableProgram, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, COMPUTE_BUDGET_INSTRUCTION_LAYOUTS, ComputeBudgetInstruction, ComputeBudgetProgram, Connection, Ed25519Program, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, LOOKUP_TABLE_INSTRUCTION_LAYOUTS, Loader, Lockup, MAX_SEED_LENGTH, Message, MessageAccountKeys, MessageV0, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PUBLIC_KEY_LENGTH, PublicKey, SIGNATURE_LENGTH_IN_BYTES, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, SolanaJSONRPCError, SolanaJSONRPCErrorCode, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionExpiredBlockheightExceededError, TransactionExpiredNonceInvalidError, TransactionExpiredTimeoutError, TransactionInstruction, TransactionMessage, TransactionStatus, VALIDATOR_INFO_KEY, VERSION_PREFIX_MASK, VOTE_PROGRAM_ID, ValidatorInfo, VersionedMessage, VersionedTransaction, VoteAccount, VoteAuthorizationLayout, VoteInit, VoteInstruction, VoteProgram, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };","map":{"version":3,"mappings":"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","names":["ed25519","utils","sha512Sync","sha512","concatBytes","generatePrivateKey","randomPrivateKey","generateKeypair","privateScalar","publicKey","getPublicKey","secretKey","Uint8Array","set","sync","isOnCurve","Point","fromHex","sign","message","slice","verify","toBuffer","arr","Buffer","isBuffer","from","buffer","byteOffset","byteLength","Struct","constructor","properties","Object","assign","encode","serialize","SOLANA_SCHEMA","data","deserialize","deserializeUnchecked","Enum","enum","keys","length","Error","map","key","Map","MAX_SEED_LENGTH","PUBLIC_KEY_LENGTH","isPublicKeyData","value","_bn","undefined","uniquePublicKeyCounter","Symbol","toStringTag","PublicKey","decoded","bs58","decode","BN","equals","eq","toBase58","toBytes","toJSON","buf","b","toArrayLike","zeroPad","alloc","copy","toString","fromPublicKey","seed","programId","concat","publicKeyBytes","sha256","seeds","forEach","TypeError","createProgramAddressSync","nonce","address","seedsWithNonce","err","findProgramAddressSync","pubkeyData","pubkey","_Symbol$toStringTag","default","kind","fields","Account","_publicKey","_secretKey","secretKeyBuffer","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","VERSION_PREFIX_MASK","SIGNATURE_LENGTH_IN_BYTES","TransactionExpiredBlockheightExceededError","signature","defineProperty","prototype","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","push","writable","readonly","get","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","property","BufferLayout","blob","rustString","rsl","struct","u32","offset","_decode","bind","_encode","rslShim","str","chars","span","authorized","lockup","ns64","voteInit","u8","voteAuthorizeWithSeedArgs","getAlloc","type","getItemAlloc","item","field","Array","isArray","elementLayout","layout","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","condition","CompiledKeys","payer","keyMetaMap","getMessageComponents","mapEntries","entries","assert","writableSigners","filter","isSigner","isWritable","readonlySigners","writableNonSigners","readonlyNonSigners","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","drainKeysFoundInLookupTable","state","addresses","keyMeta","isInvoked","writableIndexes","drainedWritableKeys","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","delete","getOrInsertDefault","payerKeyMeta","ix","accountMeta","Message","args","accountKeys","recentBlockhash","indexToProgramIds","account","accounts","getAccountKeys","isAccountSigner","isAccountWritable","numSignedAccounts","unsignedAccountIndex","numUnsignedAccounts","numWritableUnsignedAccounts","numWritableSignedAccounts","isProgramId","has","programIds","values","nonProgramIds","_","numKeys","keyCount","shortvec","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","seq","signDataLayout","Layout","transaction","signData","compiledKeys","compile","payerKey","byteArray","accountCount","i","dataSlice","messageArgs","MessageV0","compiledInstructions","addressTableLookups","count","lookup","numAccountKeysFromLookups","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","lookupAccountKeysIndex","numWritableLookupAccountKeys","reduce","tableLookup","tableAccount","find","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","MESSAGE_VERSION_0_PREFIX","serializedMessageLength","prefix","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","addressTableLookupLayout","lookupTableAccounts","extractResult","addressTableLookup","maskedPrefix","version","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","hasOwnProperty","call","minContextSlot","blockhash","nonceInstruction","signers","add","items","compileMessage","JSON","stringify","console","warn","accountMetas","includes","uniqueMetas","pubkeyString","uniqueIndex","x","sort","y","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","indexOf","invariant","_compile","valid","every","pair","serializeMessage","connection","getFeeForMessage","setSigners","seen","Set","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","_verifySignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","TransactionMessage","compileToLegacyMessage","compileToV0Message","compiledIx","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","messageData","signerPubkeys","signerIndex","signaturesLength","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","options","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","confirmTransaction","abortSignal","status","nonceAccountPubkey","nonceValue","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","decodeData","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","encodeDecode","bigInt","bigIntLayout","src","toBigIntLE","toBufferLE","u64","SystemInstruction","checkProgramId","instructionTypeLayout","typeIndex","SYSTEM_INSTRUCTION_LAYOUTS","ixType","checkKeyLength","Create","lamports","space","fromPubkey","newAccountPubkey","Transfer","toPubkey","TransferWithSeed","basePubkey","Allocate","accountPubkey","AllocateWithSeed","base","Assign","AssignWithSeed","CreateWithSeed","InitializeNonceAccount","noncePubkey","AdvanceNonceAccount","WithdrawNonceAccount","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","UpgradeNonceAccount","params","BigInt","createAccountWithSeed","createAccount","initParams","nonceInitialize","instructionData","CHUNK_SIZE","Loader","Math","ceil","chunkSize","program","getMinimumBalanceForRentExemption","balanceNeeded","getAccountInfo","programInfo","executable","error","allocate","owner","transfer","dataLayout","array","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","getMinNumSignatures","elf","loaderProgramId","load","objToString","objKeys","obj","name","val","isArrayProp","max","propVal","toStr","isFinite","fastStableStringify","returnVal","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCErrorCode","JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP","JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE","JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY","JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_NO_SNAPSHOT","JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX","JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE","JSON_RPC_SCAN_ERROR","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH","JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET","JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION","JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED","SolanaJSONRPCError","customMessage","code","globalThis","fetch","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","LOOKUP_TABLE_META_SIZE","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","makeWebsocketUrl","endpoint","matches","match","hostish","portWithColon","rest","protocol","startsWith","startPort","parseInt","websocketPort","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","assertEndpointUrl","putativeUrl","test","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","createRpcResult","result","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","create","jsonRpcResultAndContext","context","number","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","commission","GetInflationRateResult","total","validator","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","createRpcClient","url","httpHeaders","customFetch","fetchMiddleware","disableRetryOnRateLimit","httpAgent","fetchImpl","agent","fetchWithMiddleware","info","init","reject","modifiedInfo","modifiedInit","modifiedFetchArgs","clientBrowser","RpcClient","request","callback","method","body","headers","COMMON_HTTP_HEADERS","too_many_requests_retries","waitTime","res","log","statusText","text","ok","createRpcRequest","client","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","process","Connection","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","wsEndpoint","confirmTransactionInitialTimeout","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","_buildArgs","unsafeRes","getBalanceAndContext","then","catch","e","configArg","tokenMintAddress","tokenAddress","ownerAddress","_args","arg","mintAddress","getAccountInfoAndContext","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","configOrCommitment","encoding","configWithoutEncoding","strategy","rawSignature","aborted","reason","decodedSignature","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getCancellationPromise","signal","addEventListener","getTransactionConfirmationPromise","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","done","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","abortConfirmation","removeSignatureListener","expiryPromise","checkBlockHeight","getBlockHeight","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","cancellationPromise","race","outcome","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","signatureStatus","_signatureStatus","commitmentForStatus","timeoutMs","timeoutId","TIMED_OUT","clearTimeout","startSlot","limit","getSignatureStatuses","getSupply","excludeNonCirculatingAccountsList","epochSchedule","wireMessage","getRecentBlockhashAndContext","getLatestBlockhashAndContext","_buildArgsAtLeastConfirmed","transactionDetails","c","extra","block","endSlot","getFirstAvailableBlock","firstAvailableBlock","getConfirmedBlockSignatures","until","getSlot","highestConfirmedRoot","before","getConfirmedSignaturesForAddress2","confirmedSignatureInfo","accountInfo","fromAccountData","to","disableCache","timeSinceFetch","Date","now","expired","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getLatestBlockhash","transactionOrMessage","configOrSigners","includeAccounts","versionedTx","encodedTransaction","originalTx","_blockhashWithExpiryBlockHeight","sigVerify","traceIndent","logTrace","join","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","Number","MAX_SAFE_INTEGER","clearInterval","hash","_setSubscription","nextSubscription","prevState","stateChangeCallbacks","cb","clientSubscriptionId","_this$_subscriptionSt","close","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","notification","_makeSubscription","subscriptionConfig","existingSubscription","onAccountChange","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","onLogs","mentions","onSlotChange","onSlotUpdate","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","Keypair","keypair","_keypair","skipValidation","computedPublicKey","ii","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","bigintLayout","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableInstruction","layoutType","checkKeysLength","recentSlot","recipient","AddressLookupTableProgram","lookupTableAddress","bumpSeed","addr","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","units","additionalFee","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","microLamports","ComputeBudgetProgram","PRIVATE_KEY_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","u16","Ed25519Program","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","privateKey","fromSecretKey","createInstructionWithPublicKey","secp256k1","hmacSha256Sync","h","hmac","msgs","msg","update","digest","ecdsaSign","msgHash","privKey","signSync","der","recovered","isValidPrivateKey","publicKeyCreate","ETHEREUM_ADDRESS_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","Initialize","stakePubkey","Delegate","Authorize","newAuthorized","stakeAuthorizationType","o","custodianPubkey","AuthorizeWithSeed","authoritySeed","authorityOwner","authorityBase","Split","splitStakePubkey","Merge","sourceStakePubKey","Withdraw","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","maybeLockup","initialize","splitInstruction","VoteInit","authorizedVoter","authorizedWithdrawer","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","currentAuthorityDerivedKeyBasePubkey","authorizedWithdrawerPubkey","VoteProgram","VoteAuthorizationLayout","Voter","initializeAccount","currentVoteAccountBalance","rentExemptMinimum","withdraw","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","configKeyCount","configKeys","rawInfo","parse","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","idx","isEmpty","http","devnet","testnet","https","clusterApiUrl","cluster","tls","sendAndConfirmRawTransaction","confirmationStrategyOrConfirmOptions","maybeConfirmOptions","confirmationStrategy","LAMPORTS_PER_SOL"],"sources":["../src/utils/ed25519.ts","../src/utils/to-buffer.ts","../src/utils/borsh-schema.ts","../src/publickey.ts","../src/account.ts","../src/bpf-loader-deprecated.ts","../src/transaction/constants.ts","../src/transaction/expiry-custom-errors.ts","../src/message/account-keys.ts","../src/layout.ts","../src/utils/shortvec-encoding.ts","../src/utils/assert.ts","../src/message/compiled-keys.ts","../src/message/legacy.ts","../src/message/v0.ts","../src/message/versioned.ts","../src/transaction/legacy.ts","../src/transaction/message.ts","../src/transaction/versioned.ts","../src/sysvar.ts","../src/utils/send-and-confirm-transaction.ts","../src/utils/sleep.ts","../src/instruction.ts","../src/fee-calculator.ts","../src/nonce-account.ts","../src/utils/bigint.ts","../src/programs/system.ts","../src/loader.ts","../src/bpf-loader.ts","../node_modules/fast-stable-stringify/index.js","../src/epoch-schedule.ts","../src/errors.ts","../src/__forks__/browser/fetch-impl.ts","../src/timing.ts","../src/account-data.ts","../src/programs/address-lookup-table/state.ts","../src/utils/makeWebsocketUrl.ts","../src/connection.ts","../src/keypair.ts","../src/programs/address-lookup-table/index.ts","../src/programs/compute-budget.ts","../src/programs/ed25519.ts","../src/utils/secp256k1.ts","../src/programs/secp256k1.ts","../src/programs/stake.ts","../src/programs/vote.ts","../src/validator-info.ts","../src/vote-account.ts","../src/utils/cluster.ts","../src/utils/send-and-confirm-raw-transaction.ts","../src/index.ts"],"sourcesContent":["import {sha512} from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\ned25519.utils.sha512Sync = (...m) => sha512(ed25519.utils.concatBytes(...m));\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.sync.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.Point.fromHex(publicKey, true /* strict */);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sync.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sync.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.sync.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift()!;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift()!;\n    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift()!;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   */\n  verifySignatures(requireAllSignatures?: boolean): boolean {\n    return this._verifySignatures(\n      this.serializeMessage(),\n      requireAllSignatures === undefined ? true : requireAllSignatures,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(\n    signData: Uint8Array,\n    requireAllSignatures: boolean,\n  ): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {AccountKeysFromLookups} from '../message/account-keys';\nimport assert from '../utils/assert';\nimport {toBuffer} from '../utils/to-buffer';\nimport {Blockhash} from '../blockhash';\nimport {Message, MessageV0, VersionedMessage} from '../message';\nimport {PublicKey} from '../publickey';\nimport {AddressLookupTableAccount} from '../programs';\nimport {AccountMeta, TransactionInstruction} from './legacy';\n\nexport type TransactionMessageArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\nexport type DecompileArgs =\n  | {\n      accountKeysFromLookups: AccountKeysFromLookups;\n    }\n  | {\n      addressLookupTableAccounts: AddressLookupTableAccount[];\n    };\n\nexport class TransactionMessage {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n\n  constructor(args: TransactionMessageArgs) {\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n\n  static decompile(\n    message: VersionedMessage,\n    args?: DecompileArgs,\n  ): TransactionMessage {\n    const {header, compiledInstructions, recentBlockhash} = message;\n\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts,\n    } = header;\n\n    const numWritableSignedAccounts =\n      numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n\n    const numWritableUnsignedAccounts =\n      message.staticAccountKeys.length -\n      numRequiredSignatures -\n      numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error(\n        'Failed to decompile message because no account keys were found',\n      );\n    }\n\n    const instructions: TransactionInstruction[] = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys: AccountMeta[] = [];\n\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(\n            `Failed to find key for account key index ${keyIndex}`,\n          );\n        }\n\n        const isSigner = keyIndex < numRequiredSignatures;\n\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable =\n            keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable =\n            keyIndex - accountKeys.staticAccountKeys.length <\n            // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n            accountKeys.accountKeysFromLookups!.writable.length;\n        }\n\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable,\n        });\n      }\n\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(\n          `Failed to find program id for program id index ${compiledIx.programIdIndex}`,\n        );\n      }\n\n      instructions.push(\n        new TransactionInstruction({\n          programId,\n          data: toBuffer(compiledIx.data),\n          keys,\n        }),\n      );\n    }\n\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash,\n    });\n  }\n\n  compileToLegacyMessage(): Message {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n    });\n  }\n\n  compileToV0Message(\n    addressLookupTableAccounts?: AddressLookupTableAccount[],\n  ): MessageV0 {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(\n    commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block height information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, options);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {hmac} from '@noble/hashes/hmac';\nimport {sha256} from '@noble/hashes/sha256';\nimport * as secp256k1 from '@noble/secp256k1';\n\n// Supply a synchronous hashing algorithm to make this\n// library interoperable with the synchronous APIs in web3.js.\nsecp256k1.utils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.signSync>[0],\n  privKey: Parameters<typeof secp256k1.signSync>[1],\n) => secp256k1.signSync(msgHash, privKey, {der: false, recovered: true});\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n  DurableNonceTransactionConfirmationStrategy,\n  TransactionConfirmationStrategy,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: TransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | TransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy: TransactionConfirmationStrategy | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'nonceValue',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as DurableNonceTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './errors';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './programs';\nexport * from './publickey';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './utils';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"]},"metadata":{},"sourceType":"module"}
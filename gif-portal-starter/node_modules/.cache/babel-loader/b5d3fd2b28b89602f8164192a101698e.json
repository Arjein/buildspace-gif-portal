{"ast":null,"code":"import { TransactionInstruction } from \"@solana/web3.js\";\nimport { IdlError } from \"../../error\";\nimport { toInstruction, validateAccounts, translateAddress } from \"../common\";\nimport { splitArgsAndCtx } from \"../context\";\nexport default class InstructionNamespaceFactory {\n  static build(idlIx, encodeFn, programId) {\n    if (idlIx.name === \"_inner\") {\n      throw new IdlError(\"the _inner name is reserved\");\n    }\n    const ix = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      const [ixArgs, ctx] = splitArgsAndCtx(idlIx, [...args]);\n      validateAccounts(idlIx.accounts, ctx.accounts);\n      validateInstruction(idlIx, ...args);\n      const keys = ix.accounts(ctx.accounts);\n      if (ctx.remainingAccounts !== undefined) {\n        keys.push(...ctx.remainingAccounts);\n      }\n      if (ctx.__private && ctx.__private.logAccounts) {\n        console.log(\"Outgoing account metas:\", keys);\n      }\n      return new TransactionInstruction({\n        keys,\n        programId,\n        data: encodeFn(idlIx.name, toInstruction(idlIx, ...ixArgs))\n      });\n    };\n    // Utility fn for ordering the accounts for this instruction.\n    ix[\"accounts\"] = accs => {\n      return InstructionNamespaceFactory.accountsArray(accs, idlIx.accounts);\n    };\n    return ix;\n  }\n  static accountsArray(ctx, accounts) {\n    if (!ctx) {\n      return [];\n    }\n    return accounts.map(acc => {\n      // Nested accounts.\n      const nestedAccounts = \"accounts\" in acc ? acc.accounts : undefined;\n      if (nestedAccounts !== undefined) {\n        const rpcAccs = ctx[acc.name];\n        return InstructionNamespaceFactory.accountsArray(rpcAccs, acc.accounts).flat();\n      } else {\n        const account = acc;\n        return {\n          pubkey: translateAddress(ctx[acc.name]),\n          isWritable: account.isMut,\n          isSigner: account.isSigner\n        };\n      }\n    }).flat();\n  }\n}\n// Throws error if any argument required for the `ix` is not given.\nfunction validateInstruction(ix) {\n  // todo\n}","map":{"version":3,"mappings":"AAAA,SAGEA,sBAAsB,QACjB,iBAAiB;AAQxB,SAASC,QAAQ,QAAQ,aAAa;AACtC,SACEC,aAAa,EACbC,gBAAgB,EAChBC,gBAAgB,QAEX,WAAW;AAClB,SAAmBC,eAAe,QAAQ,YAAY;AAStD,eAAc,MAAOC,2BAA2B;EACvC,OAAOC,KAAK,CACjBC,KAAQ,EACRC,QAAgC,EAChCC,SAAoB;IAEpB,IAAIF,KAAK,CAACG,IAAI,KAAK,QAAQ,EAAE;MAC3B,MAAM,IAAIV,QAAQ,CAAC,6BAA6B,CAAC;;IAGnD,MAAMW,EAAE,GAAG,YAEiB;MAAA,kCADvBC,IAAsC;QAAtCA,IAAsC;MAAA;MAEzC,MAAM,CAACC,MAAM,EAAEC,GAAG,CAAC,GAAGV,eAAe,CAACG,KAAK,EAAE,CAAC,GAAGK,IAAI,CAAC,CAAC;MACvDV,gBAAgB,CAACK,KAAK,CAACQ,QAAQ,EAAED,GAAG,CAACC,QAAQ,CAAC;MAC9CC,mBAAmB,CAACT,KAAK,EAAE,GAAGK,IAAI,CAAC;MAEnC,MAAMK,IAAI,GAAGN,EAAE,CAACI,QAAQ,CAACD,GAAG,CAACC,QAAQ,CAAC;MAEtC,IAAID,GAAG,CAACI,iBAAiB,KAAKC,SAAS,EAAE;QACvCF,IAAI,CAACG,IAAI,CAAC,GAAGN,GAAG,CAACI,iBAAiB,CAAC;;MAGrC,IAAIJ,GAAG,CAACO,SAAS,IAAIP,GAAG,CAACO,SAAS,CAACC,WAAW,EAAE;QAC9CC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEP,IAAI,CAAC;;MAE9C,OAAO,IAAIlB,sBAAsB,CAAC;QAChCkB,IAAI;QACJR,SAAS;QACTgB,IAAI,EAAEjB,QAAQ,CAACD,KAAK,CAACG,IAAI,EAAET,aAAa,CAACM,KAAK,EAAE,GAAGM,MAAM,CAAC;OAC3D,CAAC;IACJ,CAAC;IAED;IACAF,EAAE,CAAC,UAAU,CAAC,GAAIe,IAAiD,IAAI;MACrE,OAAOrB,2BAA2B,CAACsB,aAAa,CAACD,IAAI,EAAEnB,KAAK,CAACQ,QAAQ,CAAC;IACxE,CAAC;IAED,OAAOJ,EAAE;EACX;EAEO,OAAOgB,aAAa,CACzBb,GAAyB,EACzBC,QAAmC;IAEnC,IAAI,CAACD,GAAG,EAAE;MACR,OAAO,EAAE;;IAGX,OAAOC,QAAQ,CACZa,GAAG,CAAEC,GAAmB,IAAI;MAC3B;MACA,MAAMC,cAAc,GAClB,UAAU,IAAID,GAAG,GAAGA,GAAG,CAACd,QAAQ,GAAGI,SAAS;MAC9C,IAAIW,cAAc,KAAKX,SAAS,EAAE;QAChC,MAAMY,OAAO,GAAGjB,GAAG,CAACe,GAAG,CAACnB,IAAI,CAAa;QACzC,OAAOL,2BAA2B,CAACsB,aAAa,CAC9CI,OAAO,EACNF,GAAmB,CAACd,QAAQ,CAC9B,CAACiB,IAAI,EAAE;OACT,MAAM;QACL,MAAMC,OAAO,GAAeJ,GAAiB;QAC7C,OAAO;UACLK,MAAM,EAAE/B,gBAAgB,CAACW,GAAG,CAACe,GAAG,CAACnB,IAAI,CAAY,CAAC;UAClDyB,UAAU,EAAEF,OAAO,CAACG,KAAK;UACzBC,QAAQ,EAAEJ,OAAO,CAACI;SACnB;;IAEL,CAAC,CAAC,CACDL,IAAI,EAAE;EACX;;AAuEF;AACA,SAAShB,mBAAmB,CAACL,EAAkB,EAAgB;EAC7D;AAAA","names":["TransactionInstruction","IdlError","toInstruction","validateAccounts","translateAddress","splitArgsAndCtx","InstructionNamespaceFactory","build","idlIx","encodeFn","programId","name","ix","args","ixArgs","ctx","accounts","validateInstruction","keys","remainingAccounts","undefined","push","__private","logAccounts","console","log","data","accs","accountsArray","map","acc","nestedAccounts","rpcAccs","flat","account","pubkey","isWritable","isMut","isSigner"],"sourceRoot":"","sources":["../../../../src/program/namespace/instruction.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
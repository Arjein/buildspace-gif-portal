{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst error_js_1 = require(\"../../error.js\");\nconst common_js_1 = require(\"../common.js\");\nconst context_js_1 = require(\"../context.js\");\nconst features = __importStar(require(\"../../utils/features.js\"));\nclass InstructionNamespaceFactory {\n  static build(idlIx, encodeFn, programId) {\n    if (idlIx.name === \"_inner\") {\n      throw new error_js_1.IdlError(\"the _inner name is reserved\");\n    }\n    const ix = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      const [ixArgs, ctx] = (0, context_js_1.splitArgsAndCtx)(idlIx, [...args]);\n      (0, common_js_1.validateAccounts)(idlIx.accounts, ctx.accounts);\n      validateInstruction(idlIx, ...args);\n      const keys = ix.accounts(ctx.accounts);\n      if (ctx.remainingAccounts !== undefined) {\n        keys.push(...ctx.remainingAccounts);\n      }\n      if (features.isSet(\"debug-logs\")) {\n        console.log(\"Outgoing account metas:\", keys);\n      }\n      return new web3_js_1.TransactionInstruction({\n        keys,\n        programId,\n        data: encodeFn(idlIx.name, (0, common_js_1.toInstruction)(idlIx, ...ixArgs))\n      });\n    };\n    // Utility fn for ordering the accounts for this instruction.\n    ix[\"accounts\"] = accs => {\n      return InstructionNamespaceFactory.accountsArray(accs, idlIx.accounts, idlIx.name);\n    };\n    return ix;\n  }\n  static accountsArray(ctx, accounts, ixName) {\n    if (!ctx) {\n      return [];\n    }\n    return accounts.map(acc => {\n      // Nested accounts.\n      const nestedAccounts = \"accounts\" in acc ? acc.accounts : undefined;\n      if (nestedAccounts !== undefined) {\n        const rpcAccs = ctx[acc.name];\n        return InstructionNamespaceFactory.accountsArray(rpcAccs, acc.accounts, ixName).flat();\n      } else {\n        const account = acc;\n        let pubkey;\n        try {\n          pubkey = (0, common_js_1.translateAddress)(ctx[acc.name]);\n        } catch (err) {\n          throw new Error(`Wrong input type for account \"${acc.name}\" in the instruction accounts object${ixName !== undefined ? ' for instruction \"' + ixName + '\"' : \"\"}. Expected PublicKey or string.`);\n        }\n        return {\n          pubkey,\n          isWritable: account.isMut,\n          isSigner: account.isSigner\n        };\n      }\n    }).flat();\n  }\n}\nexports.default = InstructionNamespaceFactory;\n// Throws error if any argument required for the `ix` is not given.\nfunction validateInstruction(ix) {\n  // todo\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAYA;AACA;AAMA;AACA;AASA,MAAqBA,2BAA2B;EACvC,OAAOC,KAAK,CACjBC,KAAQ,EACRC,QAAgC,EAChCC,SAAoB;IAEpB,IAAIF,KAAK,CAACG,IAAI,KAAK,QAAQ,EAAE;MAC3B,MAAM,IAAIC,mBAAQ,CAAC,6BAA6B,CAAC;;IAGnD,MAAMC,EAAE,GAAG,YAEiB;MAAA,kCADvBC,IAAsC;QAAtCA,IAAsC;MAAA;MAEzC,MAAM,CAACC,MAAM,EAAEC,GAAG,CAAC,GAAG,gCAAe,EAACR,KAAK,EAAE,CAAC,GAAGM,IAAI,CAAC,CAAC;MACvD,gCAAgB,EAACN,KAAK,CAACS,QAAQ,EAAED,GAAG,CAACC,QAAQ,CAAC;MAC9CC,mBAAmB,CAACV,KAAK,EAAE,GAAGM,IAAI,CAAC;MAEnC,MAAMK,IAAI,GAAGN,EAAE,CAACI,QAAQ,CAACD,GAAG,CAACC,QAAQ,CAAC;MAEtC,IAAID,GAAG,CAACI,iBAAiB,KAAKC,SAAS,EAAE;QACvCF,IAAI,CAACG,IAAI,CAAC,GAAGN,GAAG,CAACI,iBAAiB,CAAC;;MAGrC,IAAIG,QAAQ,CAACC,KAAK,CAAC,YAAY,CAAC,EAAE;QAChCC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEP,IAAI,CAAC;;MAG9C,OAAO,IAAIQ,gCAAsB,CAAC;QAChCR,IAAI;QACJT,SAAS;QACTkB,IAAI,EAAEnB,QAAQ,CAACD,KAAK,CAACG,IAAI,EAAE,6BAAa,EAACH,KAAK,EAAE,GAAGO,MAAM,CAAC;OAC3D,CAAC;IACJ,CAAC;IAED;IACAF,EAAE,CAAC,UAAU,CAAC,GAAIgB,IAAiD,IAAI;MACrE,OAAOvB,2BAA2B,CAACwB,aAAa,CAC9CD,IAAI,EACJrB,KAAK,CAACS,QAAQ,EACdT,KAAK,CAACG,IAAI,CACX;IACH,CAAC;IAED,OAAOE,EAAE;EACX;EAEO,OAAOiB,aAAa,CACzBd,GAAyB,EACzBC,QAAmC,EACnCc,MAAe;IAEf,IAAI,CAACf,GAAG,EAAE;MACR,OAAO,EAAE;;IAGX,OAAOC,QAAQ,CACZe,GAAG,CAAEC,GAAmB,IAAI;MAC3B;MACA,MAAMC,cAAc,GAClB,UAAU,IAAID,GAAG,GAAGA,GAAG,CAAChB,QAAQ,GAAGI,SAAS;MAC9C,IAAIa,cAAc,KAAKb,SAAS,EAAE;QAChC,MAAMc,OAAO,GAAGnB,GAAG,CAACiB,GAAG,CAACtB,IAAI,CAAa;QACzC,OAAOL,2BAA2B,CAACwB,aAAa,CAC9CK,OAAO,EACNF,GAAmB,CAAChB,QAAQ,EAC7Bc,MAAM,CACP,CAACK,IAAI,EAAE;OACT,MAAM;QACL,MAAMC,OAAO,GAAeJ,GAAiB;QAC7C,IAAIK,MAAM;QACV,IAAI;UACFA,MAAM,GAAG,gCAAgB,EAACtB,GAAG,CAACiB,GAAG,CAACtB,IAAI,CAAY,CAAC;SACpD,CAAC,OAAO4B,GAAG,EAAE;UACZ,MAAM,IAAIC,KAAK,CACb,iCACEP,GAAG,CAACtB,IACN,uCACEoB,MAAM,KAAKV,SAAS,GAAG,oBAAoB,GAAGU,MAAM,GAAG,GAAG,GAAG,EAC/D,iCAAiC,CAClC;;QAEH,OAAO;UACLO,MAAM;UACNG,UAAU,EAAEJ,OAAO,CAACK,KAAK;UACzBC,QAAQ,EAAEN,OAAO,CAACM;SACnB;;IAEL,CAAC,CAAC,CACDP,IAAI,EAAE;EACX;;AAzFFQ;AAgKA;AACA,SAAS1B,mBAAmB,CAACL,EAAkB,EAAgB;EAC7D;AAAA","names":["InstructionNamespaceFactory","build","idlIx","encodeFn","programId","name","error_js_1","ix","args","ixArgs","ctx","accounts","validateInstruction","keys","remainingAccounts","undefined","push","features","isSet","console","log","web3_js_1","data","accs","accountsArray","ixName","map","acc","nestedAccounts","rpcAccs","flat","account","pubkey","err","Error","isWritable","isMut","isSigner","exports"],"sourceRoot":"","sources":["../../../../src/program/namespace/instruction.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
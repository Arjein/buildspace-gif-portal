{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SystemAccountsCoder = void 0;\nconst BufferLayout = __importStar(require(\"buffer-layout\"));\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst common_js_1 = require(\"../common.js\");\nclass SystemAccountsCoder {\n  constructor(idl) {\n    this.idl = idl;\n  }\n  async encode(accountName, account) {\n    switch (accountName) {\n      case \"nonce\":\n        {\n          const buffer = Buffer.alloc(web3_js_1.NONCE_ACCOUNT_LENGTH);\n          const len = NONCE_ACCOUNT_LAYOUT.encode(account, buffer);\n          return buffer.slice(0, len);\n        }\n      default:\n        {\n          throw new Error(`Invalid account name: ${accountName}`);\n        }\n    }\n  }\n  decode(accountName, ix) {\n    return this.decodeUnchecked(accountName, ix);\n  }\n  decodeUnchecked(accountName, ix) {\n    switch (accountName) {\n      case \"nonce\":\n        {\n          return decodeNonceAccount(ix);\n        }\n      default:\n        {\n          throw new Error(`Invalid account name: ${accountName}`);\n        }\n    }\n  }\n  // TODO: this won't use the appendData.\n  memcmp(accountName, _appendData) {\n    switch (accountName) {\n      case \"nonce\":\n        {\n          return {\n            dataSize: web3_js_1.NONCE_ACCOUNT_LENGTH\n          };\n        }\n      default:\n        {\n          throw new Error(`Invalid account name: ${accountName}`);\n        }\n    }\n  }\n  size(idlAccount) {\n    var _a;\n    return (_a = (0, common_js_1.accountSize)(this.idl, idlAccount)) !== null && _a !== void 0 ? _a : 0;\n  }\n}\nexports.SystemAccountsCoder = SystemAccountsCoder;\nfunction decodeNonceAccount(ix) {\n  return NONCE_ACCOUNT_LAYOUT.decode(ix);\n}\nclass WrappedLayout extends BufferLayout.Layout {\n  constructor(layout, decoder, encoder, property) {\n    super(layout.span, property);\n    this.layout = layout;\n    this.decoder = decoder;\n    this.encoder = encoder;\n  }\n  decode(b, offset) {\n    return this.decoder(this.layout.decode(b, offset));\n  }\n  encode(src, b, offset) {\n    return this.layout.encode(this.encoder(src), b, offset);\n  }\n  getSpan(b, offset) {\n    return this.layout.getSpan(b, offset);\n  }\n}\nfunction publicKey(property) {\n  return new WrappedLayout(BufferLayout.blob(32), b => new web3_js_1.PublicKey(b), key => key.toBuffer(), property);\n}\nconst NONCE_ACCOUNT_LAYOUT = BufferLayout.struct([BufferLayout.u32(\"version\"), BufferLayout.u32(\"state\"), publicKey(\"authorizedPubkey\"), publicKey(\"nonce\"), BufferLayout.struct([BufferLayout.nu64(\"lamportsPerSignature\")], \"feeCalculator\")]);","map":{"version":3,"mappings":"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","names":["SystemAccountsCoder","constructor","idl","encode","accountName","account","buffer","Buffer","alloc","web3_js_1","len","NONCE_ACCOUNT_LAYOUT","slice","Error","decode","ix","decodeUnchecked","decodeNonceAccount","memcmp","_appendData","dataSize","size","idlAccount","exports","WrappedLayout","BufferLayout","Layout","layout","decoder","encoder","property","span","b","offset","src","getSpan","publicKey","blob","key","toBuffer","struct","u32","nu64"],"sourceRoot":"","sources":["../../../../src/coder/system/accounts.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
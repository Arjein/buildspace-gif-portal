{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst context_js_1 = require(\"../context.js\");\nconst event_js_1 = require(\"../event.js\");\nconst error_js_1 = require(\"../../error.js\");\nclass SimulateFactory {\n  static build(idlIx, txFn, idlErrors, provider, coder, programId, idl) {\n    const simulate = async function () {\n      var _a;\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      const tx = txFn(...args);\n      const [, ctx] = (0, context_js_1.splitArgsAndCtx)(idlIx, [...args]);\n      let resp = undefined;\n      if (provider.simulate === undefined) {\n        throw new Error(\"This function requires 'Provider.simulate' to be implemented.\");\n      }\n      try {\n        resp = await provider.simulate(tx, ctx.signers, (_a = ctx.options) === null || _a === void 0 ? void 0 : _a.commitment);\n      } catch (err) {\n        throw (0, error_js_1.translateError)(err, idlErrors);\n      }\n      if (resp === undefined) {\n        throw new Error(\"Unable to simulate transaction\");\n      }\n      const logs = resp.logs;\n      if (!logs) {\n        throw new Error(\"Simulated logs not found\");\n      }\n      const events = [];\n      if (idl.events) {\n        let parser = new event_js_1.EventParser(programId, coder);\n        for (const event of parser.parseLogs(logs)) {\n          events.push(event);\n        }\n      }\n      return {\n        events,\n        raw: logs\n      };\n    };\n    return simulate;\n  }\n}\nexports.default = SimulateFactory;","map":{"version":3,"mappings":";;;;;AAGA;AAEA;AAGA;AAQA,MAAqBA,eAAe;EAC3B,OAAOC,KAAK,CACjBC,KAA2B,EAC3BC,IAAwB,EACxBC,SAA8B,EAC9BC,QAAkB,EAClBC,KAAY,EACZC,SAAoB,EACpBC,GAAQ;IAER,MAAMC,QAAQ,GAAoB,kBAAkB;;wCAARC,IAAI;QAAJA,IAAI;MAAA;MAC9C,MAAMC,EAAE,GAAGR,IAAI,CAAC,GAAGO,IAAI,CAAC;MACxB,MAAM,GAAGE,GAAG,CAAC,GAAG,gCAAe,EAACV,KAAK,EAAE,CAAC,GAAGQ,IAAI,CAAC,CAAC;MACjD,IAAIG,IAAI,GAA+CC,SAAS;MAChE,IAAIT,QAAQ,CAACI,QAAQ,KAAKK,SAAS,EAAE;QACnC,MAAM,IAAIC,KAAK,CACb,+DAA+D,CAChE;;MAEH,IAAI;QACFF,IAAI,GAAG,MAAMR,QAAS,CAACI,QAAQ,CAC7BE,EAAE,EACFC,GAAG,CAACI,OAAO,EACX,SAAG,CAACC,OAAO,0CAAEC,UAAU,CACxB;OACF,CAAC,OAAOC,GAAG,EAAE;QACZ,MAAM,6BAAc,EAACA,GAAG,EAAEf,SAAS,CAAC;;MAEtC,IAAIS,IAAI,KAAKC,SAAS,EAAE;QACtB,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;;MAEnD,MAAMK,IAAI,GAAGP,IAAI,CAACO,IAAI;MACtB,IAAI,CAACA,IAAI,EAAE;QACT,MAAM,IAAIL,KAAK,CAAC,0BAA0B,CAAC;;MAG7C,MAAMM,MAAM,GAAqC,EAAE;MACnD,IAAIb,GAAG,CAACa,MAAM,EAAE;QACd,IAAIC,MAAM,GAAG,IAAIC,sBAAW,CAAChB,SAAS,EAAED,KAAK,CAAC;QAC9C,KAAK,MAAMkB,KAAK,IAAIF,MAAM,CAACG,SAAS,CAACL,IAAI,CAAC,EAAE;UAC1CC,MAAM,CAACK,IAAI,CAACF,KAAK,CAAC;;;MAGtB,OAAO;QAAEH,MAAM;QAAEM,GAAG,EAAEP;MAAI,CAAE;IAC9B,CAAC;IAED,OAAOX,QAAQ;EACjB;;AA/CFmB","names":["SimulateFactory","build","idlIx","txFn","idlErrors","provider","coder","programId","idl","simulate","args","tx","ctx","resp","undefined","Error","signers","options","commitment","err","logs","events","parser","event_js_1","event","parseLogs","push","raw","exports"],"sourceRoot":"","sources":["../../../../src/program/namespace/simulate.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IdlCoder = void 0;\nconst camelcase_1 = __importDefault(require(\"camelcase\"));\nconst borsh = __importStar(require(\"@project-serum/borsh\"));\nconst error_js_1 = require(\"../../error.js\");\nclass IdlCoder {\n  static fieldLayout(field, types) {\n    const fieldName = field.name !== undefined ? (0, camelcase_1.default)(field.name) : undefined;\n    switch (field.type) {\n      case \"bool\":\n        {\n          return borsh.bool(fieldName);\n        }\n      case \"u8\":\n        {\n          return borsh.u8(fieldName);\n        }\n      case \"i8\":\n        {\n          return borsh.i8(fieldName);\n        }\n      case \"u16\":\n        {\n          return borsh.u16(fieldName);\n        }\n      case \"i16\":\n        {\n          return borsh.i16(fieldName);\n        }\n      case \"u32\":\n        {\n          return borsh.u32(fieldName);\n        }\n      case \"i32\":\n        {\n          return borsh.i32(fieldName);\n        }\n      case \"f32\":\n        {\n          return borsh.f32(fieldName);\n        }\n      case \"u64\":\n        {\n          return borsh.u64(fieldName);\n        }\n      case \"i64\":\n        {\n          return borsh.i64(fieldName);\n        }\n      case \"f64\":\n        {\n          return borsh.f64(fieldName);\n        }\n      case \"u128\":\n        {\n          return borsh.u128(fieldName);\n        }\n      case \"i128\":\n        {\n          return borsh.i128(fieldName);\n        }\n      case \"bytes\":\n        {\n          return borsh.vecU8(fieldName);\n        }\n      case \"string\":\n        {\n          return borsh.str(fieldName);\n        }\n      case \"publicKey\":\n        {\n          return borsh.publicKey(fieldName);\n        }\n      default:\n        {\n          if (\"vec\" in field.type) {\n            return borsh.vec(IdlCoder.fieldLayout({\n              name: undefined,\n              type: field.type.vec\n            }, types), fieldName);\n          } else if (\"option\" in field.type) {\n            return borsh.option(IdlCoder.fieldLayout({\n              name: undefined,\n              type: field.type.option\n            }, types), fieldName);\n          } else if (\"defined\" in field.type) {\n            const defined = field.type.defined;\n            // User defined type.\n            if (types === undefined) {\n              throw new error_js_1.IdlError(\"User defined types not provided\");\n            }\n            const filtered = types.filter(t => t.name === defined);\n            if (filtered.length !== 1) {\n              throw new error_js_1.IdlError(`Type not found: ${JSON.stringify(field)}`);\n            }\n            return IdlCoder.typeDefLayout(filtered[0], types, fieldName);\n          } else if (\"array\" in field.type) {\n            let arrayTy = field.type.array[0];\n            let arrayLen = field.type.array[1];\n            let innerLayout = IdlCoder.fieldLayout({\n              name: undefined,\n              type: arrayTy\n            }, types);\n            return borsh.array(innerLayout, arrayLen, fieldName);\n          } else {\n            throw new Error(`Not yet implemented: ${field}`);\n          }\n        }\n    }\n  }\n  static typeDefLayout(typeDef) {\n    let types = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let name = arguments.length > 2 ? arguments[2] : undefined;\n    if (typeDef.type.kind === \"struct\") {\n      const fieldLayouts = typeDef.type.fields.map(field => {\n        const x = IdlCoder.fieldLayout(field, types);\n        return x;\n      });\n      return borsh.struct(fieldLayouts, name);\n    } else if (typeDef.type.kind === \"enum\") {\n      let variants = typeDef.type.variants.map(variant => {\n        const name = (0, camelcase_1.default)(variant.name);\n        if (variant.fields === undefined) {\n          return borsh.struct([], name);\n        }\n        const fieldLayouts = variant.fields.map(f => {\n          if (!f.hasOwnProperty(\"name\")) {\n            throw new Error(\"Tuple enum variants not yet implemented.\");\n          }\n          // this typescript conversion is ok\n          // because if f were of type IdlType\n          // (that does not have a name property)\n          // the check before would've errored\n          return IdlCoder.fieldLayout(f, types);\n        });\n        return borsh.struct(fieldLayouts, name);\n      });\n      if (name !== undefined) {\n        // Buffer-layout lib requires the name to be null (on construction)\n        // when used as a field.\n        return borsh.rustEnum(variants).replicate(name);\n      }\n      return borsh.rustEnum(variants, name);\n    } else {\n      throw new Error(`Unknown type kint: ${typeDef}`);\n    }\n  }\n}\nexports.IdlCoder = IdlCoder;","map":{"version":3,"mappings":"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","names":["IdlCoder","fieldLayout","field","types","fieldName","name","undefined","type","borsh","bool","u8","i8","u16","i16","u32","i32","f32","u64","i64","f64","u128","i128","vecU8","str","publicKey","vec","option","defined","error_js_1","filtered","filter","t","length","JSON","stringify","typeDefLayout","arrayTy","array","arrayLen","innerLayout","Error","typeDef","kind","fieldLayouts","fields","map","x","struct","variants","variant","f","hasOwnProperty","rustEnum","replicate","exports"],"sourceRoot":"","sources":["../../../../src/coder/borsh/idl.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import EventEmitter from \"eventemitter3\";\nimport camelCase from \"camelcase\";\nimport { SystemProgram } from \"@solana/web3.js\";\nimport Coder, { stateDiscriminator } from \"../../coder\";\nimport { getProvider } from \"../../\";\nimport { validateAccounts, parseIdlErrors } from \"../common\";\nimport { findProgramAddressSync, createWithSeedSync } from \"../../utils/pubkey\";\nimport InstructionNamespaceFactory from \"./instruction\";\nimport RpcNamespaceFactory from \"./rpc\";\nimport TransactionNamespaceFactory from \"./transaction\";\nexport default class StateFactory {\n  static build(idl, coder, programId, provider) {\n    if (idl.state === undefined) {\n      return undefined;\n    }\n    return new StateClient(idl, programId, provider, coder);\n  }\n}\n/**\n * A client for the program state. Similar to the base [[Program]] client,\n * one can use this to send transactions and read accounts for the state\n * abstraction.\n */\nexport class StateClient {\n  constructor(idl, programId) {\n    let provider = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getProvider();\n    let coder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Coder(idl);\n    this.provider = provider;\n    this.coder = coder;\n    this._idl = idl;\n    this._programId = programId;\n    this._address = programStateAddress(programId);\n    this._sub = null;\n    // Build namespaces.\n    const [instruction, transaction, rpc] = (() => {\n      var _a;\n      let instruction = {};\n      let transaction = {};\n      let rpc = {};\n      (_a = idl.state) === null || _a === void 0 ? void 0 : _a.methods.forEach(m => {\n        // Build instruction method.\n        const ixItem = InstructionNamespaceFactory.build(m, (ixName, ix) => coder.instruction.encodeState(ixName, ix), programId);\n        ixItem[\"accounts\"] = accounts => {\n          const keys = stateInstructionKeys(programId, provider, m, accounts);\n          return keys.concat(InstructionNamespaceFactory.accountsArray(accounts, m.accounts));\n        };\n        // Build transaction method.\n        const txItem = TransactionNamespaceFactory.build(m, ixItem);\n        // Build RPC method.\n        const rpcItem = RpcNamespaceFactory.build(m, txItem, parseIdlErrors(idl), provider);\n        // Attach them all to their respective namespaces.\n        const name = camelCase(m.name);\n        instruction[name] = ixItem;\n        transaction[name] = txItem;\n        rpc[name] = rpcItem;\n      });\n      return [instruction, transaction, rpc];\n    })();\n    this.instruction = instruction;\n    this.transaction = transaction;\n    this.rpc = rpc;\n  }\n  /**\n   * Returns the program ID owning the state.\n   */\n  get programId() {\n    return this._programId;\n  }\n  /**\n   * Returns the deserialized state account.\n   */\n  async fetch() {\n    const addr = this.address();\n    const accountInfo = await this.provider.connection.getAccountInfo(addr);\n    if (accountInfo === null) {\n      throw new Error(`Account does not exist ${addr.toString()}`);\n    }\n    // Assert the account discriminator is correct.\n    const state = this._idl.state;\n    if (!state) {\n      throw new Error(\"State is not specified in IDL.\");\n    }\n    const expectedDiscriminator = await stateDiscriminator(state.struct.name);\n    if (expectedDiscriminator.compare(accountInfo.data.slice(0, 8))) {\n      throw new Error(\"Invalid account discriminator\");\n    }\n    return this.coder.state.decode(accountInfo.data);\n  }\n  /**\n   * Returns the state address.\n   */\n  address() {\n    return this._address;\n  }\n  /**\n   * Returns an `EventEmitter` with a `\"change\"` event that's fired whenever\n   * the state account cahnges.\n   */\n  subscribe(commitment) {\n    if (this._sub !== null) {\n      return this._sub.ee;\n    }\n    const ee = new EventEmitter();\n    const listener = this.provider.connection.onAccountChange(this.address(), acc => {\n      const account = this.coder.state.decode(acc.data);\n      ee.emit(\"change\", account);\n    }, commitment);\n    this._sub = {\n      ee,\n      listener\n    };\n    return ee;\n  }\n  /**\n   * Unsubscribes to state changes.\n   */\n  unsubscribe() {\n    if (this._sub !== null) {\n      this.provider.connection.removeAccountChangeListener(this._sub.listener).then(async () => {\n        this._sub = null;\n      }).catch(console.error);\n    }\n  }\n}\n// Calculates the deterministic address of the program's \"state\" account.\nfunction programStateAddress(programId) {\n  let [registrySigner] = findProgramAddressSync([], programId);\n  return createWithSeedSync(registrySigner, \"unversioned\", programId);\n}\n// Returns the common keys that are prepended to all instructions targeting\n// the \"state\" of a program.\nfunction stateInstructionKeys(programId, provider, m, accounts) {\n  if (m.name === \"new\") {\n    // Ctor `new` method.\n    const [programSigner] = findProgramAddressSync([], programId);\n    return [{\n      pubkey: provider.wallet.publicKey,\n      isWritable: false,\n      isSigner: true\n    }, {\n      pubkey: programStateAddress(programId),\n      isWritable: true,\n      isSigner: false\n    }, {\n      pubkey: programSigner,\n      isWritable: false,\n      isSigner: false\n    }, {\n      pubkey: SystemProgram.programId,\n      isWritable: false,\n      isSigner: false\n    }, {\n      pubkey: programId,\n      isWritable: false,\n      isSigner: false\n    }];\n  } else {\n    validateAccounts(m.accounts, accounts);\n    return [{\n      pubkey: programStateAddress(programId),\n      isWritable: true,\n      isSigner: false\n    }];\n  }\n}","map":{"version":3,"mappings":"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","names":["EventEmitter","camelCase","SystemProgram","Coder","stateDiscriminator","getProvider","validateAccounts","parseIdlErrors","findProgramAddressSync","createWithSeedSync","InstructionNamespaceFactory","RpcNamespaceFactory","TransactionNamespaceFactory","StateFactory","build","idl","coder","programId","provider","state","undefined","StateClient","constructor","_idl","_programId","_address","programStateAddress","_sub","instruction","transaction","rpc","methods","forEach","m","ixItem","ixName","ix","encodeState","accounts","keys","stateInstructionKeys","concat","accountsArray","txItem","rpcItem","name","fetch","addr","address","accountInfo","connection","getAccountInfo","Error","toString","expectedDiscriminator","struct","compare","data","slice","decode","subscribe","commitment","ee","listener","onAccountChange","acc","account","emit","unsubscribe","removeAccountChangeListener","then","catch","console","error","registrySigner","programSigner","pubkey","wallet","publicKey","isWritable","isSigner"],"sourceRoot":"","sources":["../../../../src/program/namespace/state.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
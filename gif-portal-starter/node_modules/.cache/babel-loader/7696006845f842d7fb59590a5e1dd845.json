{"ast":null,"code":"var _jsxFileName = \"/Users/arjein/Desktop/Projects/gif-portal-starter/src/App.js\",\n  _s2 = $RefreshSig$();\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport { baseAccount, programID, getProvider, createGifAccount, checkIfWalletIsConnected } from \"./connect\";\nimport { Program } from \"@project-serum/anchor\";\nimport idl from \"./idl.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  solana\n} = window;\nfunction App() {\n  _s2();\n  var _s = $RefreshSig$();\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [gifs, setGifs] = useState([]);\n  useEffect(() => {\n    window.addEventListener(\"load\", async event => {\n      await checkIfWalletIsConnected();\n    });\n  }, []);\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\");\n      getGifs();\n    }\n  }, [walletAddress]);\n  async function getGifs() {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      console.log(\"Got the account\", account);\n      setGifs(account.gifs);\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifs(null);\n    }\n  }\n  async function connectWallet() {\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  }\n  function NotConnected() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"cta-button connect-wallet-button\",\n      onClick: connectWallet,\n      children: \"Connect to Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this);\n  }\n  function GifContainer() {\n    _s();\n    const [gifLink, setGifLink] = useState(\"\");\n    function onGifLinkChange(event) {\n      const {\n        value\n      } = event.target;\n      setGifLink(value);\n    }\n    async function sendGif() {\n      if (gifLink.length === 0) {\n        console.log(\"No gif link given\");\n        return;\n      }\n      setGifLink(\"\");\n      console.log(\"gif link\", gifLink);\n      try {\n        const provider = getProvider();\n        const program = new Program(idl, programID, provider);\n        await program.rpc.addGif(gifLink, {\n          accounts: {\n            baseAccount: baseAccount.publicKey,\n            user: provider.wallet.publicKey\n          }\n        });\n        await getGifs();\n      } catch (error) {\n        console.log(\"Error sending GIF:\", error);\n      }\n    }\n    if (gifs === null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button submit-gif-button\",\n          onClick: createGifAccount,\n          children: \"Do One-Time Initialization For GIF Program Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gif-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter gif link!\",\n          value: gifLink,\n          onChange: onGifLinkChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button submit-gif-button\",\n          onClick: sendGif,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gif-grid\",\n          children: gifs.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"gif-item\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: item.gifLink,\n              alt: item.gifLink\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this);\n    }\n  }\n  _s(GifContainer, \"nr3L8jtfESXm13f/6r+awq0DmOU=\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header\",\n          children: \"\\uD83D\\uDDBC GIF Portal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"View your GIF collection in the metaverse \\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), !walletAddress && NotConnected(), walletAddress && /*#__PURE__*/_jsxDEV(GifContainer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: \"https://twitter.com/_buildspace\",\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built on @'_buildspace'`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"lttjGC1dKaEKLwRg5Bondprsu5Y=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","baseAccount","programID","getProvider","createGifAccount","checkIfWalletIsConnected","Program","idl","solana","window","App","walletAddress","setWalletAddress","gifs","setGifs","addEventListener","event","console","log","getGifs","provider","program","account","fetch","publicKey","error","connectWallet","response","connect","toString","NotConnected","GifContainer","gifLink","setGifLink","onGifLinkChange","value","target","sendGif","length","rpc","addGif","accounts","user","wallet","map","item","index","twitterLogo"],"sources":["/Users/arjein/Desktop/Projects/gif-portal-starter/src/App.js"],"sourcesContent":["import twitterLogo from \"./assets/twitter-logo.svg\";\nimport \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport {\n  baseAccount,\n  programID,\n  getProvider,\n  createGifAccount,\n  checkIfWalletIsConnected,\n} from \"./connect\";\nimport { Program } from \"@project-serum/anchor\";\nimport idl from \"./idl.json\";\n\nconst { solana } = window;\n\nfunction App() {\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [gifs, setGifs] = useState([]);\n\n  useEffect(() => {\n    window.addEventListener(\"load\", async (event) => {\n      await checkIfWalletIsConnected();\n    });\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\");\n      getGifs();\n    }\n  }, [walletAddress]);\n\n  async function getGifs() {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(\n        baseAccount.publicKey\n      );\n\n      console.log(\"Got the account\", account);\n      setGifs(account.gifs);\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifs(null);\n    }\n  }\n\n  async function connectWallet() {\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  }\n\n  function NotConnected() {\n    return (\n      <button\n        className=\"cta-button connect-wallet-button\"\n        onClick={connectWallet}\n      >\n        Connect to Wallet\n      </button>\n    );\n  }\n\n  function GifContainer() {\n    const [gifLink, setGifLink] = useState(\"\");\n\n    function onGifLinkChange(event) {\n      const { value } = event.target;\n      setGifLink(value);\n    }\n\n    async function sendGif() {\n      if (gifLink.length === 0) {\n        console.log(\"No gif link given\");\n        return;\n      }\n      setGifLink(\"\");\n      console.log(\"gif link\", gifLink);\n\n      try {\n        const provider = getProvider();\n        const program = new Program(idl, programID, provider);\n\n        await program.rpc.addGif(gifLink, {\n          accounts: {\n            baseAccount: baseAccount.publicKey,\n            user: provider.wallet.publicKey,\n          },\n        });\n\n        await getGifs();\n      } catch (error) {\n        console.log(\"Error sending GIF:\", error);\n      }\n    }\n\n    if (gifs === null) {\n      return (\n        <div className=\"connected-container\">\n          <button\n            className=\"cta-button submit-gif-button\"\n            onClick={createGifAccount}\n          >\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"gif-container\">\n          <input\n            type=\"text\"\n            placeholder=\"Enter gif link!\"\n            value={gifLink}\n            onChange={onGifLinkChange}\n          />\n\n          <button className=\"cta-button submit-gif-button\" onClick={sendGif}>\n            Submit\n          </button>\n\n          <div className=\"gif-grid\">\n            {gifs.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <img src={item.gifLink} alt={item.gifLink} />\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header\">🖼 GIF Portal</p>\n          <p className=\"sub-text\">\n            View your GIF collection in the metaverse ✨\n          </p>\n\n          {!walletAddress && NotConnected()}\n          {walletAddress && <GifContainer />}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href=\"https://twitter.com/_buildspace\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @'_buildspace'`}</a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/arjein/Desktop/Projects/gif-portal-starter/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, AnchorProvider, web3 } from \"@project-serum/anchor\";\nimport \"./App.css\";\nimport { Buffer } from \"buffer\";\nimport kp from \"./keypair.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nwindow.Buffer = Buffer;\n\n// SystemProgram is a reference to the Solana runtime!\nconst {\n  SystemProgram,\n  Keypair\n} = web3;\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\n\n// This is the address of your solana program, if you forgot, just run solana address -k target/deploy/myepicproject-keypair.json\nconst programID = new PublicKey(\"BfWCivXaDRfxTtq2LnSp31FbSsxDXHXGhjVcemXxqXG9\");\n\n// Set our network to devnet.\nconst network = clusterApiUrl(\"devnet\");\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n};\n\n// Constants\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst App = () => {\n  _s();\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gifList, setGifList] = useState([]);\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    var _window, _window$solana;\n    if ((_window = window) !== null && _window !== void 0 && (_window$solana = _window.solana) !== null && _window$solana !== void 0 && _window$solana.isPhantom) {\n      console.log(\"Phantom wallet found!\");\n      const response = await window.solana.connect({\n        onlyIfTrusted: true\n      });\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n\n      /*\n       * Set the user's publicKey in state to be used later!\n       */\n      setWalletAddress(response.publicKey.toString());\n    } else {\n      alert(\"Solana object not found! Get a Phantom Wallet ðŸ‘»\");\n    }\n  };\n  const connectWallet = async () => {\n    const {\n      solana\n    } = window;\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\");\n      return;\n    }\n    setInputValue(\"\");\n    console.log(\"Gif link:\", inputValue);\n    try {\n      const provider = getProvider();\n      const program = await getProgram();\n      await program.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey\n        }\n      });\n      console.log(\"GIF successfully sent to program\", inputValue);\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error);\n    }\n  };\n  const updateVote = async gifLink => {\n    try {\n      const provider = getProvider();\n      const program = await getProgram();\n      console.log(gifLink);\n      await updateItem();\n      /*\n      await program.updateItem(gifLink, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      */\n      console.log(\"Vote sent to program\", inputValue);\n\n      //      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending Vote:\", error);\n    }\n  };\n  const onInputChange = event => {\n    const {\n      value\n    } = event.target;\n    setInputValue(value);\n  };\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new AnchorProvider(connection, window.solana, opts.preflightCommitment);\n    return provider;\n  };\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = await getProgram();\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString());\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"cta-button connect-wallet-button\",\n    onClick: connectWallet,\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n    if (gifList === null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button submit-gif-button\",\n          onClick: createGifAccount,\n          children: \"Click for One-Time Initialization GIF Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this);\n    }\n    // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: event => {\n            event.preventDefault();\n            sendGif();\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter gif link!\",\n            value: inputValue,\n            onChange: onInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"cta-button submit-gif-button\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gif-grid\",\n          children: gifList.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"gif-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: item.gifLink,\n              alt: \"gif\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"vote-count\",\n              children: item.votes.toString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [/*#__PURE__*/_jsxDEV(\"form\", {\n                onSubmit: event => {\n                  event.preventDefault();\n                  updateVote(item.gifLink);\n                },\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"vote-btn\",\n                  \"data-alt-text\": \"Thanks for Voting\",\n                  value: inputValue,\n                  type: \"submit\",\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"text\",\n                    children: \"Vote!\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 213,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 207,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"gradient-text\",\n                children: item.userAddress.toString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"sub-text\",\n                children: item.votes.toString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  const getProgram = async () => {\n    // Get metadata about your solana program\n    const idl = await Program.fetchIdl(programID, getProvider());\n    // Create a program that you can call\n    return new Program(idl, programID, getProvider());\n  };\n  const getGifList = async () => {\n    try {\n      const program = await getProgram();\n      console.log(program.account.baseAccount.fetch(baseAccount.publicKey));\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifList(null);\n    }\n  };\n  // UseEffects\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\");\n      getGifList();\n    }\n  }, [walletAddress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: walletAddress ? \"authed-container\" : \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header\",\n          children: \"GIF PORTAL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"View your GIF collection \\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this), !walletAddress && renderNotConnectedContainer(), walletAddress && renderConnectedContainer()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 266,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"o3x4z0frUQsAtyviY0jM4udbKEc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Connection","PublicKey","clusterApiUrl","Program","AnchorProvider","web3","Buffer","kp","window","SystemProgram","Keypair","arr","Object","values","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","network","opts","preflightCommitment","TWITTER_HANDLE","TWITTER_LINK","App","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","solana","isPhantom","console","log","response","connect","onlyIfTrusted","publicKey","toString","alert","connectWallet","sendGif","length","provider","getProvider","program","getProgram","addGif","accounts","user","wallet","getGifList","error","updateVote","gifLink","updateItem","onInputChange","event","value","target","connection","createGifAccount","rpc","startStuffOff","systemProgram","programId","signers","renderNotConnectedContainer","renderConnectedContainer","preventDefault","map","item","index","votes","userAddress","idl","fetchIdl","account","fetch","onLoad","addEventListener","removeEventListener"],"sources":["/Users/arjein/Desktop/Projects/gif-portal-starter/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, AnchorProvider, web3 } from \"@project-serum/anchor\";\nimport \"./App.css\";\nimport { Buffer } from \"buffer\";\nimport kp from \"./keypair.json\";\n\nwindow.Buffer = Buffer;\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\n\n// This is the address of your solana program, if you forgot, just run solana address -k target/deploy/myepicproject-keypair.json\nconst programID = new PublicKey(\"BfWCivXaDRfxTtq2LnSp31FbSsxDXHXGhjVcemXxqXG9\");\n\n// Set our network to devnet.\nconst network = clusterApiUrl(\"devnet\");\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\",\n};\n\n// Constants\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gifList, setGifList] = useState([]);\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    if (window?.solana?.isPhantom) {\n      console.log(\"Phantom wallet found!\");\n      const response = await window.solana.connect({ onlyIfTrusted: true });\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n\n      /*\n       * Set the user's publicKey in state to be used later!\n       */\n      setWalletAddress(response.publicKey.toString());\n    } else {\n      alert(\"Solana object not found! Get a Phantom Wallet ðŸ‘»\");\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\");\n      return;\n    }\n    setInputValue(\"\");\n    console.log(\"Gif link:\", inputValue);\n    try {\n      const provider = getProvider();\n      const program = await getProgram();\n\n      await program.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue);\n\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error);\n    }\n  };\n\n  const updateVote = async (gifLink) => {\n    try {\n      const provider = getProvider();\n      const program = await getProgram();\n\n      console.log(gifLink);\n\n\n      await updateItem();\n      /*\n      await program.updateItem(gifLink, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      */\n      console.log(\"Vote sent to program\", inputValue);\n\n      //      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending Vote:\", error);\n    }\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new AnchorProvider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n    return provider;\n  };\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = await getProgram();\n\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount],\n      });\n      console.log(\n        \"Created a new BaseAccount w/ address:\",\n        baseAccount.publicKey.toString()\n      );\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button\n            className=\"cta-button submit-gif-button\"\n            onClick={createGifAccount}\n          >\n            Click for One-Time Initialization GIF Account\n          </button>\n        </div>\n      );\n    }\n    // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return (\n        <div className=\"connected-container\">\n          <form\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendGif();\n            }}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"Enter gif link!\"\n              value={inputValue}\n              onChange={onInputChange}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\n              Submit\n            </button>\n          </form>\n          <div className=\"gif-grid\">\n            {/* We use index as the key instead, also, the src is now item.gifLink */}\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <img src={item.gifLink} alt=\"gif\" />\n                <p className=\"vote-count\">{item.votes.toString()}</p>\n                <span>\n                  <form\n                    onSubmit={(event) => {\n                      event.preventDefault();\n                      updateVote(item.gifLink);\n                    }}\n                  >\n                    <button\n                      className=\"vote-btn\"\n                      data-alt-text=\"Thanks for Voting\"\n                      value={inputValue}\n                      type=\"submit\"\n                    >\n                      <span className=\"text\">Vote!</span>\n                    </button>\n                  </form>\n                  <p className=\"gradient-text\">{item.userAddress.toString()}</p>\n                  <p className=\"sub-text\">{item.votes.toString()}</p>\n                </span>\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    }\n  };\n\n  const getProgram = async () => {\n    // Get metadata about your solana program\n    const idl = await Program.fetchIdl(programID, getProvider());\n    // Create a program that you can call\n    return new Program(idl, programID, getProvider());\n  };\n\n  const getGifList = async () => {\n    try {\n      const program = await getProgram();\n      console.log(program.account.baseAccount.fetch(baseAccount.publicKey));\n      const account = await program.account.baseAccount.fetch(\n        baseAccount.publicKey\n      );\n\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifList(null);\n    }\n  };\n  // UseEffects\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\");\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      {/* This was solely added for some styling fanciness */}\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\n        <div className=\"header-container\">\n          <p className=\"header\">GIF PORTAL</p>\n          <p className=\"sub-text\">View your GIF collection âœ¨</p>\n          {/* Add the condition to show this only if we don't have a wallet address */}\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
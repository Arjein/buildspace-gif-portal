{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AccountClient = void 0;\nconst camelcase_1 = __importDefault(require(\"camelcase\"));\nconst eventemitter3_1 = __importDefault(require(\"eventemitter3\"));\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst provider_js_1 = require(\"../../provider.js\");\nconst index_js_1 = require(\"../../coder/index.js\");\nconst common_js_1 = require(\"../common.js\");\nconst pubkeyUtil = __importStar(require(\"../../utils/pubkey.js\"));\nconst rpcUtil = __importStar(require(\"../../utils/rpc.js\"));\nclass AccountFactory {\n  static build(idl, coder, programId, provider) {\n    var _a;\n    const accountFns = {};\n    (_a = idl.accounts) === null || _a === void 0 ? void 0 : _a.forEach(idlAccount => {\n      const name = (0, camelcase_1.default)(idlAccount.name);\n      accountFns[name] = new AccountClient(idl, idlAccount, programId, provider, coder);\n    });\n    return accountFns;\n  }\n}\nexports.default = AccountFactory;\nclass AccountClient {\n  constructor(idl, idlAccount, programId, provider, coder) {\n    this._idlAccount = idlAccount;\n    this._programId = programId;\n    this._provider = provider !== null && provider !== void 0 ? provider : (0, provider_js_1.getProvider)();\n    this._coder = coder !== null && coder !== void 0 ? coder : new index_js_1.BorshCoder(idl);\n    this._size = this._coder.accounts.size(idlAccount);\n  }\n  /**\n   * Returns the number of bytes in this account.\n   */\n  get size() {\n    return this._size;\n  }\n  /**\n   * Returns the program ID owning all accounts.\n   */\n  get programId() {\n    return this._programId;\n  }\n  /**\n   * Returns the client's wallet and network provider.\n   */\n  get provider() {\n    return this._provider;\n  }\n  /**\n   * Returns the coder.\n   */\n  get coder() {\n    return this._coder;\n  }\n  /**\n   * Returns a deserialized account, returning null if it doesn't exist.\n   *\n   * @param address The address of the account to fetch.\n   */\n  async fetchNullable(address, commitment) {\n    const accountInfo = await this.getAccountInfo(address, commitment);\n    if (accountInfo === null) {\n      return null;\n    }\n    return this._coder.accounts.decode(this._idlAccount.name, accountInfo.data);\n  }\n  /**\n   * Returns a deserialized account.\n   *\n   * @param address The address of the account to fetch.\n   */\n  async fetch(address, commitment) {\n    const data = await this.fetchNullable(address, commitment);\n    if (data === null) {\n      throw new Error(`Account does not exist ${address.toString()}`);\n    }\n    return data;\n  }\n  /**\n   * Returns multiple deserialized accounts.\n   * Accounts not found or with wrong discriminator are returned as null.\n   *\n   * @param addresses The addresses of the accounts to fetch.\n   */\n  async fetchMultiple(addresses, commitment) {\n    const accounts = await rpcUtil.getMultipleAccounts(this._provider.connection, addresses.map(address => (0, common_js_1.translateAddress)(address)), commitment);\n    // Decode accounts where discriminator is correct, null otherwise\n    return accounts.map(account => {\n      if (account == null) {\n        return null;\n      }\n      return this._coder.accounts.decode(this._idlAccount.name, account === null || account === void 0 ? void 0 : account.account.data);\n    });\n  }\n  /**\n   * Returns all instances of this account type for the program.\n   *\n   * @param filters User-provided filters to narrow the results from `connection.getProgramAccounts`.\n   *\n   *                When filters are not defined this method returns all\n   *                the account instances.\n   *\n   *                When filters are of type `Buffer`, the filters are appended\n   *                after the discriminator.\n   *\n   *                When filters are of type `GetProgramAccountsFilter[]`,\n   *                filters are appended after the discriminator filter.\n   */\n  async all(filters) {\n    let resp = await this._provider.connection.getProgramAccounts(this._programId, {\n      commitment: this._provider.connection.commitment,\n      filters: [{\n        memcmp: this.coder.accounts.memcmp(this._idlAccount.name, filters instanceof Buffer ? filters : undefined)\n      }, ...(Array.isArray(filters) ? filters : [])]\n    });\n    return resp.map(_ref => {\n      let {\n        pubkey,\n        account\n      } = _ref;\n      return {\n        publicKey: pubkey,\n        account: this._coder.accounts.decode(this._idlAccount.name, account.data)\n      };\n    });\n  }\n  /**\n   * Returns an `EventEmitter` emitting a \"change\" event whenever the account\n   * changes.\n   */\n  subscribe(address, commitment) {\n    const sub = subscriptions.get(address.toString());\n    if (sub) {\n      return sub.ee;\n    }\n    const ee = new eventemitter3_1.default();\n    address = (0, common_js_1.translateAddress)(address);\n    const listener = this._provider.connection.onAccountChange(address, acc => {\n      const account = this._coder.accounts.decode(this._idlAccount.name, acc.data);\n      ee.emit(\"change\", account);\n    }, commitment);\n    subscriptions.set(address.toString(), {\n      ee,\n      listener\n    });\n    return ee;\n  }\n  /**\n   * Unsubscribes from the account at the given address.\n   */\n  async unsubscribe(address) {\n    let sub = subscriptions.get(address.toString());\n    if (!sub) {\n      console.warn(\"Address is not subscribed\");\n      return;\n    }\n    if (subscriptions) {\n      await this._provider.connection.removeAccountChangeListener(sub.listener).then(() => {\n        subscriptions.delete(address.toString());\n      }).catch(console.error);\n    }\n  }\n  /**\n   * Returns an instruction for creating this account.\n   */\n  async createInstruction(signer, sizeOverride) {\n    const size = this.size;\n    // @ts-expect-error\n    if (this._provider.wallet === undefined) {\n      throw new Error(\"This function requires the Provider interface implementor to have a 'wallet' field.\");\n    }\n    return web3_js_1.SystemProgram.createAccount({\n      // @ts-expect-error\n      fromPubkey: this._provider.wallet.publicKey,\n      newAccountPubkey: signer.publicKey,\n      space: sizeOverride !== null && sizeOverride !== void 0 ? sizeOverride : size,\n      lamports: await this._provider.connection.getMinimumBalanceForRentExemption(sizeOverride !== null && sizeOverride !== void 0 ? sizeOverride : size),\n      programId: this._programId\n    });\n  }\n  /**\n   * @deprecated since version 14.0.\n   *\n   * Function returning the associated account. Args are keys to associate.\n   * Order matters.\n   */\n  async associated() {\n    const addr = await this.associatedAddress(...arguments);\n    return await this.fetch(addr);\n  }\n  /**\n   * @deprecated since version 14.0.\n   *\n   * Function returning the associated address. Args are keys to associate.\n   * Order matters.\n   */\n  async associatedAddress() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return await pubkeyUtil.associated(this._programId, ...args);\n  }\n  async getAccountInfo(address, commitment) {\n    return await this._provider.connection.getAccountInfo((0, common_js_1.translateAddress)(address), commitment);\n  }\n}\nexports.AccountClient = AccountClient;\n// Tracks all subscriptions.\nconst subscriptions = new Map();","map":{"version":3,"mappings":"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","names":["AccountFactory","build","idl","coder","programId","provider","accountFns","accounts","forEach","idlAccount","name","AccountClient","exports","constructor","_idlAccount","_programId","_provider","_coder","index_js_1","_size","size","fetchNullable","address","commitment","accountInfo","getAccountInfo","decode","data","fetch","Error","toString","fetchMultiple","addresses","rpcUtil","getMultipleAccounts","connection","map","account","all","filters","resp","getProgramAccounts","memcmp","Buffer","undefined","Array","isArray","pubkey","publicKey","subscribe","sub","subscriptions","get","ee","eventemitter3_1","listener","onAccountChange","acc","emit","set","unsubscribe","console","warn","removeAccountChangeListener","then","delete","catch","error","createInstruction","signer","sizeOverride","wallet","web3_js_1","createAccount","fromPubkey","newAccountPubkey","space","lamports","getMinimumBalanceForRentExemption","associated","addr","associatedAddress","args","pubkeyUtil","Map"],"sourceRoot":"","sources":["../../../../src/program/namespace/account.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
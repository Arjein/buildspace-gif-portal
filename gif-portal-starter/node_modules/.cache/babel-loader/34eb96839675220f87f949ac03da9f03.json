{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AccountStore = exports.AccountsResolver = void 0;\nconst camelcase_1 = __importDefault(require(\"camelcase\"));\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst utf8 = __importStar(require(\"../utils/bytes/utf8.js\"));\nconst token_js_1 = require(\"../utils/token.js\");\nconst token_1 = require(\"../spl/token\");\n// Populates a given accounts context with PDAs and common missing accounts.\nclass AccountsResolver {\n  constructor(_args, _accounts, _provider, _programId, _idlIx, _accountNamespace) {\n    this._args = _args;\n    this._accounts = _accounts;\n    this._provider = _provider;\n    this._programId = _programId;\n    this._idlIx = _idlIx;\n    this._accountStore = new AccountStore(_provider, _accountNamespace);\n  }\n  // Note: We serially resolve PDAs one by one rather than doing them\n  //       in parallel because there can be dependencies between\n  //       addresses. That is, one PDA can be used as a seed in another.\n  //\n  // TODO: PDAs need to be resolved in topological order. For now, we\n  //       require the developer to simply list the accounts in the\n  //       correct order. But in future work, we should create the\n  //       dependency graph and resolve automatically.\n  //\n  async resolve() {\n    for (let k = 0; k < this._idlIx.accounts.length; k += 1) {\n      // Cast is ok because only a non-nested IdlAccount can have a seeds\n      // cosntraint.\n      const accountDesc = this._idlIx.accounts[k];\n      const accountDescName = (0, camelcase_1.default)(accountDesc.name);\n      // Signers default to the provider.\n      if (accountDesc.isSigner && !this._accounts[accountDescName]) {\n        // @ts-expect-error\n        if (this._provider.wallet === undefined) {\n          throw new Error(\"This function requires the Provider interface implementor to have a 'wallet' field.\");\n        }\n        // @ts-expect-error\n        this._accounts[accountDescName] = this._provider.wallet.publicKey;\n        continue;\n      }\n      // Common accounts are auto populated with magic names by convention.\n      if (Reflect.has(AccountsResolver.CONST_ACCOUNTS, accountDescName) && !this._accounts[accountDescName]) {\n        this._accounts[accountDescName] = AccountsResolver.CONST_ACCOUNTS[accountDescName];\n      }\n    }\n    for (let k = 0; k < this._idlIx.accounts.length; k += 1) {\n      // Cast is ok because only a non-nested IdlAccount can have a seeds\n      // cosntraint.\n      const accountDesc = this._idlIx.accounts[k];\n      const accountDescName = (0, camelcase_1.default)(accountDesc.name);\n      // PDA derived from IDL seeds.\n      if (accountDesc.pda && accountDesc.pda.seeds.length > 0 && !this._accounts[accountDescName]) {\n        await this.autoPopulatePda(accountDesc);\n        continue;\n      }\n    }\n  }\n  async autoPopulatePda(accountDesc) {\n    if (!accountDesc.pda || !accountDesc.pda.seeds) throw new Error(\"Must have seeds\");\n    const seeds = await Promise.all(accountDesc.pda.seeds.map(seedDesc => this.toBuffer(seedDesc)));\n    const programId = await this.parseProgramId(accountDesc);\n    const [pubkey] = await web3_js_1.PublicKey.findProgramAddress(seeds, programId);\n    this._accounts[(0, camelcase_1.default)(accountDesc.name)] = pubkey;\n  }\n  async parseProgramId(accountDesc) {\n    var _a;\n    if (!((_a = accountDesc.pda) === null || _a === void 0 ? void 0 : _a.programId)) {\n      return this._programId;\n    }\n    switch (accountDesc.pda.programId.kind) {\n      case \"const\":\n        return new web3_js_1.PublicKey(this.toBufferConst(accountDesc.pda.programId.value));\n      case \"arg\":\n        return this.argValue(accountDesc.pda.programId);\n      case \"account\":\n        return await this.accountValue(accountDesc.pda.programId);\n      default:\n        throw new Error(`Unexpected program seed kind: ${accountDesc.pda.programId.kind}`);\n    }\n  }\n  async toBuffer(seedDesc) {\n    switch (seedDesc.kind) {\n      case \"const\":\n        return this.toBufferConst(seedDesc);\n      case \"arg\":\n        return await this.toBufferArg(seedDesc);\n      case \"account\":\n        return await this.toBufferAccount(seedDesc);\n      default:\n        throw new Error(`Unexpected seed kind: ${seedDesc.kind}`);\n    }\n  }\n  toBufferConst(seedDesc) {\n    return this.toBufferValue(seedDesc.type, seedDesc.value);\n  }\n  async toBufferArg(seedDesc) {\n    const argValue = this.argValue(seedDesc);\n    return this.toBufferValue(seedDesc.type, argValue);\n  }\n  argValue(seedDesc) {\n    const seedArgName = (0, camelcase_1.default)(seedDesc.path.split(\".\")[0]);\n    const idlArgPosition = this._idlIx.args.findIndex(argDesc => argDesc.name === seedArgName);\n    if (idlArgPosition === -1) {\n      throw new Error(`Unable to find argument for seed: ${seedArgName}`);\n    }\n    return this._args[idlArgPosition];\n  }\n  async toBufferAccount(seedDesc) {\n    const accountValue = await this.accountValue(seedDesc);\n    return this.toBufferValue(seedDesc.type, accountValue);\n  }\n  async accountValue(seedDesc) {\n    const pathComponents = seedDesc.path.split(\".\");\n    const fieldName = pathComponents[0];\n    const fieldPubkey = this._accounts[(0, camelcase_1.default)(fieldName)];\n    // The seed is a pubkey of the account.\n    if (pathComponents.length === 1) {\n      return fieldPubkey;\n    }\n    // The key is account data.\n    //\n    // Fetch and deserialize it.\n    const account = await this._accountStore.fetchAccount(seedDesc.account, fieldPubkey);\n    // Dereference all fields in the path to get the field value\n    // used in the seed.\n    const fieldValue = this.parseAccountValue(account, pathComponents.slice(1));\n    return fieldValue;\n  }\n  parseAccountValue(account, path) {\n    let accountField;\n    while (path.length > 0) {\n      accountField = account[(0, camelcase_1.default)(path[0])];\n      path = path.slice(1);\n    }\n    return accountField;\n  }\n  // Converts the given idl valaue into a Buffer. The values here must be\n  // primitives. E.g. no structs.\n  //\n  // TODO: add more types here as needed.\n  toBufferValue(type, value) {\n    switch (type) {\n      case \"u8\":\n        return Buffer.from([value]);\n      case \"u16\":\n        let b = Buffer.alloc(2);\n        b.writeUInt16LE(value);\n        return b;\n      case \"u32\":\n        let buf = Buffer.alloc(4);\n        buf.writeUInt32LE(value);\n        return buf;\n      case \"u64\":\n        let bU64 = Buffer.alloc(8);\n        bU64.writeBigUInt64LE(BigInt(value));\n        return bU64;\n      case \"string\":\n        return Buffer.from(utf8.encode(value));\n      case \"publicKey\":\n        return value.toBuffer();\n      default:\n        if (type.array) {\n          return Buffer.from(value);\n        }\n        throw new Error(`Unexpected seed type: ${type}`);\n    }\n  }\n}\nexports.AccountsResolver = AccountsResolver;\nAccountsResolver.CONST_ACCOUNTS = {\n  associatedTokenProgram: token_js_1.ASSOCIATED_PROGRAM_ID,\n  rent: web3_js_1.SYSVAR_RENT_PUBKEY,\n  systemProgram: web3_js_1.SystemProgram.programId,\n  tokenProgram: token_js_1.TOKEN_PROGRAM_ID\n};\n// TODO: this should be configureable to avoid unnecessary requests.\nclass AccountStore {\n  // todo: don't use the progrma use the account namespace.\n  constructor(_provider, _accounts) {\n    this._provider = _provider;\n    this._accounts = _accounts;\n    this._cache = new Map();\n  }\n  async fetchAccount(name, publicKey) {\n    const address = publicKey.toString();\n    if (!this._cache.has(address)) {\n      if (name === \"TokenAccount\") {\n        const accountInfo = await this._provider.connection.getAccountInfo(publicKey);\n        if (accountInfo === null) {\n          throw new Error(`invalid account info for ${address}`);\n        }\n        const data = (0, token_1.coder)().accounts.decode(\"token\", accountInfo.data);\n        this._cache.set(address, data);\n      } else {\n        const account = this._accounts[(0, camelcase_1.default)(name)].fetch(publicKey);\n        this._cache.set(address, account);\n      }\n    }\n    return this._cache.get(address);\n  }\n}\nexports.AccountStore = AccountStore;","map":{"version":3,"mappings":"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","names":["AccountsResolver","constructor","_args","_accounts","_provider","_programId","_idlIx","_accountNamespace","_accountStore","AccountStore","resolve","k","accounts","length","accountDesc","accountDescName","name","isSigner","wallet","undefined","Error","publicKey","Reflect","has","CONST_ACCOUNTS","pda","seeds","autoPopulatePda","Promise","all","map","seedDesc","toBuffer","programId","parseProgramId","pubkey","web3_js_1","findProgramAddress","kind","toBufferConst","value","argValue","accountValue","toBufferArg","toBufferAccount","toBufferValue","type","seedArgName","path","split","idlArgPosition","args","findIndex","argDesc","pathComponents","fieldName","fieldPubkey","account","fetchAccount","fieldValue","parseAccountValue","slice","accountField","Buffer","from","b","alloc","writeUInt16LE","buf","writeUInt32LE","bU64","writeBigUInt64LE","BigInt","utf8","encode","array","exports","associatedTokenProgram","token_js_1","rent","systemProgram","tokenProgram","Map","address","toString","_cache","accountInfo","connection","getAccountInfo","data","decode","set","fetch","get"],"sourceRoot":"","sources":["../../../src/program/accounts-resolver.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
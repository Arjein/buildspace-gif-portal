{"ast":null,"code":"var _a;\n/**\n * Returns true if being run inside a web browser,\n * false if in a Node process or electron app.\n */\nexport const isBrowser = typeof window !== \"undefined\" && !((_a = window.process) === null || _a === void 0 ? void 0 : _a.hasOwnProperty(\"type\"));\n/**\n * Splits an array into chunks\n *\n * @param array Array of objects to chunk.\n * @param size The max size of a chunk.\n * @returns A two dimensional array where each T[] length is < the provided size.\n */\nexport function chunks(array, size) {\n  return Array.apply(0, new Array(Math.ceil(array.length / size))).map((_, index) => array.slice(index * size, (index + 1) * size));\n}","map":{"version":3,"mappings":";AAAA;;;;AAIA,OAAO,MAAMA,SAAS,GACpB,OAAOC,MAAM,KAAK,WAAW,IAAI,EAAC,YAAM,CAACC,OAAO,0CAAEC,cAAc,CAAC,MAAM,CAAC;AAE1E;;;;;;;AAOA,OAAM,SAAUC,MAAM,CAAIC,KAAU,EAAEC,IAAY;EAChD,OAAOC,KAAK,CAACC,KAAK,CAChB,CAAC,EACD,IAAID,KAAK,CAACE,IAAI,CAACC,IAAI,CAACL,KAAK,CAACM,MAAM,GAAGL,IAAI,CAAC,CAAC,CAC1C,CAACM,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,KAAKT,KAAK,CAACU,KAAK,CAACD,KAAK,GAAGR,IAAI,EAAE,CAACQ,KAAK,GAAG,CAAC,IAAIR,IAAI,CAAC,CAAC;AACpE","names":["isBrowser","window","process","hasOwnProperty","chunks","array","size","Array","apply","Math","ceil","length","map","_","index","slice"],"sourceRoot":"","sources":["../../../src/utils/common.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
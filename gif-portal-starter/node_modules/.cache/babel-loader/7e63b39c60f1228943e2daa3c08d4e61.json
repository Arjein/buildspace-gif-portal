{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BorshInstructionCoder = exports.SIGHASH_GLOBAL_NAMESPACE = exports.SIGHASH_STATE_NAMESPACE = void 0;\nconst bs58_1 = __importDefault(require(\"bs58\"));\nconst buffer_1 = require(\"buffer\");\nconst camelcase_1 = __importDefault(require(\"camelcase\"));\nconst snake_case_1 = require(\"snake-case\");\nconst js_sha256_1 = require(\"js-sha256\");\nconst borsh = __importStar(require(\"@project-serum/borsh\"));\nconst idl_js_1 = require(\"./idl.js\");\n/**\n * Namespace for state method function signatures.\n */\nexports.SIGHASH_STATE_NAMESPACE = \"state\";\n/**\n * Namespace for global instruction function signatures (i.e. functions\n * that aren't namespaced by the state or any of its trait implementations).\n */\nexports.SIGHASH_GLOBAL_NAMESPACE = \"global\";\n/**\n * Encodes and decodes program instructions.\n */\nclass BorshInstructionCoder {\n  constructor(idl) {\n    this.idl = idl;\n    this.ixLayout = BorshInstructionCoder.parseIxLayout(idl);\n    const sighashLayouts = new Map();\n    idl.instructions.forEach(ix => {\n      const sh = sighash(exports.SIGHASH_GLOBAL_NAMESPACE, ix.name);\n      sighashLayouts.set(bs58_1.default.encode(sh), {\n        layout: this.ixLayout.get(ix.name),\n        name: ix.name\n      });\n    });\n    if (idl.state) {\n      idl.state.methods.map(ix => {\n        const sh = sighash(exports.SIGHASH_STATE_NAMESPACE, ix.name);\n        sighashLayouts.set(bs58_1.default.encode(sh), {\n          layout: this.ixLayout.get(ix.name),\n          name: ix.name\n        });\n      });\n    }\n    this.sighashLayouts = sighashLayouts;\n  }\n  /**\n   * Encodes a program instruction.\n   */\n  encode(ixName, ix) {\n    return this._encode(exports.SIGHASH_GLOBAL_NAMESPACE, ixName, ix);\n  }\n  /**\n   * Encodes a program state instruction.\n   */\n  encodeState(ixName, ix) {\n    return this._encode(exports.SIGHASH_STATE_NAMESPACE, ixName, ix);\n  }\n  _encode(nameSpace, ixName, ix) {\n    const buffer = buffer_1.Buffer.alloc(1000); // TODO: use a tighter buffer.\n    const methodName = (0, camelcase_1.default)(ixName);\n    const layout = this.ixLayout.get(methodName);\n    if (!layout) {\n      throw new Error(`Unknown method: ${methodName}`);\n    }\n    const len = layout.encode(ix, buffer);\n    const data = buffer.slice(0, len);\n    return buffer_1.Buffer.concat([sighash(nameSpace, ixName), data]);\n  }\n  static parseIxLayout(idl) {\n    const stateMethods = idl.state ? idl.state.methods : [];\n    const ixLayouts = stateMethods.map(m => {\n      let fieldLayouts = m.args.map(arg => {\n        var _a, _b;\n        return idl_js_1.IdlCoder.fieldLayout(arg, Array.from([...((_a = idl.accounts) !== null && _a !== void 0 ? _a : []), ...((_b = idl.types) !== null && _b !== void 0 ? _b : [])]));\n      });\n      const name = (0, camelcase_1.default)(m.name);\n      return [name, borsh.struct(fieldLayouts, name)];\n    }).concat(idl.instructions.map(ix => {\n      let fieldLayouts = ix.args.map(arg => {\n        var _a, _b;\n        return idl_js_1.IdlCoder.fieldLayout(arg, Array.from([...((_a = idl.accounts) !== null && _a !== void 0 ? _a : []), ...((_b = idl.types) !== null && _b !== void 0 ? _b : [])]));\n      });\n      const name = (0, camelcase_1.default)(ix.name);\n      return [name, borsh.struct(fieldLayouts, name)];\n    }));\n    return new Map(ixLayouts);\n  }\n  /**\n   * Decodes a program instruction.\n   */\n  decode(ix) {\n    let encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"hex\";\n    if (typeof ix === \"string\") {\n      ix = encoding === \"hex\" ? buffer_1.Buffer.from(ix, \"hex\") : bs58_1.default.decode(ix);\n    }\n    let sighash = bs58_1.default.encode(ix.slice(0, 8));\n    let data = ix.slice(8);\n    const decoder = this.sighashLayouts.get(sighash);\n    if (!decoder) {\n      return null;\n    }\n    return {\n      data: decoder.layout.decode(data),\n      name: decoder.name\n    };\n  }\n  /**\n   * Returns a formatted table of all the fields in the given instruction data.\n   */\n  format(ix, accountMetas) {\n    return InstructionFormatter.format(ix, accountMetas, this.idl);\n  }\n}\nexports.BorshInstructionCoder = BorshInstructionCoder;\nclass InstructionFormatter {\n  static format(ix, accountMetas, idl) {\n    const idlIx = idl.instructions.filter(i => ix.name === i.name)[0];\n    if (idlIx === undefined) {\n      console.error(\"Invalid instruction given\");\n      return null;\n    }\n    const args = idlIx.args.map(idlField => {\n      return {\n        name: idlField.name,\n        type: InstructionFormatter.formatIdlType(idlField.type),\n        data: InstructionFormatter.formatIdlData(idlField, ix.data[idlField.name], idl.types)\n      };\n    });\n    const flatIdlAccounts = InstructionFormatter.flattenIdlAccounts(idlIx.accounts);\n    const accounts = accountMetas.map((meta, idx) => {\n      if (idx < flatIdlAccounts.length) {\n        return {\n          name: flatIdlAccounts[idx].name,\n          ...meta\n        };\n      }\n      // \"Remaining accounts\" are unnamed in Anchor.\n      else {\n        return {\n          name: undefined,\n          ...meta\n        };\n      }\n    });\n    return {\n      args,\n      accounts\n    };\n  }\n  static formatIdlType(idlType) {\n    if (typeof idlType === \"string\") {\n      return idlType;\n    }\n    if (\"vec\" in idlType) {\n      return `Vec<${this.formatIdlType(idlType.vec)}>`;\n    }\n    if (\"option\" in idlType) {\n      return `Option<${this.formatIdlType(idlType.option)}>`;\n    }\n    if (\"defined\" in idlType) {\n      return idlType.defined;\n    }\n    if (\"array\" in idlType) {\n      return `Array<${idlType.array[0]}; ${idlType.array[1]}>`;\n    }\n    throw new Error(`Unknown IDL type: ${idlType}`);\n  }\n  static formatIdlData(idlField, data, types) {\n    if (typeof idlField.type === \"string\") {\n      return data.toString();\n    }\n    if (idlField.type.hasOwnProperty(\"vec\")) {\n      return \"[\" + data.map(d => this.formatIdlData({\n        name: \"\",\n        type: idlField.type.vec\n      }, d)).join(\", \") + \"]\";\n    }\n    if (idlField.type.hasOwnProperty(\"option\")) {\n      return data === null ? \"null\" : this.formatIdlData({\n        name: \"\",\n        type: idlField.type.option\n      }, data, types);\n    }\n    if (idlField.type.hasOwnProperty(\"defined\")) {\n      if (types === undefined) {\n        throw new Error(\"User defined types not provided\");\n      }\n      const filtered = types.filter(t => t.name === idlField.type.defined);\n      if (filtered.length !== 1) {\n        throw new Error(`Type not found: ${idlField.type.defined}`);\n      }\n      return InstructionFormatter.formatIdlDataDefined(filtered[0], data, types);\n    }\n    return \"unknown\";\n  }\n  static formatIdlDataDefined(typeDef, data, types) {\n    if (typeDef.type.kind === \"struct\") {\n      const struct = typeDef.type;\n      const fields = Object.keys(data).map(k => {\n        const f = struct.fields.filter(f => f.name === k)[0];\n        if (f === undefined) {\n          throw new Error(\"Unable to find type\");\n        }\n        return k + \": \" + InstructionFormatter.formatIdlData(f, data[k], types);\n      }).join(\", \");\n      return \"{ \" + fields + \" }\";\n    } else {\n      if (typeDef.type.variants.length === 0) {\n        return \"{}\";\n      }\n      // Struct enum.\n      if (typeDef.type.variants[0].name) {\n        const variants = typeDef.type.variants;\n        const variant = Object.keys(data)[0];\n        const enumType = data[variant];\n        const namedFields = Object.keys(enumType).map(f => {\n          var _a;\n          const fieldData = enumType[f];\n          const idlField = (_a = variants[variant]) === null || _a === void 0 ? void 0 : _a.filter(v => v.name === f)[0];\n          if (idlField === undefined) {\n            throw new Error(\"Unable to find variant\");\n          }\n          return f + \": \" + InstructionFormatter.formatIdlData(idlField, fieldData, types);\n        }).join(\", \");\n        const variantName = (0, camelcase_1.default)(variant, {\n          pascalCase: true\n        });\n        if (namedFields.length === 0) {\n          return variantName;\n        }\n        return `${variantName} { ${namedFields} }`;\n      }\n      // Tuple enum.\n      else {\n        // TODO.\n        return \"Tuple formatting not yet implemented\";\n      }\n    }\n  }\n  static flattenIdlAccounts(accounts, prefix) {\n    return accounts.map(account => {\n      const accName = sentenceCase(account.name);\n      if (account.hasOwnProperty(\"accounts\")) {\n        const newPrefix = prefix ? `${prefix} > ${accName}` : accName;\n        return InstructionFormatter.flattenIdlAccounts(account.accounts, newPrefix);\n      } else {\n        return {\n          ...account,\n          name: prefix ? `${prefix} > ${accName}` : accName\n        };\n      }\n    }).flat();\n  }\n}\nfunction sentenceCase(field) {\n  const result = field.replace(/([A-Z])/g, \" $1\");\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n// Not technically sighash, since we don't include the arguments, as Rust\n// doesn't allow function overloading.\nfunction sighash(nameSpace, ixName) {\n  let name = (0, snake_case_1.snakeCase)(ixName);\n  let preimage = `${nameSpace}:${name}`;\n  return buffer_1.Buffer.from(js_sha256_1.sha256.digest(preimage)).slice(0, 8);\n}","map":{"version":3,"mappings":"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","names":["exports","BorshInstructionCoder","constructor","idl","ixLayout","parseIxLayout","sighashLayouts","Map","instructions","forEach","ix","sh","sighash","name","set","bs58_1","encode","layout","get","state","methods","map","ixName","_encode","encodeState","nameSpace","buffer","buffer_1","alloc","methodName","Error","len","data","slice","concat","stateMethods","ixLayouts","m","fieldLayouts","args","arg","idl_js_1","fieldLayout","Array","from","accounts","types","borsh","struct","decode","encoding","decoder","format","accountMetas","InstructionFormatter","idlIx","filter","i","undefined","console","error","idlField","type","formatIdlType","formatIdlData","flatIdlAccounts","flattenIdlAccounts","meta","idx","length","idlType","vec","option","defined","array","toString","hasOwnProperty","d","join","filtered","t","formatIdlDataDefined","typeDef","kind","fields","Object","keys","k","f","variants","variant","enumType","namedFields","fieldData","v","variantName","pascalCase","prefix","account","accName","sentenceCase","newPrefix","flat","field","result","replace","charAt","toUpperCase","preimage","js_sha256_1","digest"],"sourceRoot":"","sources":["../../../../src/coder/borsh/instruction.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
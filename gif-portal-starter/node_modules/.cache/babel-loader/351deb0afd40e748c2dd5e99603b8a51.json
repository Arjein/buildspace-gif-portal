{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.simulateTransaction = exports.getMultipleAccounts = exports.invoke = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst common_js_1 = require(\"../utils/common.js\");\nconst common_js_2 = require(\"../program/common.js\");\nconst provider_js_1 = require(\"../provider.js\");\nconst superstruct_1 = require(\"superstruct\");\n/**\n * Sends a transaction to a program with the given accounts and instruction\n * data.\n */\nasync function invoke(programId, accounts, data, provider) {\n  programId = (0, common_js_2.translateAddress)(programId);\n  if (!provider) {\n    provider = (0, provider_js_1.getProvider)();\n  }\n  const tx = new web3_js_1.Transaction();\n  tx.add(new web3_js_1.TransactionInstruction({\n    programId,\n    keys: accounts !== null && accounts !== void 0 ? accounts : [],\n    data\n  }));\n  if (provider.sendAndConfirm === undefined) {\n    throw new Error(\"This function requires 'Provider.sendAndConfirm' to be implemented.\");\n  }\n  return await provider.sendAndConfirm(tx, []);\n}\nexports.invoke = invoke;\nconst GET_MULTIPLE_ACCOUNTS_LIMIT = 99;\nasync function getMultipleAccounts(connection, publicKeys, commitment) {\n  if (publicKeys.length <= GET_MULTIPLE_ACCOUNTS_LIMIT) {\n    return await getMultipleAccountsCore(connection, publicKeys, commitment);\n  } else {\n    const batches = (0, common_js_1.chunks)(publicKeys, GET_MULTIPLE_ACCOUNTS_LIMIT);\n    const results = await Promise.all(batches.map(batch => getMultipleAccountsCore(connection, batch, commitment)));\n    return results.flat();\n  }\n}\nexports.getMultipleAccounts = getMultipleAccounts;\nasync function getMultipleAccountsCore(connection, publicKeys, commitmentOverride) {\n  const commitment = commitmentOverride !== null && commitmentOverride !== void 0 ? commitmentOverride : connection.commitment;\n  const accounts = await connection.getMultipleAccountsInfo(publicKeys, commitment);\n  return accounts.map((account, idx) => {\n    if (account === null) {\n      return null;\n    }\n    return {\n      publicKey: publicKeys[idx],\n      account\n    };\n  });\n}\n// copy from @solana/web3.js that has a commitment param\nasync function simulateTransaction(connection, transaction, signers, commitment, includeAccounts) {\n  if (signers && signers.length > 0) {\n    transaction.sign(...signers);\n  }\n  // @ts-expect-error\n  const message = transaction._compile();\n  const signData = message.serialize();\n  // @ts-expect-error\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString(\"base64\");\n  const config = {\n    encoding: \"base64\",\n    commitment: commitment !== null && commitment !== void 0 ? commitment : connection.commitment\n  };\n  if (includeAccounts) {\n    const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(key => key.toBase58());\n    config[\"accounts\"] = {\n      encoding: \"base64\",\n      addresses\n    };\n  }\n  if (signers) {\n    config.sigVerify = true;\n  }\n  const args = [encodedTransaction, config];\n  // @ts-expect-error\n  const unsafeRes = await connection._rpcRequest(\"simulateTransaction\", args);\n  const res = (0, superstruct_1.create)(unsafeRes, SimulatedTransactionResponseStruct);\n  if (\"error\" in res) {\n    let logs;\n    if (\"data\" in res.error) {\n      logs = res.error.data.logs;\n      if (logs && Array.isArray(logs)) {\n        const traceIndent = \"\\n    \";\n        const logTrace = traceIndent + logs.join(traceIndent);\n        console.error(res.error.message, logTrace);\n      }\n    }\n    throw new web3_js_1.SendTransactionError(\"failed to simulate transaction: \" + res.error.message, logs);\n  }\n  return res.result;\n}\nexports.simulateTransaction = simulateTransaction;\n// copy from @solana/web3.js\nfunction jsonRpcResult(schema) {\n  return (0, superstruct_1.coerce)(createRpcResult(schema), UnknownRpcResult, value => {\n    if (\"error\" in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: (0, superstruct_1.create)(value.result, schema)\n      };\n    }\n  });\n}\n// copy from @solana/web3.js\nconst UnknownRpcResult = createRpcResult((0, superstruct_1.unknown)());\n// copy from @solana/web3.js\nfunction createRpcResult(result) {\n  return (0, superstruct_1.union)([(0, superstruct_1.type)({\n    jsonrpc: (0, superstruct_1.literal)(\"2.0\"),\n    id: (0, superstruct_1.string)(),\n    result\n  }), (0, superstruct_1.type)({\n    jsonrpc: (0, superstruct_1.literal)(\"2.0\"),\n    id: (0, superstruct_1.string)(),\n    error: (0, superstruct_1.type)({\n      code: (0, superstruct_1.unknown)(),\n      message: (0, superstruct_1.string)(),\n      data: (0, superstruct_1.optional)((0, superstruct_1.any)())\n    })\n  })]);\n}\n// copy from @solana/web3.js\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult((0, superstruct_1.type)({\n    context: (0, superstruct_1.type)({\n      slot: (0, superstruct_1.number)()\n    }),\n    value\n  }));\n}\n// copy from @solana/web3.js\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext((0, superstruct_1.type)({\n  err: (0, superstruct_1.nullable)((0, superstruct_1.union)([(0, superstruct_1.type)({}), (0, superstruct_1.string)()])),\n  logs: (0, superstruct_1.nullable)((0, superstruct_1.array)((0, superstruct_1.string)())),\n  accounts: (0, superstruct_1.optional)((0, superstruct_1.nullable)((0, superstruct_1.array)((0, superstruct_1.nullable)((0, superstruct_1.type)({\n    executable: (0, superstruct_1.boolean)(),\n    owner: (0, superstruct_1.string)(),\n    lamports: (0, superstruct_1.number)(),\n    data: (0, superstruct_1.array)((0, superstruct_1.string)()),\n    rentEpoch: (0, superstruct_1.optional)((0, superstruct_1.number)())\n  }))))),\n  unitsConsumed: (0, superstruct_1.optional)((0, superstruct_1.number)())\n}));","map":{"version":3,"mappings":"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","names":["invoke","programId","accounts","data","provider","tx","web3_js_1","add","keys","sendAndConfirm","undefined","Error","exports","GET_MULTIPLE_ACCOUNTS_LIMIT","getMultipleAccounts","connection","publicKeys","commitment","length","getMultipleAccountsCore","batches","results","Promise","all","map","batch","flat","commitmentOverride","getMultipleAccountsInfo","account","idx","publicKey","simulateTransaction","transaction","signers","includeAccounts","sign","message","_compile","signData","serialize","wireTransaction","_serialize","encodedTransaction","toString","config","encoding","addresses","Array","isArray","nonProgramIds","key","toBase58","sigVerify","args","unsafeRes","_rpcRequest","res","SimulatedTransactionResponseStruct","logs","error","traceIndent","logTrace","join","console","result","jsonRpcResult","schema","createRpcResult","UnknownRpcResult","value","jsonrpc","id","code","jsonRpcResultAndContext","context","slot","err","executable","owner","lamports","rentEpoch","unitsConsumed"],"sourceRoot":"","sources":["../../../src/utils/rpc.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
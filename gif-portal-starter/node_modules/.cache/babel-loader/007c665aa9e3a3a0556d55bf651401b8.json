{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getProvider = exports.setProvider = exports.AnchorProvider = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst index_js_1 = require(\"./utils/bytes/index.js\");\nconst common_js_1 = require(\"./utils/common.js\");\nconst rpc_js_1 = require(\"./utils/rpc.js\");\n/**\n * The network and wallet context used to send transactions paid for and signed\n * by the provider.\n */\nclass AnchorProvider {\n  /**\n   * @param connection The cluster connection where the program is deployed.\n   * @param wallet     The wallet used to pay for and sign all transactions.\n   * @param opts       Transaction confirmation options to use by default.\n   */\n  constructor(connection, wallet, opts) {\n    this.connection = connection;\n    this.wallet = wallet;\n    this.opts = opts;\n    this.publicKey = wallet.publicKey;\n  }\n  static defaultOptions() {\n    return {\n      preflightCommitment: \"processed\",\n      commitment: \"processed\"\n    };\n  }\n  /**\n   * Returns a `Provider` with a wallet read from the local filesystem.\n   *\n   * @param url  The network cluster url.\n   * @param opts The default transaction confirmation options.\n   *\n   * (This api is for Node only.)\n   */\n  static local(url, opts) {\n    if (common_js_1.isBrowser) {\n      throw new Error(`Provider local is not available on browser.`);\n    }\n    opts = opts !== null && opts !== void 0 ? opts : AnchorProvider.defaultOptions();\n    const connection = new web3_js_1.Connection(url !== null && url !== void 0 ? url : \"http://localhost:8899\", opts.preflightCommitment);\n    const NodeWallet = require(\"./nodewallet.js\").default;\n    const wallet = NodeWallet.local();\n    return new AnchorProvider(connection, wallet, opts);\n  }\n  /**\n   * Returns a `Provider` read from the `ANCHOR_PROVIDER_URL` environment\n   * variable\n   *\n   * (This api is for Node only.)\n   */\n  static env() {\n    if (common_js_1.isBrowser) {\n      throw new Error(`Provider env is not available on browser.`);\n    }\n    const process = require(\"process\");\n    const url = process.env.ANCHOR_PROVIDER_URL;\n    if (url === undefined) {\n      throw new Error(\"ANCHOR_PROVIDER_URL is not defined\");\n    }\n    const options = AnchorProvider.defaultOptions();\n    const connection = new web3_js_1.Connection(url, options.commitment);\n    const NodeWallet = require(\"./nodewallet.js\").default;\n    const wallet = NodeWallet.local();\n    return new AnchorProvider(connection, wallet, options);\n  }\n  /**\n   * Sends the given transaction, paid for and signed by the provider's wallet.\n   *\n   * @param tx      The transaction to send.\n   * @param signers The signers of the transaction.\n   * @param opts    Transaction confirmation options.\n   */\n  async sendAndConfirm(tx, signers, opts) {\n    var _a;\n    if (opts === undefined) {\n      opts = this.opts;\n    }\n    tx.feePayer = this.wallet.publicKey;\n    tx.recentBlockhash = (await this.connection.getRecentBlockhash(opts.preflightCommitment)).blockhash;\n    tx = await this.wallet.signTransaction(tx);\n    (signers !== null && signers !== void 0 ? signers : []).forEach(kp => {\n      tx.partialSign(kp);\n    });\n    const rawTx = tx.serialize();\n    try {\n      return await sendAndConfirmRawTransaction(this.connection, rawTx, opts);\n    } catch (err) {\n      // thrown if the underlying 'confirmTransaction' encounters a failed tx\n      // the 'confirmTransaction' error does not return logs so we make another rpc call to get them\n      if (err instanceof ConfirmError) {\n        // choose the shortest available commitment for 'getTransaction'\n        // (the json RPC does not support any shorter than \"confirmed\" for 'getTransaction')\n        // because that will see the tx sent with `sendAndConfirmRawTransaction` no matter which\n        // commitment `sendAndConfirmRawTransaction` used\n        const failedTx = await this.connection.getTransaction(index_js_1.bs58.encode(tx.signature), {\n          commitment: \"confirmed\"\n        });\n        if (!failedTx) {\n          throw err;\n        } else {\n          const logs = (_a = failedTx.meta) === null || _a === void 0 ? void 0 : _a.logMessages;\n          throw !logs ? err : new web3_js_1.SendTransactionError(err.message, logs);\n        }\n      } else {\n        throw err;\n      }\n    }\n  }\n  /**\n   * Similar to `send`, but for an array of transactions and signers.\n   */\n  async sendAll(txWithSigners, opts) {\n    if (opts === undefined) {\n      opts = this.opts;\n    }\n    const blockhash = await this.connection.getRecentBlockhash(opts.preflightCommitment);\n    let txs = txWithSigners.map(r => {\n      var _a;\n      let tx = r.tx;\n      let signers = (_a = r.signers) !== null && _a !== void 0 ? _a : [];\n      tx.feePayer = this.wallet.publicKey;\n      tx.recentBlockhash = blockhash.blockhash;\n      signers.forEach(kp => {\n        tx.partialSign(kp);\n      });\n      return tx;\n    });\n    const signedTxs = await this.wallet.signAllTransactions(txs);\n    const sigs = [];\n    for (let k = 0; k < txs.length; k += 1) {\n      const tx = signedTxs[k];\n      const rawTx = tx.serialize();\n      sigs.push(await sendAndConfirmRawTransaction(this.connection, rawTx, opts));\n    }\n    return sigs;\n  }\n  /**\n   * Simulates the given transaction, returning emitted logs from execution.\n   *\n   * @param tx      The transaction to send.\n   * @param signers The signers of the transaction.\n   * @param opts    Transaction confirmation options.\n   */\n  async simulate(tx, signers, commitment, includeAccounts) {\n    tx.feePayer = this.wallet.publicKey;\n    tx.recentBlockhash = (await this.connection.getLatestBlockhash(commitment !== null && commitment !== void 0 ? commitment : this.connection.commitment)).blockhash;\n    tx = await this.wallet.signTransaction(tx);\n    const result = await (0, rpc_js_1.simulateTransaction)(this.connection, tx, signers, commitment, includeAccounts);\n    if (result.value.err) {\n      throw new SimulateError(result.value);\n    }\n    return result.value;\n  }\n}\nexports.AnchorProvider = AnchorProvider;\nclass SimulateError extends Error {\n  constructor(simulationResponse, message) {\n    super(message);\n    this.simulationResponse = simulationResponse;\n  }\n}\n// Copy of Connection.sendAndConfirmRawTransaction that throws\n// a better error if 'confirmTransaction` returns an error status\nasync function sendAndConfirmRawTransaction(connection, rawTransaction, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment\n  };\n  const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);\n  const status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n  if (status.err) {\n    throw new ConfirmError(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\nclass ConfirmError extends Error {\n  constructor(message) {\n    super(message);\n  }\n}\n/**\n * Sets the default provider on the client.\n */\nfunction setProvider(provider) {\n  _provider = provider;\n}\nexports.setProvider = setProvider;\n/**\n * Returns the default provider being used by the client.\n */\nfunction getProvider() {\n  if (_provider === null) {\n    return AnchorProvider.local();\n  }\n  return _provider;\n}\nexports.getProvider = getProvider;\n// Global provider used as the default when a provider is not given.\nlet _provider = null;","map":{"version":3,"mappings":"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","names":["AnchorProvider","constructor","connection","wallet","opts","publicKey","defaultOptions","preflightCommitment","commitment","local","url","common_js_1","Error","web3_js_1","NodeWallet","require","default","env","process","ANCHOR_PROVIDER_URL","undefined","options","sendAndConfirm","tx","signers","feePayer","recentBlockhash","getRecentBlockhash","blockhash","signTransaction","forEach","kp","partialSign","rawTx","serialize","sendAndConfirmRawTransaction","err","ConfirmError","failedTx","getTransaction","index_js_1","encode","signature","logs","meta","logMessages","message","sendAll","txWithSigners","txs","map","r","signedTxs","signAllTransactions","sigs","k","length","push","simulate","includeAccounts","getLatestBlockhash","result","value","SimulateError","exports","simulationResponse","rawTransaction","sendOptions","skipPreflight","sendRawTransaction","status","confirmTransaction","JSON","stringify","setProvider","provider","_provider","getProvider"],"sourceRoot":"","sources":["../../src/provider.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}
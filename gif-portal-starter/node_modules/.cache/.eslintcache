[{"/Users/arjein/Desktop/Projects/deneme/buildspace-gif-portal/gif-portal-starter/src/index.js":"1","/Users/arjein/Desktop/Projects/deneme/buildspace-gif-portal/gif-portal-starter/src/App.js":"2"},{"size":219,"mtime":1673119830178,"results":"3","hashOfConfig":"4"},{"size":8276,"mtime":1673119830177,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"pgc1v7",{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"/Users/arjein/Desktop/Projects/deneme/buildspace-gif-portal/gif-portal-starter/src/index.js",[],"/Users/arjein/Desktop/Projects/deneme/buildspace-gif-portal/gif-portal-starter/src/App.js",["11","12","13"],"import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, AnchorProvider, web3 } from \"@project-serum/anchor\";\nimport \"./App.css\";\nimport { Buffer } from \"buffer\";\nimport kp from \"./keypair.json\";\n\nwindow.Buffer = Buffer;\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\n\n// This is the address of your solana program, if you forgot, just run solana address -k target/deploy/myepicproject-keypair.json\nconst programID = new PublicKey(\"BfWCivXaDRfxTtq2LnSp31FbSsxDXHXGhjVcemXxqXG9\");\n\n// Set our network to devnet.\nconst network = clusterApiUrl(\"devnet\");\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\",\n};\n\n// Constants\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gifList, setGifList] = useState([]);\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    if (window?.solana?.isPhantom) {\n      console.log(\"Phantom wallet found!\");\n      const response = await window.solana.connect({ onlyIfTrusted: true });\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n\n      /*\n       * Set the user's publicKey in state to be used later!\n       */\n      setWalletAddress(response.publicKey.toString());\n    } else {\n      alert(\"Solana object not found! Get a Phantom Wallet ðŸ‘»\");\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\");\n      return;\n    }\n    setInputValue(\"\");\n    console.log(\"Gif link:\", inputValue);\n    try {\n      const provider = getProvider();\n      const program = await getProgram();\n\n      await program.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue);\n\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error);\n    }\n  };\n\n  const updateVote = async (gifLink) => {\n    try {\n      const provider = getProvider();\n      const program = await getProgram();\n\n      console.log(gifLink);\n\n      await program.rpc.updateItem(gifLink, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n\n      console.log(\"Vote sent to program\", inputValue);\n\n      //      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending Vote:\", error);\n    }\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new AnchorProvider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n    return provider;\n  };\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = await getProgram();\n\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount],\n      });\n      console.log(\n        \"Created a new BaseAccount w/ address:\",\n        baseAccount.publicKey.toString()\n      );\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button\n            className=\"cta-button submit-gif-button\"\n            onClick={createGifAccount}\n          >\n            Click for One-Time Initialization GIF Account\n          </button>\n        </div>\n      );\n    }\n    // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return (\n        <div className=\"connected-container\">\n          <form\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendGif();\n            }}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"Enter gif link!\"\n              value={inputValue}\n              onChange={onInputChange}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\n              Submit\n            </button>\n          </form>\n          <div className=\"gif-grid\">\n            {/* We use index as the key instead, also, the src is now item.gifLink */}\n\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <p className=\"gradient-text\">{item.userAddress.toString()}</p>\n                <img src={item.gifLink} alt=\"gif\" />\n                <span>\n                  <form\n                    onSubmit={(event) => {\n                      event.preventDefault();\n                      updateVote(item.gifLink);\n                    }}\n                  >\n                    <div>\n                      <span className=\"sub-text\">{item.votes.toString()}</span>\n                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                      <button className=\"vote-btn\" type=\"submit\">\n                        <span className=\"vote-text\">Support GIF!</span>\n                      </button>\n                    </div>\n                  </form>\n                </span>\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    }\n  };\n\n  const getProgram = async () => {\n    // Get metadata about your solana program\n    const idl = await Program.fetchIdl(programID, getProvider());\n    // Create a program that you can call\n    return new Program(idl, programID, getProvider());\n  };\n\n  const getGifList = async () => {\n    try {\n      const program = await getProgram();\n      console.log(program.account.baseAccount.fetch(baseAccount.publicKey));\n      const account = await program.account.baseAccount.fetch(\n        baseAccount.publicKey\n      );\n\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifList(null);\n    }\n  };\n  // UseEffects\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\");\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      {/* This was solely added for some styling fanciness */}\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\n        <div className=\"header-container\">\n          <p className=\"header\">GIF PORTAL</p>\n          <p className=\"sub-text\">View your GIF collection âœ¨</p>\n          {/* Add the condition to show this only if we don't have a wallet address */}\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n",{"ruleId":"14","severity":1,"message":"15","line":12,"column":24,"nodeType":"16","messageId":"17","endLine":12,"endColumn":31},{"ruleId":"14","severity":1,"message":"18","line":31,"column":7,"nodeType":"16","messageId":"17","endLine":31,"endColumn":19},{"ruleId":"19","severity":1,"message":"20","line":258,"column":6,"nodeType":"21","endLine":258,"endColumn":21,"suggestions":"22"},"no-unused-vars","'Keypair' is assigned a value but never used.","Identifier","unusedVar","'TWITTER_LINK' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getGifList'. Either include it or remove the dependency array.","ArrayExpression",["23"],{"desc":"24","fix":"25"},"Update the dependencies array to be: [getGifList, walletAddress]",{"range":"26","text":"27"},[7653,7668],"[getGifList, walletAddress]"]
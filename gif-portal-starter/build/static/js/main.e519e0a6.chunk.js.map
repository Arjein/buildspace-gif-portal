{"version":3,"sources":["App.js","index.js"],"names":["window","Buffer","SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","network","clusterApiUrl","opts","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","connectWallet","sendGif","length","provider","getProvider","getProgram","program","addGif","accounts","user","wallet","getGifList","updateVote","gifLink","rpc","updateItem","onInputChange","event","value","target","connection","Connection","AnchorProvider","createGifAccount","startStuffOff","systemProgram","programId","signers","Program","fetchIdl","idl","account","fetch","useEffect","onLoad","addEventListener","removeEventListener","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","userAddress","src","alt","votes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e519e0a6.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, AnchorProvider, web3 } from \"@project-serum/anchor\";\nimport \"./App.css\";\nimport { Buffer } from \"buffer\";\nimport kp from \"./keypair.json\";\n\nwindow.Buffer = Buffer;\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\n\n// This is the address of your solana program, if you forgot, just run solana address -k target/deploy/myepicproject-keypair.json\nconst programID = new PublicKey(\"BfWCivXaDRfxTtq2LnSp31FbSsxDXHXGhjVcemXxqXG9\");\n\n// Set our network to devnet.\nconst network = clusterApiUrl(\"devnet\");\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\",\n};\n\n// Constants\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gifList, setGifList] = useState([]);\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    if (window?.solana?.isPhantom) {\n      console.log(\"Phantom wallet found!\");\n      const response = await window.solana.connect({ onlyIfTrusted: true });\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n\n      /*\n       * Set the user's publicKey in state to be used later!\n       */\n      setWalletAddress(response.publicKey.toString());\n    } else {\n      alert(\"Solana object not found! Get a Phantom Wallet ðŸ‘»\");\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\");\n      return;\n    }\n    setInputValue(\"\");\n    console.log(\"Gif link:\", inputValue);\n    try {\n      const provider = getProvider();\n      const program = await getProgram();\n\n      await program.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue);\n\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error);\n    }\n  };\n\n  const updateVote = async (gifLink) => {\n    try {\n      const provider = getProvider();\n      const program = await getProgram();\n\n      console.log(gifLink);\n\n      await program.rpc.updateItem(gifLink, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n\n      console.log(\"Vote sent to program\", inputValue);\n\n      //      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending Vote:\", error);\n    }\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new AnchorProvider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n    return provider;\n  };\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = await getProgram();\n\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount],\n      });\n      console.log(\n        \"Created a new BaseAccount w/ address:\",\n        baseAccount.publicKey.toString()\n      );\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button\n            className=\"cta-button submit-gif-button\"\n            onClick={createGifAccount}\n          >\n            Click for One-Time Initialization GIF Account\n          </button>\n        </div>\n      );\n    }\n    // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return (\n        <div className=\"connected-container\">\n          <form\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendGif();\n            }}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"Enter gif link!\"\n              value={inputValue}\n              onChange={onInputChange}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\n              Submit\n            </button>\n          </form>\n          <div className=\"gif-grid\">\n            {/* We use index as the key instead, also, the src is now item.gifLink */}\n\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <p className=\"gradient-text\">{item.userAddress.toString()}</p>\n                <img src={item.gifLink} alt=\"gif\" />\n                <span>\n                  <form\n                    onSubmit={(event) => {\n                      event.preventDefault();\n                      updateVote(item.gifLink);\n                    }}\n                  >\n                    <div>\n                      <span className=\"sub-text\">{item.votes.toString()}</span>\n                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                      <button className=\"vote-btn\" type=\"submit\">\n                        <span className=\"vote-text\">Support GIF!</span>\n                      </button>\n                    </div>\n                  </form>\n                </span>\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    }\n  };\n\n  const getProgram = async () => {\n    // Get metadata about your solana program\n    const idl = await Program.fetchIdl(programID, getProvider());\n    // Create a program that you can call\n    return new Program(idl, programID, getProvider());\n  };\n\n  const getGifList = async () => {\n    try {\n      const program = await getProgram();\n      console.log(program.account.baseAccount.fetch(baseAccount.publicKey));\n      const account = await program.account.baseAccount.fetch(\n        baseAccount.publicKey\n      );\n\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifList(null);\n    }\n  };\n  // UseEffects\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\");\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      {/* This was solely added for some styling fanciness */}\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\n        <div className=\"header-container\">\n          <p className=\"header\">GIF PORTAL</p>\n          <p className=\"sub-text\">View your GIF collection âœ¨</p>\n          {/* Add the condition to show this only if we don't have a wallet address */}\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}